syntax = "proto2";
package pb;


enum CMD {
    NONE = 0; // 空协议
    // 通用协议段: 1000 - 2000
    ERROR_MSG = 1000; // 错误信息
    // 大厅协议段: 2001 - 3000
    GAME_ISSUE = 2001; // 获取版本号
    HALL_LOGIN = 2002; // 登录游戏
    HALL_START_GAME = 2003; // 开始游戏

    // 房间协议段: 3001 - 3100
    ROOM_LOGIN = 3001; // 登录房间
    ROOM_PING = 3002; // PING
    ROOM_PLAYER_ADD = 3004; // 房间加入玩家
    ROOM_PLAYER_REMOVE = 3005; // 房间移出玩家
    ROOM_FRAME_NOTIFY = 3006; // 数据帧同步
    ROOM_LADDER_NOTIFY = 3007; // 同步排行榜
    ROOM_KILLS_NOTIFY = 3008; // 连杀推送
    ROOM_PLAYER_RELIVE = 3009; // 玩家复活
    ROOM_PLAYER_MOVE = 3010; // 移动
    ROOM_PLAYER_STOP = 3011; // 停止
    ROOM_PLAYER_SPELL = 3012; // 释放技能
    ROOM_SPELL_LEVEL_UP = 3013; // 技能升级

   // 房间校验： 3101 - 3200
    ROOM_PLAYER_DRAG = 3101; // 移动强制拉扯
    ROOM_PLAYER_DRAG_END = 3102; // 强制拉扯响应

    // RoomCenter内部协议段: 4001 - 5000
    RCENTER_REGISTER = 4001; // 注册房间服务器
}


// 错误信息
message ErrorMsg {
    required uint32 command = 1; // 命令
    required uint32 error_code = 2; // 错误码
}


enum E {
    OK = 0; // 成功
    INVALID_REQUEST = 1; // 无效请求
    INTERNAL_ERROR = 2; // 系统内部错误

    // 大厅错误码[1000 - 2000]
    HALL_GET_ROOM_FAIL = 1000; // 获取房间失败
    HALL_GET_DB_DATA_FAIL = 1001; // 获取DB数据错误
    HALL_INVALID_TOKEN = 1002; // 无效的秘钥
    HALL_PLAYER_ALREADY_LOGIN = 1003; // 玩家已经登录
    ROOM_GAME_ISSUE = 1004; // 客户端版本不匹配

    // room错误码[2001-3000]
    ROOM_ROAL_NOT_EXIST = 2001; // 角色信息不存在
    ROOM_SPELL_NOT_EXIST = 2002; // 技能不存在
    ROOM_SPELL_IS_LIMIT = 2003; // 技能已达上限
    ROOM_SPELL_NORMAL_NOT_UP = 2004; // 普攻不能升级
    ROOM_SPELL_LEVEL_UP_ERROR = 2005; // 技能升级错误
    ROOM_SPELL_POINT_NOT_ENOUGH = 2006; // 技能点不足

}


// 2001 获取版本号
message GameIssueReq{
}

message GameIssueRes {
    required string GameIssue = 1;
}

// 2002 登录游戏
message HallLoginReq {
    required string token = 1; // token
}

// 2002
message HallLoginRes {
    required uint32 id = 1; // id
    required string name = 2; // name
}

// 2003 开始游戏
message HallStartGameReq {

}

// 2003
message HallStartGameRes {
    required uint32 room_id = 1; // 房间ID
    required string tcp_addr = 2; // TCP地址
    required string udp_addr = 3; // UDP地址
    required string ws_addr = 4; // WS地址
    required string room_key = 5; // 房间Key
}



message RCenterRegisterReq {
    required string tcp_addr = 1; // 房间TCP地址
    required string udp_addr = 2; // 房间UDP地址
    required string ws_addr = 3; // 房间WS地址
    required string key = 4; // 房间认证key
}

message RCenterRegisterRes {
    required uint32 id = 1; // 房间服务器ID
}


message Vector {
    required sint32 x = 1;
    required sint32 z = 2;
}

// 玩家信息
message RoomPlayer {
    required uint32 id = 1; // 用户ID
    required string nickname = 2; // 游戏昵称
    required RoomPlayerState state = 3; // 状态
    required uint32 job  = 4; // 职业
    required uint32 level = 5; // 等级
    required Vector pos = 6;// 位置
    required Vector dir = 7; // 方向
    required uint32 score = 8; // 积分
    repeated RoomPlayerSpell spells = 9; // 技能 [<0:普攻> <1,2,3:1,2,3技能>]

}

// 玩家状态
message RoomPlayerState {
    required uint32 hp = 1; // 血量
    required uint32 speed = 2; // 速度
}


// 玩家技能信息
message RoomPlayerSpell {
    required uint32 xml_id = 1; // id
    required uint32 level = 2; // 等级
    required uint32 cd = 3; // cd
}

// 玩家道具
message RoomItem {
    required uint32 id = 1; // id
    required uint32 xml_id = 2; // 静态id
    required Vector pos = 3;// 位置
}

// 玩家buff
message RoomBuff {
    required string id = 1; // id
    required uint32 xml_id = 2;
    optional uint32 player_id = 3; // 玩家id
    optional Vector pos = 4; // 位置
    optional Vector dir = 5; // 方向
    required uint32 remain_time = 6; // 剩余时间

}

// 玩家快照
message RoomSnapShot {
    repeated RoomPlayer players = 1;
    repeated RoomItem   items = 2;
    repeated RoomBuff   buffs = 3;
}

// 登录
message RoomLoginReq {
    required string nickname = 1; // 游戏昵称
    required uint32 room_id = 2; // 房间ID
    required string room_key = 3; // 认证key
    required uint32 job = 4; // 职业
}

message RoomLoginRes {
    required uint32 id = 1; // 用户ID
    required RoomSnapShot snap_shot = 3; // 快照
}

// 房间加入玩家
message RoomPlayerAdd {
    required RoomPlayer player = 1; // 玩家数据
}

// 房间移出玩家
message RoomPlayerRemove {
    required uint32 id = 1; // 玩家ID
}

// 帧数据
message Frame {
    required uint32 cmd = 1; // 指令
    required bytes data = 2; // 数据
}

// 数据帧同步
message RoomFrameNotify {
    required uint32 frame = 1; // 当前帧
    repeated Frame list = 2; // 指令列表
}

// 排行榜通知
message RoomLadderNotify {
    message Item {
        required uint32 id = 1; // 玩家ID
        required int32 score = 2; // 积分
        required uint32 kill_times = 3; // 击杀数
        required uint32 dead_times = 4; // 死亡数
    }
    repeated Item items = 1; // 排行记录
}

// 移动
message RoomPlayerMoveReq {
    required Vector pos = 1;// 位置
    required Vector dir = 2; // 方向
}

// 强制拉扯
message RoomPlayerDragRes {
    required Vector pos = 1;// 位置
    required Vector dir = 2; // 方向
}

// 强制拉扯响应
message RoomPlayerDragEndReq {
}

// 复活
message RoomPlayerReliveReq {
    required uint32 job = 1;
}

// 停止
message RoomPlayerStopReq {
    required Vector pos = 1;// 位置
    required Vector dir = 2; // 方向
}

// 技能释放
message SpellStartReq {
    required uint32 xml_id = 1; // 技能id
    required Vector pos = 2;// 位置
    required Vector dir = 3; // 方向
}

// 技能升级
message SpellLevelUpReq {
    required uint32 xml_id = 1; // 技能id
}

// 击杀通知
message KillNotify {
    message KillInfo {
        required uint32 catalog = 1; // 类型
        required uint32 number = 2; // 数量
    }
    required uint32 player_id = 1; // 玩家id
    required uint32 killed_id = 2; // 被杀玩家id
    repeated KillInfo info = 3; // 击杀信息
}

// 心跳包
message RoomPingReq {
}

message RoomPingRes {
    required uint32  cur_frame = 1; // 服务器当前帧
}






// 帧同步指令
enum FRAME {
    CMD_NONE = 0; // 空指令
    CMD_MOVE = 1; // 移动
    CMD_STOP = 2; // 停止
    CMD_DEATH = 3; // 死亡
    CMD_RELIVE = 4; // 复活
    CMD_ACTION_START = 5; // 技能动作释放
    CMD_BUFF_START = 6; // BUFF释放
    CMD_BUFF_REMOVE = 7; // BUFF移除
    CMD_SPELL_SATE = 8; // 技能状态
    CMD_SCENE_ITEM_CREATE = 9; // 场景道具创建
    CMD_SCENE_TIEM_REMOVE = 10; // 场景道具移除
    CMD_LEVEL_UP = 11; // 玩家升级
    CMD_BASE_STATE = 12; // BUFF状态
    CMD_SPELL_LEVEL_UP = 13; // 技能升级
    CMD_MOVE_TEST = 14; // 移动测试
}

// 移动指令
message FrameMove {
    required uint32 id = 1; // 玩家ID
    required Vector pos = 2; // 位置
    required Vector dir = 3; // 方向
}

// 测试移动指令
message FrameMoveTest{
    required uint32 id = 1; // 玩家id
    required Vector pos = 2; // 位置
    required Vector dir = 3; // 方向
    required Vector pre_pos = 4; // 预测位置
}

// 停止指令
message FrameStop {
    required uint32 id = 1; // 玩家ID
    required Vector pos = 2; // 位置
    required Vector dir = 3; // 方向
}

// 死亡指令
message FrameDeath {
    required uint32 id = 1; // 玩家Id
    required uint32 murderer_id = 2; // 凶手id
    required uint32 murderer_cur_socre = 3; // 凶手当前的积分
    required uint32 owner_cur_socre = 4; // 玩家当前的积分 
}

// 复活指令
message FrameRelive {
    required RoomPlayer player = 1; // 玩家信息
}

// 技能动作开始
message FrameActionStart {
    required uint32 player_id = 1; // 玩家id
    required uint32 spell_id = 2; // 技能id
    required uint32 action_id = 3; // 动作id
    required uint32 left_cd = 4; // 剩余cd
}

// 释放buff通知
message  FrameStartBuff {
    required RoomBuff buff = 1; // buff信息
}

// 移除buff通知
message FrameRemoveBuff {
    optional uint32 player_id = 1; // player_id
    required string buff_id = 2; // buff_id

}

// 技能状态
message FrameSpellState {
    required uint32 player_id = 1; // player_id
    required string action_id = 2; // action id
    required uint32 state = 3; // 状态［0:打断,1:cd中,2:锁定中,3:结束］
    required string cur_gen_id = 4; // 目前生成到的id
}

// 技能等级
message FrameSpellLevel {
    required uint32 player_id = 1;
    repeated RoomPlayerSpell spells = 2; // 技能 [<0:普攻> <1,2,3:1,2,3技能>]
}

// 场景道具创建
message FrameSceneItemCreate {
   required RoomItem item = 1; // 场景道具
}

// 场景道具移除
message FrameSceneItemRemove {
    required uint32 id = 1; // id
}

// 玩家升级推送
message FrameLevelUp {
    required uint32 player_id = 1; // 玩家id
    required uint32 player_level = 2; // 玩家等级
    required uint32 player_spell_point = 3; // 玩家当前拥有的技能点
}

// 玩家状态推送
message FramePlayerBaseState {
    required uint32 player_id = 1; // 玩家id
    required RoomPlayerState state = 2;  // 状态
}


