// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "actions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class ActionListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionList> {
} _ActionList_default_instance_;
class ActionVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionVector> {
} _ActionVector_default_instance_;
class ActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Action> {
} _Action_default_instance_;

namespace protobuf_actions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, actionitem_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionVector, z_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, xml_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, job_),
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(ActionList)},
  { 6, 12, sizeof(ActionVector)},
  { 14, 23, sizeof(Action)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Action_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "actions.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _ActionList_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ActionVector_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Action_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ActionList_default_instance_.DefaultConstruct();
  _ActionVector_default_instance_.DefaultConstruct();
  _Action_default_instance_.DefaultConstruct();
  _Action_default_instance_.get_mutable()->pos_ = const_cast< ::pb::ActionVector*>(
      ::pb::ActionVector::internal_default_instance());
  _Action_default_instance_.get_mutable()->dir_ = const_cast< ::pb::ActionVector*>(
      ::pb::ActionVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ractions.proto\022\002pb\",\n\nActionList\022\036\n\nact"
      "ionitem\030\001 \003(\0132\n.pb.Action\"$\n\014ActionVecto"
      "r\022\t\n\001x\030\001 \002(\021\022\t\n\001z\030\002 \002(\021\"s\n\006Action\022\016\n\006act"
      "ion\030\001 \002(\t\022\035\n\003pos\030\002 \002(\0132\020.pb.ActionVector"
      "\022\035\n\003dir\030\003 \002(\0132\020.pb.ActionVector\022\016\n\006xml_i"
      "d\030\004 \002(\r\022\013\n\003job\030\005 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "actions.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_actions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionList::kActionitemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionList::ActionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_actions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ActionList)
}
ActionList::ActionList(const ActionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      actionitem_(from.actionitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ActionList)
}

void ActionList::SharedCtor() {
  _cached_size_ = 0;
}

ActionList::~ActionList() {
  // @@protoc_insertion_point(destructor:pb.ActionList)
  SharedDtor();
}

void ActionList::SharedDtor() {
}

void ActionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionList::descriptor() {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[0].descriptor;
}

const ActionList& ActionList::default_instance() {
  protobuf_actions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionList* ActionList::New(::google::protobuf::Arena* arena) const {
  ActionList* n = new ActionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ActionList)
  actionitem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ActionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Action actionitem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actionitem()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ActionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ActionList)
  return false;
#undef DO_
}

void ActionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ActionList)
  // repeated .pb.Action actionitem = 1;
  for (unsigned int i = 0, n = this->actionitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actionitem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ActionList)
}

::google::protobuf::uint8* ActionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.ActionList)
  // repeated .pb.Action actionitem = 1;
  for (unsigned int i = 0, n = this->actionitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->actionitem(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ActionList)
  return target;
}

size_t ActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ActionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .pb.Action actionitem = 1;
  {
    unsigned int count = this->actionitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actionitem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ActionList)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ActionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ActionList)
    MergeFrom(*source);
  }
}

void ActionList::MergeFrom(const ActionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ActionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionitem_.MergeFrom(from.actionitem_);
}

void ActionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionList::CopyFrom(const ActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->actionitem())) return false;
  return true;
}

void ActionList::Swap(ActionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionList::InternalSwap(ActionList* other) {
  actionitem_.UnsafeArenaSwap(&other->actionitem_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionList::GetMetadata() const {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionList

// repeated .pb.Action actionitem = 1;
int ActionList::actionitem_size() const {
  return actionitem_.size();
}
void ActionList::clear_actionitem() {
  actionitem_.Clear();
}
const ::pb::Action& ActionList::actionitem(int index) const {
  // @@protoc_insertion_point(field_get:pb.ActionList.actionitem)
  return actionitem_.Get(index);
}
::pb::Action* ActionList::mutable_actionitem(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ActionList.actionitem)
  return actionitem_.Mutable(index);
}
::pb::Action* ActionList::add_actionitem() {
  // @@protoc_insertion_point(field_add:pb.ActionList.actionitem)
  return actionitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Action >*
ActionList::mutable_actionitem() {
  // @@protoc_insertion_point(field_mutable_list:pb.ActionList.actionitem)
  return &actionitem_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Action >&
ActionList::actionitem() const {
  // @@protoc_insertion_point(field_list:pb.ActionList.actionitem)
  return actionitem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionVector::kXFieldNumber;
const int ActionVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionVector::ActionVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_actions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ActionVector)
}
ActionVector::ActionVector(const ActionVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:pb.ActionVector)
}

void ActionVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

ActionVector::~ActionVector() {
  // @@protoc_insertion_point(destructor:pb.ActionVector)
  SharedDtor();
}

void ActionVector::SharedDtor() {
}

void ActionVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionVector::descriptor() {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[1].descriptor;
}

const ActionVector& ActionVector::default_instance() {
  protobuf_actions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionVector* ActionVector::New(::google::protobuf::Arena* arena) const {
  ActionVector* n = new ActionVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionVector::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ActionVector)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ActionVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ActionVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ActionVector)
  return false;
#undef DO_
}

void ActionVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ActionVector)
  // required sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // required sint32 z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ActionVector)
}

::google::protobuf::uint8* ActionVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.ActionVector)
  // required sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // required sint32 z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ActionVector)
  return target;
}

size_t ActionVector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.ActionVector)
  size_t total_size = 0;

  if (has_x()) {
    // required sint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->x());
  }

  if (has_z()) {
    // required sint32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->z());
  }

  return total_size;
}
size_t ActionVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ActionVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->x());

    // required sint32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ActionVector)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ActionVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ActionVector)
    MergeFrom(*source);
  }
}

void ActionVector::MergeFrom(const ActionVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ActionVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void ActionVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ActionVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionVector::CopyFrom(const ActionVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ActionVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ActionVector::Swap(ActionVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionVector::InternalSwap(ActionVector* other) {
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionVector::GetMetadata() const {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionVector

// required sint32 x = 1;
bool ActionVector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionVector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionVector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionVector::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 ActionVector::x() const {
  // @@protoc_insertion_point(field_get:pb.ActionVector.x)
  return x_;
}
void ActionVector::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.ActionVector.x)
}

// required sint32 z = 2;
bool ActionVector::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionVector::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionVector::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionVector::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 ActionVector::z() const {
  // @@protoc_insertion_point(field_get:pb.ActionVector.z)
  return z_;
}
void ActionVector::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.ActionVector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionFieldNumber;
const int Action::kPosFieldNumber;
const int Action::kDirFieldNumber;
const int Action::kXmlIdFieldNumber;
const int Action::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_actions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.has_pos()) {
    pos_ = new ::pb::ActionVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::ActionVector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  ::memcpy(&xml_id_, &from.xml_id_,
    reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&xml_id_) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:pb.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&pos_) + sizeof(job_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:pb.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[2].descriptor;
}

const Action& Action::default_instance() {
  protobuf_actions_2eproto::InitDefaults();
  return *internal_default_instance();
}

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Action)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_action()) {
      GOOGLE_DCHECK(!action_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*action_.UnsafeRawStringPointer())->clear();
    }
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::ActionVector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::ActionVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&xml_id_, 0, reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&xml_id_) + sizeof(job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.Action.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.ActionVector pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.ActionVector dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 xml_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 job = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Action)
  // required string action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Action.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // required .pb.ActionVector pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required .pb.ActionVector dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dir_, output);
  }

  // required uint32 xml_id = 4;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->xml_id(), output);
  }

  // required uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Action)
  // required string action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.Action.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // required .pb.ActionVector pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required .pb.ActionVector dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dir_, false, target);
  }

  // required uint32 xml_id = 4;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->xml_id(), target);
  }

  // required uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Action)
  return target;
}

size_t Action::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.Action)
  size_t total_size = 0;

  if (has_action()) {
    // required string action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  if (has_pos()) {
    // required .pb.ActionVector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.ActionVector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  if (has_xml_id()) {
    // required uint32 xml_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }

  if (has_job()) {
    // required uint32 job = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());
  }

  return total_size;
}
size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());

    // required .pb.ActionVector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.ActionVector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

    // required uint32 xml_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());

    // required uint32 job = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_action()) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::ActionVector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::ActionVector::MergeFrom(from.dir());
    }
    if (from.has_xml_id()) {
      set_xml_id(from.xml_id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  action_.Swap(&other->action_);
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(xml_id_, other->xml_id_);
  std::swap(job_, other->job_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_actions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_actions_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// required string action = 1;
bool Action::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Action::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void Action::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void Action::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
const ::std::string& Action::action() const {
  // @@protoc_insertion_point(field_get:pb.Action.action)
  return action_.GetNoArena();
}
void Action::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Action.action)
}
#if LANG_CXX11
void Action::set_action(::std::string&& value) {
  set_has_action();
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Action.action)
}
#endif
void Action::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Action.action)
}
void Action::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Action.action)
}
::std::string* Action::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:pb.Action.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Action::release_action() {
  // @@protoc_insertion_point(field_release:pb.Action.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Action::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:pb.Action.action)
}

// required .pb.ActionVector pos = 2;
bool Action::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Action::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void Action::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Action::clear_pos() {
  if (pos_ != NULL) pos_->::pb::ActionVector::Clear();
  clear_has_pos();
}
const ::pb::ActionVector& Action::pos() const {
  // @@protoc_insertion_point(field_get:pb.Action.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::ActionVector::internal_default_instance();
}
::pb::ActionVector* Action::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::ActionVector;
  }
  // @@protoc_insertion_point(field_mutable:pb.Action.pos)
  return pos_;
}
::pb::ActionVector* Action::release_pos() {
  // @@protoc_insertion_point(field_release:pb.Action.pos)
  clear_has_pos();
  ::pb::ActionVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Action::set_allocated_pos(::pb::ActionVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Action.pos)
}

// required .pb.ActionVector dir = 3;
bool Action::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Action::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void Action::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void Action::clear_dir() {
  if (dir_ != NULL) dir_->::pb::ActionVector::Clear();
  clear_has_dir();
}
const ::pb::ActionVector& Action::dir() const {
  // @@protoc_insertion_point(field_get:pb.Action.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::ActionVector::internal_default_instance();
}
::pb::ActionVector* Action::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::ActionVector;
  }
  // @@protoc_insertion_point(field_mutable:pb.Action.dir)
  return dir_;
}
::pb::ActionVector* Action::release_dir() {
  // @@protoc_insertion_point(field_release:pb.Action.dir)
  clear_has_dir();
  ::pb::ActionVector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void Action::set_allocated_dir(::pb::ActionVector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Action.dir)
}

// required uint32 xml_id = 4;
bool Action::has_xml_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Action::set_has_xml_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Action::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Action::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 Action::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.Action.xml_id)
  return xml_id_;
}
void Action::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.Action.xml_id)
}

// required uint32 job = 5;
bool Action::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Action::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
void Action::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
void Action::clear_job() {
  job_ = 0u;
  clear_has_job();
}
::google::protobuf::uint32 Action::job() const {
  // @@protoc_insertion_point(field_get:pb.Action.job)
  return job_;
}
void Action::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:pb.Action.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
