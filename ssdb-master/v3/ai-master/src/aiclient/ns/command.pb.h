// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns/command.proto

#ifndef PROTOBUF_ns_2fcommand_2eproto__INCLUDED
#define PROTOBUF_ns_2fcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace pb {
}  // namespace pb

namespace pb {

namespace protobuf_ns_2fcommand_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ns_2fcommand_2eproto

enum CMD {
  NONE = 0,
  ERROR_MSG = 1000,
  HALL_LOGIN = 2001,
  HALL_START_GAME = 2002,
  ROOM_LOGIN = 3001,
  ROOM_PING = 3002,
  ROOM_ADD_PLAYER = 3004,
  ROOM_REMOVE_PLAYER = 3005,
  ROOM_FRAME_NOTIFY = 3006,
  ROOM_LADDER_NOTIFY = 3007,
  ROOM_KILLS_NOTIFY = 3008,
  ROOM_RELIVE_PLAYER = 3009,
  ROOM_MOVE = 3101,
  ROOM_MOVE_FORCE = 3102,
  ROOM_MOVE_FORCE_RES = 3103,
  ROOM_STOP = 3105,
  ROOM_SPELL = 3106,
  ROOM_SPELL_LEVEL_UP = 3108,
  RCENTER_REGISTER = 4001
};
bool CMD_IsValid(int value);
const CMD CMD_MIN = NONE;
const CMD CMD_MAX = RCENTER_REGISTER;
const int CMD_ARRAYSIZE = CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMD_descriptor();
inline const ::std::string& CMD_Name(CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMD_descriptor(), value);
}
inline bool CMD_Parse(
    const ::std::string& name, CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMD>(
    CMD_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::CMD> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CMD>() {
  return ::pb::CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ns_2fcommand_2eproto__INCLUDED
