// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns/room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ns/room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class VectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector> {
} _Vector_default_instance_;
class RoomPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayer> {
} _RoomPlayer_default_instance_;
class RoomPlayerStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerState> {
} _RoomPlayerState_default_instance_;
class RoomPlayerSpellDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerSpell> {
} _RoomPlayerSpell_default_instance_;
class RoomItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomItem> {
} _RoomItem_default_instance_;
class RoomBuffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomBuff> {
} _RoomBuff_default_instance_;
class RoomSnapShotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomSnapShot> {
} _RoomSnapShot_default_instance_;
class RoomLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomLoginReq> {
} _RoomLoginReq_default_instance_;
class RoomLoginResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomLoginRes> {
} _RoomLoginRes_default_instance_;
class RoomPlayerAddDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerAdd> {
} _RoomPlayerAdd_default_instance_;
class RoomPlayerRemoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerRemove> {
} _RoomPlayerRemove_default_instance_;
class FrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Frame> {
} _Frame_default_instance_;
class RoomFrameNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomFrameNotify> {
} _RoomFrameNotify_default_instance_;
class RoomLadderNotify_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomLadderNotify_Item> {
} _RoomLadderNotify_Item_default_instance_;
class RoomLadderNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomLadderNotify> {
} _RoomLadderNotify_default_instance_;
class RoomPlayerMoveReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerMoveReq> {
} _RoomPlayerMoveReq_default_instance_;
class RoomPlayerDragResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerDragRes> {
} _RoomPlayerDragRes_default_instance_;
class RoomPlayerDragEndReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerDragEndReq> {
} _RoomPlayerDragEndReq_default_instance_;
class RoomPlayerReliveReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerReliveReq> {
} _RoomPlayerReliveReq_default_instance_;
class RoomPlayerReliveResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerReliveRes> {
} _RoomPlayerReliveRes_default_instance_;
class RoomPlayerStopReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPlayerStopReq> {
} _RoomPlayerStopReq_default_instance_;
class SpellStartReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpellStartReq> {
} _SpellStartReq_default_instance_;
class SpellLevelUpReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpellLevelUpReq> {
} _SpellLevelUpReq_default_instance_;
class SpellLevelUpResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpellLevelUpRes> {
} _SpellLevelUpRes_default_instance_;
class KillNotify_KillInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KillNotify_KillInfo> {
} _KillNotify_KillInfo_default_instance_;
class KillNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KillNotify> {
} _KillNotify_default_instance_;
class RoomPingReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPingReq> {
} _RoomPingReq_default_instance_;
class RoomPingResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomPingRes> {
} _RoomPingRes_default_instance_;

namespace protobuf_ns_2froom_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayer, spells_),
  4,
  0,
  1,
  5,
  6,
  2,
  3,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerState, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerState, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerSpell, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerSpell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerSpell, xml_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerSpell, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerSpell, cd_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomItem, xml_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomItem, pos_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, xml_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBuff, remain_time_),
  0,
  3,
  4,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSnapShot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSnapShot, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSnapShot, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSnapShot, buffs_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, room_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginReq, job_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginRes, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginRes, game_issue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLoginRes, snap_shot_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerAdd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerAdd, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerRemove, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomFrameNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomFrameNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomFrameNotify, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomFrameNotify, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, kill_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify_Item, dead_times_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLadderNotify, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerMoveReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerMoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerMoveReq, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerMoveReq, dir_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragRes, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragRes, dir_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragEndReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerDragEndReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveReq, job_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveRes, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveRes, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerReliveRes, score_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerStopReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerStopReq, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPlayerStopReq, dir_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellStartReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellStartReq, xml_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellStartReq, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellStartReq, dir_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpReq, xml_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellLevelUpRes, spell_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify_KillInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify_KillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify_KillInfo, catalog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify_KillInfo, number_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify, killed_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillNotify, info_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPingReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPingRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPingRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPingRes, cur_frame_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Vector)},
  { 8, 21, sizeof(RoomPlayer)},
  { 30, 36, sizeof(RoomPlayerState)},
  { 38, 45, sizeof(RoomPlayerSpell)},
  { 48, 55, sizeof(RoomItem)},
  { 58, 68, sizeof(RoomBuff)},
  { 74, 81, sizeof(RoomSnapShot)},
  { 84, 92, sizeof(RoomLoginReq)},
  { 96, 103, sizeof(RoomLoginRes)},
  { 106, 111, sizeof(RoomPlayerAdd)},
  { 112, 117, sizeof(RoomPlayerRemove)},
  { 118, 124, sizeof(Frame)},
  { 126, 132, sizeof(RoomFrameNotify)},
  { 134, 142, sizeof(RoomLadderNotify_Item)},
  { 146, 151, sizeof(RoomLadderNotify)},
  { 152, 158, sizeof(RoomPlayerMoveReq)},
  { 160, 166, sizeof(RoomPlayerDragRes)},
  { 168, 172, sizeof(RoomPlayerDragEndReq)},
  { 172, 177, sizeof(RoomPlayerReliveReq)},
  { 178, 185, sizeof(RoomPlayerReliveRes)},
  { 188, 194, sizeof(RoomPlayerStopReq)},
  { 196, 203, sizeof(SpellStartReq)},
  { 206, 211, sizeof(SpellLevelUpReq)},
  { 212, 217, sizeof(SpellLevelUpRes)},
  { 218, 224, sizeof(KillNotify_KillInfo)},
  { 226, 233, sizeof(KillNotify)},
  { 236, 240, sizeof(RoomPingReq)},
  { 240, 245, sizeof(RoomPingRes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerSpell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomSnapShot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomLoginRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerAdd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomFrameNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomLadderNotify_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomLadderNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerMoveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerDragRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerDragEndReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerReliveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerReliveRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPlayerStopReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpellStartReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpellLevelUpReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpellLevelUpRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KillNotify_KillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KillNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPingReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomPingRes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ns/room.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RoomPlayer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RoomPlayerState_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RoomPlayerSpell_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RoomItem_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RoomBuff_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RoomSnapShot_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RoomLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RoomLoginRes_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _RoomPlayerAdd_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _RoomPlayerRemove_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Frame_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RoomFrameNotify_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RoomLadderNotify_Item_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RoomLadderNotify_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _RoomPlayerMoveReq_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RoomPlayerDragRes_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _RoomPlayerDragEndReq_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _RoomPlayerReliveReq_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _RoomPlayerReliveRes_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _RoomPlayerStopReq_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SpellStartReq_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SpellLevelUpReq_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SpellLevelUpRes_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _KillNotify_KillInfo_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _KillNotify_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _RoomPingReq_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _RoomPingRes_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector_default_instance_.DefaultConstruct();
  _RoomPlayer_default_instance_.DefaultConstruct();
  _RoomPlayerState_default_instance_.DefaultConstruct();
  _RoomPlayerSpell_default_instance_.DefaultConstruct();
  _RoomItem_default_instance_.DefaultConstruct();
  _RoomBuff_default_instance_.DefaultConstruct();
  _RoomSnapShot_default_instance_.DefaultConstruct();
  _RoomLoginReq_default_instance_.DefaultConstruct();
  _RoomLoginRes_default_instance_.DefaultConstruct();
  _RoomPlayerAdd_default_instance_.DefaultConstruct();
  _RoomPlayerRemove_default_instance_.DefaultConstruct();
  _Frame_default_instance_.DefaultConstruct();
  _RoomFrameNotify_default_instance_.DefaultConstruct();
  _RoomLadderNotify_Item_default_instance_.DefaultConstruct();
  _RoomLadderNotify_default_instance_.DefaultConstruct();
  _RoomPlayerMoveReq_default_instance_.DefaultConstruct();
  _RoomPlayerDragRes_default_instance_.DefaultConstruct();
  _RoomPlayerDragEndReq_default_instance_.DefaultConstruct();
  _RoomPlayerReliveReq_default_instance_.DefaultConstruct();
  _RoomPlayerReliveRes_default_instance_.DefaultConstruct();
  _RoomPlayerStopReq_default_instance_.DefaultConstruct();
  _SpellStartReq_default_instance_.DefaultConstruct();
  _SpellLevelUpReq_default_instance_.DefaultConstruct();
  _SpellLevelUpRes_default_instance_.DefaultConstruct();
  _KillNotify_KillInfo_default_instance_.DefaultConstruct();
  _KillNotify_default_instance_.DefaultConstruct();
  _RoomPingReq_default_instance_.DefaultConstruct();
  _RoomPingRes_default_instance_.DefaultConstruct();
  _RoomPlayer_default_instance_.get_mutable()->state_ = const_cast< ::pb::RoomPlayerState*>(
      ::pb::RoomPlayerState::internal_default_instance());
  _RoomPlayer_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayer_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomItem_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomBuff_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomBuff_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomLoginRes_default_instance_.get_mutable()->snap_shot_ = const_cast< ::pb::RoomSnapShot*>(
      ::pb::RoomSnapShot::internal_default_instance());
  _RoomPlayerAdd_default_instance_.get_mutable()->player_ = const_cast< ::pb::RoomPlayer*>(
      ::pb::RoomPlayer::internal_default_instance());
  _RoomPlayerMoveReq_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayerMoveReq_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayerDragRes_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayerDragRes_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayerStopReq_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _RoomPlayerStopReq_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _SpellStartReq_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _SpellStartReq_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _SpellLevelUpRes_default_instance_.get_mutable()->spell_ = const_cast< ::pb::RoomPlayerSpell*>(
      ::pb::RoomPlayerSpell::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rns/room.proto\022\002pb\"\036\n\006Vector\022\t\n\001x\030\001 \002(\021"
      "\022\t\n\001z\030\002 \002(\021\"\320\001\n\nRoomPlayer\022\n\n\002id\030\001 \002(\r\022\020"
      "\n\010nickname\030\002 \002(\t\022\"\n\005state\030\003 \002(\0132\023.pb.Roo"
      "mPlayerState\022\013\n\003job\030\004 \002(\r\022\r\n\005level\030\005 \002(\r"
      "\022\027\n\003pos\030\006 \002(\0132\n.pb.Vector\022\027\n\003dir\030\007 \002(\0132\n"
      ".pb.Vector\022\r\n\005score\030\010 \002(\r\022#\n\006spells\030\t \003("
      "\0132\023.pb.RoomPlayerSpell\",\n\017RoomPlayerStat"
      "e\022\n\n\002hp\030\001 \002(\r\022\r\n\005state\030\002 \002(\r\"<\n\017RoomPlay"
      "erSpell\022\016\n\006xml_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\n"
      "\n\002cd\030\003 \002(\r\"\?\n\010RoomItem\022\n\n\002id\030\001 \002(\r\022\016\n\006xm"
      "l_id\030\002 \002(\r\022\027\n\003pos\030\003 \002(\0132\n.pb.Vector\"\200\001\n\010"
      "RoomBuff\022\n\n\002id\030\001 \002(\t\022\016\n\006xml_id\030\002 \002(\r\022\021\n\t"
      "player_id\030\003 \001(\r\022\027\n\003pos\030\004 \001(\0132\n.pb.Vector"
      "\022\027\n\003dir\030\005 \001(\0132\n.pb.Vector\022\023\n\013remain_time"
      "\030\006 \002(\r\"i\n\014RoomSnapShot\022\037\n\007players\030\001 \003(\0132"
      "\016.pb.RoomPlayer\022\033\n\005items\030\002 \003(\0132\014.pb.Room"
      "Item\022\033\n\005buffs\030\003 \003(\0132\014.pb.RoomBuff\"P\n\014Roo"
      "mLoginReq\022\020\n\010nickname\030\001 \002(\t\022\017\n\007room_id\030\002"
      " \002(\r\022\020\n\010room_key\030\003 \002(\t\022\013\n\003job\030\004 \002(\r\"S\n\014R"
      "oomLoginRes\022\n\n\002id\030\001 \002(\r\022\022\n\ngame_issue\030\002 "
      "\002(\t\022#\n\tsnap_shot\030\003 \002(\0132\020.pb.RoomSnapShot"
      "\"/\n\rRoomPlayerAdd\022\036\n\006player\030\001 \002(\0132\016.pb.R"
      "oomPlayer\"\036\n\020RoomPlayerRemove\022\n\n\002id\030\001 \002("
      "\r\"\"\n\005Frame\022\013\n\003cmd\030\001 \002(\r\022\014\n\004data\030\002 \002(\014\"9\n"
      "\017RoomFrameNotify\022\r\n\005frame\030\001 \002(\r\022\027\n\004list\030"
      "\002 \003(\0132\t.pb.Frame\"\207\001\n\020RoomLadderNotify\022(\n"
      "\005items\030\001 \003(\0132\031.pb.RoomLadderNotify.Item\032"
      "I\n\004Item\022\n\n\002id\030\001 \002(\r\022\r\n\005score\030\002 \002(\005\022\022\n\nki"
      "ll_times\030\003 \002(\r\022\022\n\ndead_times\030\004 \002(\r\"E\n\021Ro"
      "omPlayerMoveReq\022\027\n\003pos\030\001 \002(\0132\n.pb.Vector"
      "\022\027\n\003dir\030\002 \002(\0132\n.pb.Vector\"E\n\021RoomPlayerD"
      "ragRes\022\027\n\003pos\030\001 \002(\0132\n.pb.Vector\022\027\n\003dir\030\002"
      " \002(\0132\n.pb.Vector\"\026\n\024RoomPlayerDragEndReq"
      "\"\"\n\023RoomPlayerReliveReq\022\013\n\003job\030\001 \002(\r\"=\n\023"
      "RoomPlayerReliveRes\022\013\n\003job\030\001 \002(\r\022\n\n\002hp\030\002"
      " \002(\r\022\r\n\005score\030\003 \002(\r\"E\n\021RoomPlayerStopReq"
      "\022\027\n\003pos\030\001 \002(\0132\n.pb.Vector\022\027\n\003dir\030\002 \002(\0132\n"
      ".pb.Vector\"Q\n\rSpellStartReq\022\016\n\006xml_id\030\001 "
      "\002(\r\022\027\n\003pos\030\002 \002(\0132\n.pb.Vector\022\027\n\003dir\030\003 \002("
      "\0132\n.pb.Vector\"!\n\017SpellLevelUpReq\022\016\n\006xml_"
      "id\030\001 \002(\r\"5\n\017SpellLevelUpRes\022\"\n\005spell\030\001 \002"
      "(\0132\023.pb.RoomPlayerSpell\"\206\001\n\nKillNotify\022\021"
      "\n\tplayer_id\030\001 \002(\r\022\021\n\tkilled_id\030\002 \002(\r\022%\n\004"
      "info\030\003 \003(\0132\027.pb.KillNotify.KillInfo\032+\n\010K"
      "illInfo\022\017\n\007catalog\030\001 \002(\r\022\016\n\006number\030\002 \002(\r"
      "\"\r\n\013RoomPingReq\" \n\013RoomPingRes\022\021\n\tcur_fr"
      "ame\030\001 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ns/room.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ns_2froom_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kXFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:pb.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:pb.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[0].descriptor;
}

const Vector& Vector::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Vector)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Vector)
  // required sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // required sint32 z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Vector)
  // required sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // required sint32 z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Vector)
  return target;
}

size_t Vector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.Vector)
  size_t total_size = 0;

  if (has_x()) {
    // required sint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->x());
  }

  if (has_z()) {
    // required sint32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->z());
  }

  return total_size;
}
size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Vector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sint32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->x());

    // required sint32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// required sint32 x = 1;
bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Vector::x() const {
  // @@protoc_insertion_point(field_get:pb.Vector.x)
  return x_;
}
void Vector::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.Vector.x)
}

// required sint32 z = 2;
bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 Vector::z() const {
  // @@protoc_insertion_point(field_get:pb.Vector.z)
  return z_;
}
void Vector::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.Vector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayer::kIdFieldNumber;
const int RoomPlayer::kNicknameFieldNumber;
const int RoomPlayer::kStateFieldNumber;
const int RoomPlayer::kJobFieldNumber;
const int RoomPlayer::kLevelFieldNumber;
const int RoomPlayer::kPosFieldNumber;
const int RoomPlayer::kDirFieldNumber;
const int RoomPlayer::kScoreFieldNumber;
const int RoomPlayer::kSpellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayer::RoomPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayer)
}
RoomPlayer::RoomPlayer(const RoomPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      spells_(from.spells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_state()) {
    state_ = new ::pb::RoomPlayerState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayer)
}

void RoomPlayer::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&state_) + sizeof(score_));
}

RoomPlayer::~RoomPlayer() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayer)
  SharedDtor();
}

void RoomPlayer::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete state_;
  }
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void RoomPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayer::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[1].descriptor;
}

const RoomPlayer& RoomPlayer::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayer* RoomPlayer::New(::google::protobuf::Arena* arena) const {
  RoomPlayer* n = new RoomPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayer)
  spells_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_state()) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::pb::RoomPlayerState::Clear();
    }
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.RoomPlayer.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.RoomPlayerState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.RoomPlayerSpell spells = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spells()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayer)
  return false;
#undef DO_
}

void RoomPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayer)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomPlayer.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required .pb.RoomPlayerState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->state_, output);
  }

  // required uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required .pb.Vector pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pos_, output);
  }

  // required .pb.Vector dir = 7;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->dir_, output);
  }

  // required uint32 score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // repeated .pb.RoomPlayerSpell spells = 9;
  for (unsigned int i = 0, n = this->spells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->spells(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayer)
}

::google::protobuf::uint8* RoomPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayer)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomPlayer.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required .pb.RoomPlayerState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->state_, false, target);
  }

  // required uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required .pb.Vector pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 7;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->dir_, false, target);
  }

  // required uint32 score = 8;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->score(), target);
  }

  // repeated .pb.RoomPlayerSpell spells = 9;
  for (unsigned int i = 0, n = this->spells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->spells(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayer)
  return target;
}

size_t RoomPlayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayer)
  size_t total_size = 0;

  if (has_nickname()) {
    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_state()) {
    // required .pb.RoomPlayerState state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  if (has_pos()) {
    // required .pb.Vector pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_job()) {
    // required uint32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());
  }

  if (has_level()) {
    // required uint32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  if (has_score()) {
    // required uint32 score = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  return total_size;
}
size_t RoomPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required .pb.RoomPlayerState state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);

    // required .pb.Vector pos = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());

    // required uint32 level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

    // required uint32 score = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .pb.RoomPlayerSpell spells = 9;
  {
    unsigned int count = this->spells_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spells(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayer)
    MergeFrom(*source);
  }
}

void RoomPlayer::MergeFrom(const RoomPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_state()) {
      mutable_state()->::pb::RoomPlayerState::MergeFrom(from.state());
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void RoomPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayer::CopyFrom(const RoomPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->spells())) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void RoomPlayer::Swap(RoomPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayer::InternalSwap(RoomPlayer* other) {
  spells_.UnsafeArenaSwap(&other->spells_);
  nickname_.Swap(&other->nickname_);
  std::swap(state_, other->state_);
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(id_, other->id_);
  std::swap(job_, other->job_);
  std::swap(level_, other->level_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayer::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayer

// required uint32 id = 1;
bool RoomPlayer::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoomPlayer::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RoomPlayer::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoomPlayer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomPlayer::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.id)
  return id_;
}
void RoomPlayer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayer.id)
}

// required string nickname = 2;
bool RoomPlayer::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayer::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayer::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayer::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& RoomPlayer::nickname() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.nickname)
  return nickname_.GetNoArena();
}
void RoomPlayer::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RoomPlayer.nickname)
}
#if LANG_CXX11
void RoomPlayer::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomPlayer.nickname)
}
#endif
void RoomPlayer::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RoomPlayer.nickname)
}
void RoomPlayer::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RoomPlayer.nickname)
}
::std::string* RoomPlayer::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayer.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomPlayer::release_nickname() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayer.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomPlayer::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayer.nickname)
}

// required .pb.RoomPlayerState state = 3;
bool RoomPlayer::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayer::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayer::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayer::clear_state() {
  if (state_ != NULL) state_->::pb::RoomPlayerState::Clear();
  clear_has_state();
}
const ::pb::RoomPlayerState& RoomPlayer::state() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.state)
  return state_ != NULL ? *state_
                         : *::pb::RoomPlayerState::internal_default_instance();
}
::pb::RoomPlayerState* RoomPlayer::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::pb::RoomPlayerState;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayer.state)
  return state_;
}
::pb::RoomPlayerState* RoomPlayer::release_state() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayer.state)
  clear_has_state();
  ::pb::RoomPlayerState* temp = state_;
  state_ = NULL;
  return temp;
}
void RoomPlayer::set_allocated_state(::pb::RoomPlayerState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayer.state)
}

// required uint32 job = 4;
bool RoomPlayer::has_job() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoomPlayer::set_has_job() {
  _has_bits_[0] |= 0x00000020u;
}
void RoomPlayer::clear_has_job() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoomPlayer::clear_job() {
  job_ = 0u;
  clear_has_job();
}
::google::protobuf::uint32 RoomPlayer::job() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.job)
  return job_;
}
void RoomPlayer::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayer.job)
}

// required uint32 level = 5;
bool RoomPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoomPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
void RoomPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoomPlayer::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 RoomPlayer::level() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.level)
  return level_;
}
void RoomPlayer::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayer.level)
}

// required .pb.Vector pos = 6;
bool RoomPlayer::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomPlayer::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomPlayer::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomPlayer::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomPlayer::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayer::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayer.pos)
  return pos_;
}
::pb::Vector* RoomPlayer::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayer.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomPlayer::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayer.pos)
}

// required .pb.Vector dir = 7;
bool RoomPlayer::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomPlayer::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomPlayer::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomPlayer::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& RoomPlayer::dir() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayer::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayer.dir)
  return dir_;
}
::pb::Vector* RoomPlayer::release_dir() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayer.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void RoomPlayer::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayer.dir)
}

// required uint32 score = 8;
bool RoomPlayer::has_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoomPlayer::set_has_score() {
  _has_bits_[0] |= 0x00000080u;
}
void RoomPlayer::clear_has_score() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoomPlayer::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 RoomPlayer::score() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.score)
  return score_;
}
void RoomPlayer::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayer.score)
}

// repeated .pb.RoomPlayerSpell spells = 9;
int RoomPlayer::spells_size() const {
  return spells_.size();
}
void RoomPlayer::clear_spells() {
  spells_.Clear();
}
const ::pb::RoomPlayerSpell& RoomPlayer::spells(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayer.spells)
  return spells_.Get(index);
}
::pb::RoomPlayerSpell* RoomPlayer::mutable_spells(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayer.spells)
  return spells_.Mutable(index);
}
::pb::RoomPlayerSpell* RoomPlayer::add_spells() {
  // @@protoc_insertion_point(field_add:pb.RoomPlayer.spells)
  return spells_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::RoomPlayerSpell >*
RoomPlayer::mutable_spells() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomPlayer.spells)
  return &spells_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::RoomPlayerSpell >&
RoomPlayer::spells() const {
  // @@protoc_insertion_point(field_list:pb.RoomPlayer.spells)
  return spells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerState::kHpFieldNumber;
const int RoomPlayerState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerState::RoomPlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerState)
}
RoomPlayerState::RoomPlayerState(const RoomPlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&hp_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerState)
}

void RoomPlayerState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hp_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&hp_) + sizeof(state_));
}

RoomPlayerState::~RoomPlayerState() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerState)
  SharedDtor();
}

void RoomPlayerState::SharedDtor() {
}

void RoomPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerState::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[2].descriptor;
}

const RoomPlayerState& RoomPlayerState::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerState* RoomPlayerState::New(::google::protobuf::Arena* arena) const {
  RoomPlayerState* n = new RoomPlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerState)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&hp_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&hp_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerState)
  return false;
#undef DO_
}

void RoomPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerState)
  // required uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerState)
}

::google::protobuf::uint8* RoomPlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerState)
  // required uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerState)
  return target;
}

size_t RoomPlayerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerState)
  size_t total_size = 0;

  if (has_hp()) {
    // required uint32 hp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  if (has_state()) {
    // required uint32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  return total_size;
}
size_t RoomPlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 hp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());

    // required uint32 state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerState)
    MergeFrom(*source);
  }
}

void RoomPlayerState::MergeFrom(const RoomPlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void RoomPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerState::CopyFrom(const RoomPlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RoomPlayerState::Swap(RoomPlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerState::InternalSwap(RoomPlayerState* other) {
  std::swap(hp_, other->hp_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerState::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerState

// required uint32 hp = 1;
bool RoomPlayerState::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerState::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerState::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerState::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
::google::protobuf::uint32 RoomPlayerState::hp() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerState.hp)
  return hp_;
}
void RoomPlayerState::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerState.hp)
}

// required uint32 state = 2;
bool RoomPlayerState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerState::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 RoomPlayerState::state() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerState.state)
  return state_;
}
void RoomPlayerState::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerSpell::kXmlIdFieldNumber;
const int RoomPlayerSpell::kLevelFieldNumber;
const int RoomPlayerSpell::kCdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerSpell::RoomPlayerSpell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerSpell)
}
RoomPlayerSpell::RoomPlayerSpell(const RoomPlayerSpell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xml_id_, &from.xml_id_,
    reinterpret_cast<char*>(&cd_) -
    reinterpret_cast<char*>(&xml_id_) + sizeof(cd_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerSpell)
}

void RoomPlayerSpell::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&xml_id_, 0, reinterpret_cast<char*>(&cd_) -
    reinterpret_cast<char*>(&xml_id_) + sizeof(cd_));
}

RoomPlayerSpell::~RoomPlayerSpell() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerSpell)
  SharedDtor();
}

void RoomPlayerSpell::SharedDtor() {
}

void RoomPlayerSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerSpell::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[3].descriptor;
}

const RoomPlayerSpell& RoomPlayerSpell::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerSpell* RoomPlayerSpell::New(::google::protobuf::Arena* arena) const {
  RoomPlayerSpell* n = new RoomPlayerSpell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerSpell::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerSpell)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&xml_id_, 0, reinterpret_cast<char*>(&cd_) -
      reinterpret_cast<char*>(&xml_id_) + sizeof(cd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerSpell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xml_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 cd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerSpell)
  return false;
#undef DO_
}

void RoomPlayerSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerSpell)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xml_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerSpell)
}

::google::protobuf::uint8* RoomPlayerSpell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerSpell)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xml_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerSpell)
  return target;
}

size_t RoomPlayerSpell::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerSpell)
  size_t total_size = 0;

  if (has_xml_id()) {
    // required uint32 xml_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }

  if (has_level()) {
    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  if (has_cd()) {
    // required uint32 cd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cd());
  }

  return total_size;
}
size_t RoomPlayerSpell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerSpell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 xml_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());

    // required uint32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

    // required uint32 cd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerSpell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerSpell)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerSpell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerSpell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerSpell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerSpell)
    MergeFrom(*source);
  }
}

void RoomPlayerSpell::MergeFrom(const RoomPlayerSpell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerSpell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_xml_id()) {
      set_xml_id(from.xml_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
}

void RoomPlayerSpell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerSpell::CopyFrom(const RoomPlayerSpell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerSpell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RoomPlayerSpell::Swap(RoomPlayerSpell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerSpell::InternalSwap(RoomPlayerSpell* other) {
  std::swap(xml_id_, other->xml_id_);
  std::swap(level_, other->level_);
  std::swap(cd_, other->cd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerSpell::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerSpell

// required uint32 xml_id = 1;
bool RoomPlayerSpell::has_xml_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerSpell::set_has_xml_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerSpell::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerSpell::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 RoomPlayerSpell::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerSpell.xml_id)
  return xml_id_;
}
void RoomPlayerSpell::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerSpell.xml_id)
}

// required uint32 level = 2;
bool RoomPlayerSpell::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerSpell::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerSpell::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerSpell::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 RoomPlayerSpell::level() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerSpell.level)
  return level_;
}
void RoomPlayerSpell::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerSpell.level)
}

// required uint32 cd = 3;
bool RoomPlayerSpell::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomPlayerSpell::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomPlayerSpell::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomPlayerSpell::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
::google::protobuf::uint32 RoomPlayerSpell::cd() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerSpell.cd)
  return cd_;
}
void RoomPlayerSpell::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerSpell.cd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomItem::kIdFieldNumber;
const int RoomItem::kXmlIdFieldNumber;
const int RoomItem::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomItem::RoomItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomItem)
}
RoomItem::RoomItem(const RoomItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&xml_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(xml_id_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomItem)
}

void RoomItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&xml_id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(xml_id_));
}

RoomItem::~RoomItem() {
  // @@protoc_insertion_point(destructor:pb.RoomItem)
  SharedDtor();
}

void RoomItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void RoomItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomItem::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[4].descriptor;
}

const RoomItem& RoomItem::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomItem* RoomItem::New(::google::protobuf::Arena* arena) const {
  RoomItem* n = new RoomItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomItem)
  if (has_pos()) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->::pb::Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&xml_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(xml_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 xml_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomItem)
  return false;
#undef DO_
}

void RoomItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 xml_id = 2;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xml_id(), output);
  }

  // required .pb.Vector pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomItem)
}

::google::protobuf::uint8* RoomItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 xml_id = 2;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xml_id(), target);
  }

  // required .pb.Vector pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomItem)
  return target;
}

size_t RoomItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomItem)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_xml_id()) {
    // required uint32 xml_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }

  return total_size;
}
size_t RoomItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 xml_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomItem)
    MergeFrom(*source);
  }
}

void RoomItem::MergeFrom(const RoomItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_xml_id()) {
      set_xml_id(from.xml_id());
    }
  }
}

void RoomItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomItem::CopyFrom(const RoomItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void RoomItem::Swap(RoomItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomItem::InternalSwap(RoomItem* other) {
  std::swap(pos_, other->pos_);
  std::swap(id_, other->id_);
  std::swap(xml_id_, other->xml_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomItem::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomItem

// required uint32 id = 1;
bool RoomItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomItem::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomItem.id)
  return id_;
}
void RoomItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomItem.id)
}

// required uint32 xml_id = 2;
bool RoomItem::has_xml_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomItem::set_has_xml_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomItem::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomItem::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 RoomItem::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.RoomItem.xml_id)
  return xml_id_;
}
void RoomItem::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomItem.xml_id)
}

// required .pb.Vector pos = 3;
bool RoomItem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomItem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomItem::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomItem::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomItem.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomItem::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomItem.pos)
  return pos_;
}
::pb::Vector* RoomItem::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomItem.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomItem::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomItem.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomBuff::kIdFieldNumber;
const int RoomBuff::kXmlIdFieldNumber;
const int RoomBuff::kPlayerIdFieldNumber;
const int RoomBuff::kPosFieldNumber;
const int RoomBuff::kDirFieldNumber;
const int RoomBuff::kRemainTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomBuff::RoomBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomBuff)
}
RoomBuff::RoomBuff(const RoomBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  ::memcpy(&xml_id_, &from.xml_id_,
    reinterpret_cast<char*>(&remain_time_) -
    reinterpret_cast<char*>(&xml_id_) + sizeof(remain_time_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomBuff)
}

void RoomBuff::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, reinterpret_cast<char*>(&remain_time_) -
    reinterpret_cast<char*>(&pos_) + sizeof(remain_time_));
}

RoomBuff::~RoomBuff() {
  // @@protoc_insertion_point(destructor:pb.RoomBuff)
  SharedDtor();
}

void RoomBuff::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void RoomBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBuff::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[5].descriptor;
}

const RoomBuff& RoomBuff::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomBuff* RoomBuff::New(::google::protobuf::Arena* arena) const {
  RoomBuff* n = new RoomBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomBuff)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&xml_id_, 0, reinterpret_cast<char*>(&remain_time_) -
      reinterpret_cast<char*>(&xml_id_) + sizeof(remain_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.RoomBuff.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 xml_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.Vector pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pb.Vector dir = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 remain_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_remain_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomBuff)
  return false;
#undef DO_
}

void RoomBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomBuff)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomBuff.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint32 xml_id = 2;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xml_id(), output);
  }

  // optional uint32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // optional .pb.Vector pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_, output);
  }

  // optional .pb.Vector dir = 5;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dir_, output);
  }

  // required uint32 remain_time = 6;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remain_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomBuff)
}

::google::protobuf::uint8* RoomBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomBuff)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomBuff.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint32 xml_id = 2;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xml_id(), target);
  }

  // optional uint32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }

  // optional .pb.Vector pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pos_, false, target);
  }

  // optional .pb.Vector dir = 5;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dir_, false, target);
  }

  // required uint32 remain_time = 6;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remain_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomBuff)
  return target;
}

size_t RoomBuff::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomBuff)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_xml_id()) {
    // required uint32 xml_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }

  if (has_remain_time()) {
    // required uint32 remain_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_time());
  }

  return total_size;
}
size_t RoomBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000029) ^ 0x00000029) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required uint32 xml_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());

    // required uint32 remain_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .pb.Vector pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .pb.Vector dir = 5;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dir_);
    }

  }
  // optional uint32 player_id = 3;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomBuff)
    MergeFrom(*source);
  }
}

void RoomBuff::MergeFrom(const RoomBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
    if (from.has_xml_id()) {
      set_xml_id(from.xml_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
}

void RoomBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBuff::CopyFrom(const RoomBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000029) != 0x00000029) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void RoomBuff::Swap(RoomBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomBuff::InternalSwap(RoomBuff* other) {
  id_.Swap(&other->id_);
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(xml_id_, other->xml_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(remain_time_, other->remain_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomBuff::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomBuff

// required string id = 1;
bool RoomBuff::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomBuff::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomBuff::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomBuff::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& RoomBuff::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.id)
  return id_.GetNoArena();
}
void RoomBuff::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RoomBuff.id)
}
#if LANG_CXX11
void RoomBuff::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomBuff.id)
}
#endif
void RoomBuff::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RoomBuff.id)
}
void RoomBuff::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RoomBuff.id)
}
::std::string* RoomBuff::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pb.RoomBuff.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomBuff::release_id() {
  // @@protoc_insertion_point(field_release:pb.RoomBuff.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomBuff::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.RoomBuff.id)
}

// required uint32 xml_id = 2;
bool RoomBuff::has_xml_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomBuff::set_has_xml_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomBuff::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomBuff::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 RoomBuff::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.xml_id)
  return xml_id_;
}
void RoomBuff::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomBuff.xml_id)
}

// optional uint32 player_id = 3;
bool RoomBuff::has_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoomBuff::set_has_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RoomBuff::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoomBuff::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 RoomBuff::player_id() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.player_id)
  return player_id_;
}
void RoomBuff::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomBuff.player_id)
}

// optional .pb.Vector pos = 4;
bool RoomBuff::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomBuff::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomBuff::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomBuff::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomBuff::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomBuff::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomBuff.pos)
  return pos_;
}
::pb::Vector* RoomBuff::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomBuff.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomBuff::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomBuff.pos)
}

// optional .pb.Vector dir = 5;
bool RoomBuff::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomBuff::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomBuff::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomBuff::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& RoomBuff::dir() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomBuff::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomBuff.dir)
  return dir_;
}
::pb::Vector* RoomBuff::release_dir() {
  // @@protoc_insertion_point(field_release:pb.RoomBuff.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void RoomBuff::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomBuff.dir)
}

// required uint32 remain_time = 6;
bool RoomBuff::has_remain_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoomBuff::set_has_remain_time() {
  _has_bits_[0] |= 0x00000020u;
}
void RoomBuff::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoomBuff::clear_remain_time() {
  remain_time_ = 0u;
  clear_has_remain_time();
}
::google::protobuf::uint32 RoomBuff::remain_time() const {
  // @@protoc_insertion_point(field_get:pb.RoomBuff.remain_time)
  return remain_time_;
}
void RoomBuff::set_remain_time(::google::protobuf::uint32 value) {
  set_has_remain_time();
  remain_time_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomBuff.remain_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomSnapShot::kPlayersFieldNumber;
const int RoomSnapShot::kItemsFieldNumber;
const int RoomSnapShot::kBuffsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomSnapShot::RoomSnapShot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomSnapShot)
}
RoomSnapShot::RoomSnapShot(const RoomSnapShot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      items_(from.items_),
      buffs_(from.buffs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RoomSnapShot)
}

void RoomSnapShot::SharedCtor() {
  _cached_size_ = 0;
}

RoomSnapShot::~RoomSnapShot() {
  // @@protoc_insertion_point(destructor:pb.RoomSnapShot)
  SharedDtor();
}

void RoomSnapShot::SharedDtor() {
}

void RoomSnapShot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomSnapShot::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[6].descriptor;
}

const RoomSnapShot& RoomSnapShot::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomSnapShot* RoomSnapShot::New(::google::protobuf::Arena* arena) const {
  RoomSnapShot* n = new RoomSnapShot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomSnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomSnapShot)
  players_.Clear();
  items_.Clear();
  buffs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomSnapShot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomSnapShot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.RoomPlayer players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb.RoomItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb.RoomBuff buffs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomSnapShot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomSnapShot)
  return false;
#undef DO_
}

void RoomSnapShot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomSnapShot)
  // repeated .pb.RoomPlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // repeated .pb.RoomItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // repeated .pb.RoomBuff buffs = 3;
  for (unsigned int i = 0, n = this->buffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buffs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomSnapShot)
}

::google::protobuf::uint8* RoomSnapShot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomSnapShot)
  // repeated .pb.RoomPlayer players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), false, target);
  }

  // repeated .pb.RoomItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // repeated .pb.RoomBuff buffs = 3;
  for (unsigned int i = 0, n = this->buffs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buffs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomSnapShot)
  return target;
}

size_t RoomSnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomSnapShot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .pb.RoomPlayer players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .pb.RoomItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .pb.RoomBuff buffs = 3;
  {
    unsigned int count = this->buffs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomSnapShot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomSnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomSnapShot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomSnapShot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomSnapShot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomSnapShot)
    MergeFrom(*source);
  }
}

void RoomSnapShot::MergeFrom(const RoomSnapShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomSnapShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  players_.MergeFrom(from.players_);
  items_.MergeFrom(from.items_);
  buffs_.MergeFrom(from.buffs_);
}

void RoomSnapShot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomSnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomSnapShot::CopyFrom(const RoomSnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomSnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSnapShot::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buffs())) return false;
  return true;
}

void RoomSnapShot::Swap(RoomSnapShot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomSnapShot::InternalSwap(RoomSnapShot* other) {
  players_.UnsafeArenaSwap(&other->players_);
  items_.UnsafeArenaSwap(&other->items_);
  buffs_.UnsafeArenaSwap(&other->buffs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomSnapShot::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomSnapShot

// repeated .pb.RoomPlayer players = 1;
int RoomSnapShot::players_size() const {
  return players_.size();
}
void RoomSnapShot::clear_players() {
  players_.Clear();
}
const ::pb::RoomPlayer& RoomSnapShot::players(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomSnapShot.players)
  return players_.Get(index);
}
::pb::RoomPlayer* RoomSnapShot::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomSnapShot.players)
  return players_.Mutable(index);
}
::pb::RoomPlayer* RoomSnapShot::add_players() {
  // @@protoc_insertion_point(field_add:pb.RoomSnapShot.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::RoomPlayer >*
RoomSnapShot::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomSnapShot.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::RoomPlayer >&
RoomSnapShot::players() const {
  // @@protoc_insertion_point(field_list:pb.RoomSnapShot.players)
  return players_;
}

// repeated .pb.RoomItem items = 2;
int RoomSnapShot::items_size() const {
  return items_.size();
}
void RoomSnapShot::clear_items() {
  items_.Clear();
}
const ::pb::RoomItem& RoomSnapShot::items(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomSnapShot.items)
  return items_.Get(index);
}
::pb::RoomItem* RoomSnapShot::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomSnapShot.items)
  return items_.Mutable(index);
}
::pb::RoomItem* RoomSnapShot::add_items() {
  // @@protoc_insertion_point(field_add:pb.RoomSnapShot.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::RoomItem >*
RoomSnapShot::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomSnapShot.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::RoomItem >&
RoomSnapShot::items() const {
  // @@protoc_insertion_point(field_list:pb.RoomSnapShot.items)
  return items_;
}

// repeated .pb.RoomBuff buffs = 3;
int RoomSnapShot::buffs_size() const {
  return buffs_.size();
}
void RoomSnapShot::clear_buffs() {
  buffs_.Clear();
}
const ::pb::RoomBuff& RoomSnapShot::buffs(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomSnapShot.buffs)
  return buffs_.Get(index);
}
::pb::RoomBuff* RoomSnapShot::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomSnapShot.buffs)
  return buffs_.Mutable(index);
}
::pb::RoomBuff* RoomSnapShot::add_buffs() {
  // @@protoc_insertion_point(field_add:pb.RoomSnapShot.buffs)
  return buffs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::RoomBuff >*
RoomSnapShot::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomSnapShot.buffs)
  return &buffs_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::RoomBuff >&
RoomSnapShot::buffs() const {
  // @@protoc_insertion_point(field_list:pb.RoomSnapShot.buffs)
  return buffs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomLoginReq::kNicknameFieldNumber;
const int RoomLoginReq::kRoomIdFieldNumber;
const int RoomLoginReq::kRoomKeyFieldNumber;
const int RoomLoginReq::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomLoginReq::RoomLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomLoginReq)
}
RoomLoginReq::RoomLoginReq(const RoomLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  room_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room_key()) {
    room_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_key_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomLoginReq)
}

void RoomLoginReq::SharedCtor() {
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(job_));
}

RoomLoginReq::~RoomLoginReq() {
  // @@protoc_insertion_point(destructor:pb.RoomLoginReq)
  SharedDtor();
}

void RoomLoginReq::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoomLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLoginReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[7].descriptor;
}

const RoomLoginReq& RoomLoginReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomLoginReq* RoomLoginReq::New(::google::protobuf::Arena* arena) const {
  RoomLoginReq* n = new RoomLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomLoginReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_room_key()) {
      GOOGLE_DCHECK(!room_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_key_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&room_id_, 0, reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&room_id_) + sizeof(job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.RoomLoginReq.nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_room_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string room_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_key().data(), this->room_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.RoomLoginReq.room_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomLoginReq)
  return false;
#undef DO_
}

void RoomLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomLoginReq)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginReq.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // required string room_key = 3;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginReq.room_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_key(), output);
  }

  // required uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomLoginReq)
}

::google::protobuf::uint8* RoomLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomLoginReq)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginReq.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // required string room_key = 3;
  if (has_room_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_key().data(), this->room_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginReq.room_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_key(), target);
  }

  // required uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomLoginReq)
  return target;
}

size_t RoomLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomLoginReq)
  size_t total_size = 0;

  if (has_nickname()) {
    // required string nickname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_room_key()) {
    // required string room_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());
  }

  if (has_room_id()) {
    // required uint32 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  if (has_job()) {
    // required uint32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());
  }

  return total_size;
}
size_t RoomLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomLoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string nickname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required string room_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_key());

    // required uint32 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());

    // required uint32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomLoginReq)
    MergeFrom(*source);
  }
}

void RoomLoginReq::MergeFrom(const RoomLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_room_key()) {
      set_has_room_key();
      room_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_key_);
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
}

void RoomLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLoginReq::CopyFrom(const RoomLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RoomLoginReq::Swap(RoomLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomLoginReq::InternalSwap(RoomLoginReq* other) {
  nickname_.Swap(&other->nickname_);
  room_key_.Swap(&other->room_key_);
  std::swap(room_id_, other->room_id_);
  std::swap(job_, other->job_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomLoginReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomLoginReq

// required string nickname = 1;
bool RoomLoginReq::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomLoginReq::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomLoginReq::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomLoginReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& RoomLoginReq::nickname() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginReq.nickname)
  return nickname_.GetNoArena();
}
void RoomLoginReq::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RoomLoginReq.nickname)
}
#if LANG_CXX11
void RoomLoginReq::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomLoginReq.nickname)
}
#endif
void RoomLoginReq::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RoomLoginReq.nickname)
}
void RoomLoginReq::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RoomLoginReq.nickname)
}
::std::string* RoomLoginReq::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:pb.RoomLoginReq.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomLoginReq::release_nickname() {
  // @@protoc_insertion_point(field_release:pb.RoomLoginReq.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomLoginReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:pb.RoomLoginReq.nickname)
}

// required uint32 room_id = 2;
bool RoomLoginReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomLoginReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomLoginReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomLoginReq::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
::google::protobuf::uint32 RoomLoginReq::room_id() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginReq.room_id)
  return room_id_;
}
void RoomLoginReq::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLoginReq.room_id)
}

// required string room_key = 3;
bool RoomLoginReq::has_room_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomLoginReq::set_has_room_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomLoginReq::clear_has_room_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomLoginReq::clear_room_key() {
  room_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_key();
}
const ::std::string& RoomLoginReq::room_key() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginReq.room_key)
  return room_key_.GetNoArena();
}
void RoomLoginReq::set_room_key(const ::std::string& value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RoomLoginReq.room_key)
}
#if LANG_CXX11
void RoomLoginReq::set_room_key(::std::string&& value) {
  set_has_room_key();
  room_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomLoginReq.room_key)
}
#endif
void RoomLoginReq::set_room_key(const char* value) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RoomLoginReq.room_key)
}
void RoomLoginReq::set_room_key(const char* value, size_t size) {
  set_has_room_key();
  room_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RoomLoginReq.room_key)
}
::std::string* RoomLoginReq::mutable_room_key() {
  set_has_room_key();
  // @@protoc_insertion_point(field_mutable:pb.RoomLoginReq.room_key)
  return room_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomLoginReq::release_room_key() {
  // @@protoc_insertion_point(field_release:pb.RoomLoginReq.room_key)
  clear_has_room_key();
  return room_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomLoginReq::set_allocated_room_key(::std::string* room_key) {
  if (room_key != NULL) {
    set_has_room_key();
  } else {
    clear_has_room_key();
  }
  room_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_key);
  // @@protoc_insertion_point(field_set_allocated:pb.RoomLoginReq.room_key)
}

// required uint32 job = 4;
bool RoomLoginReq::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomLoginReq::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomLoginReq::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomLoginReq::clear_job() {
  job_ = 0u;
  clear_has_job();
}
::google::protobuf::uint32 RoomLoginReq::job() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginReq.job)
  return job_;
}
void RoomLoginReq::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLoginReq.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomLoginRes::kIdFieldNumber;
const int RoomLoginRes::kGameIssueFieldNumber;
const int RoomLoginRes::kSnapShotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomLoginRes::RoomLoginRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomLoginRes)
}
RoomLoginRes::RoomLoginRes(const RoomLoginRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_issue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_issue()) {
    game_issue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_issue_);
  }
  if (from.has_snap_shot()) {
    snap_shot_ = new ::pb::RoomSnapShot(*from.snap_shot_);
  } else {
    snap_shot_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.RoomLoginRes)
}

void RoomLoginRes::SharedCtor() {
  _cached_size_ = 0;
  game_issue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snap_shot_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&snap_shot_) + sizeof(id_));
}

RoomLoginRes::~RoomLoginRes() {
  // @@protoc_insertion_point(destructor:pb.RoomLoginRes)
  SharedDtor();
}

void RoomLoginRes::SharedDtor() {
  game_issue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete snap_shot_;
  }
}

void RoomLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLoginRes::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[8].descriptor;
}

const RoomLoginRes& RoomLoginRes::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomLoginRes* RoomLoginRes::New(::google::protobuf::Arena* arena) const {
  RoomLoginRes* n = new RoomLoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomLoginRes)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_game_issue()) {
      GOOGLE_DCHECK(!game_issue_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_issue_.UnsafeRawStringPointer())->clear();
    }
    if (has_snap_shot()) {
      GOOGLE_DCHECK(snap_shot_ != NULL);
      snap_shot_->::pb::RoomSnapShot::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string game_issue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_issue().data(), this->game_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.RoomLoginRes.game_issue");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.RoomSnapShot snap_shot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap_shot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomLoginRes)
  return false;
#undef DO_
}

void RoomLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomLoginRes)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string game_issue = 2;
  if (has_game_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_issue().data(), this->game_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginRes.game_issue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_issue(), output);
  }

  // required .pb.RoomSnapShot snap_shot = 3;
  if (has_snap_shot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->snap_shot_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomLoginRes)
}

::google::protobuf::uint8* RoomLoginRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomLoginRes)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string game_issue = 2;
  if (has_game_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_issue().data(), this->game_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.RoomLoginRes.game_issue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_issue(), target);
  }

  // required .pb.RoomSnapShot snap_shot = 3;
  if (has_snap_shot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->snap_shot_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomLoginRes)
  return target;
}

size_t RoomLoginRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomLoginRes)
  size_t total_size = 0;

  if (has_game_issue()) {
    // required string game_issue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_issue());
  }

  if (has_snap_shot()) {
    // required .pb.RoomSnapShot snap_shot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_shot_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t RoomLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomLoginRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string game_issue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_issue());

    // required .pb.RoomSnapShot snap_shot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_shot_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLoginRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomLoginRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomLoginRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomLoginRes)
    MergeFrom(*source);
  }
}

void RoomLoginRes::MergeFrom(const RoomLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_game_issue()) {
      set_has_game_issue();
      game_issue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_issue_);
    }
    if (from.has_snap_shot()) {
      mutable_snap_shot()->::pb::RoomSnapShot::MergeFrom(from.snap_shot());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void RoomLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLoginRes::CopyFrom(const RoomLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_snap_shot()) {
    if (!this->snap_shot_->IsInitialized()) return false;
  }
  return true;
}

void RoomLoginRes::Swap(RoomLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomLoginRes::InternalSwap(RoomLoginRes* other) {
  game_issue_.Swap(&other->game_issue_);
  std::swap(snap_shot_, other->snap_shot_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomLoginRes::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomLoginRes

// required uint32 id = 1;
bool RoomLoginRes::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomLoginRes::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomLoginRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomLoginRes::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomLoginRes::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginRes.id)
  return id_;
}
void RoomLoginRes::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLoginRes.id)
}

// required string game_issue = 2;
bool RoomLoginRes::has_game_issue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomLoginRes::set_has_game_issue() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomLoginRes::clear_has_game_issue() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomLoginRes::clear_game_issue() {
  game_issue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_issue();
}
const ::std::string& RoomLoginRes::game_issue() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginRes.game_issue)
  return game_issue_.GetNoArena();
}
void RoomLoginRes::set_game_issue(const ::std::string& value) {
  set_has_game_issue();
  game_issue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RoomLoginRes.game_issue)
}
#if LANG_CXX11
void RoomLoginRes::set_game_issue(::std::string&& value) {
  set_has_game_issue();
  game_issue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RoomLoginRes.game_issue)
}
#endif
void RoomLoginRes::set_game_issue(const char* value) {
  set_has_game_issue();
  game_issue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RoomLoginRes.game_issue)
}
void RoomLoginRes::set_game_issue(const char* value, size_t size) {
  set_has_game_issue();
  game_issue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RoomLoginRes.game_issue)
}
::std::string* RoomLoginRes::mutable_game_issue() {
  set_has_game_issue();
  // @@protoc_insertion_point(field_mutable:pb.RoomLoginRes.game_issue)
  return game_issue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoomLoginRes::release_game_issue() {
  // @@protoc_insertion_point(field_release:pb.RoomLoginRes.game_issue)
  clear_has_game_issue();
  return game_issue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoomLoginRes::set_allocated_game_issue(::std::string* game_issue) {
  if (game_issue != NULL) {
    set_has_game_issue();
  } else {
    clear_has_game_issue();
  }
  game_issue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_issue);
  // @@protoc_insertion_point(field_set_allocated:pb.RoomLoginRes.game_issue)
}

// required .pb.RoomSnapShot snap_shot = 3;
bool RoomLoginRes::has_snap_shot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomLoginRes::set_has_snap_shot() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomLoginRes::clear_has_snap_shot() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomLoginRes::clear_snap_shot() {
  if (snap_shot_ != NULL) snap_shot_->::pb::RoomSnapShot::Clear();
  clear_has_snap_shot();
}
const ::pb::RoomSnapShot& RoomLoginRes::snap_shot() const {
  // @@protoc_insertion_point(field_get:pb.RoomLoginRes.snap_shot)
  return snap_shot_ != NULL ? *snap_shot_
                         : *::pb::RoomSnapShot::internal_default_instance();
}
::pb::RoomSnapShot* RoomLoginRes::mutable_snap_shot() {
  set_has_snap_shot();
  if (snap_shot_ == NULL) {
    snap_shot_ = new ::pb::RoomSnapShot;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomLoginRes.snap_shot)
  return snap_shot_;
}
::pb::RoomSnapShot* RoomLoginRes::release_snap_shot() {
  // @@protoc_insertion_point(field_release:pb.RoomLoginRes.snap_shot)
  clear_has_snap_shot();
  ::pb::RoomSnapShot* temp = snap_shot_;
  snap_shot_ = NULL;
  return temp;
}
void RoomLoginRes::set_allocated_snap_shot(::pb::RoomSnapShot* snap_shot) {
  delete snap_shot_;
  snap_shot_ = snap_shot;
  if (snap_shot) {
    set_has_snap_shot();
  } else {
    clear_has_snap_shot();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomLoginRes.snap_shot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerAdd::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerAdd::RoomPlayerAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerAdd)
}
RoomPlayerAdd::RoomPlayerAdd(const RoomPlayerAdd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::pb::RoomPlayer(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerAdd)
}

void RoomPlayerAdd::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
}

RoomPlayerAdd::~RoomPlayerAdd() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerAdd)
  SharedDtor();
}

void RoomPlayerAdd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete player_;
  }
}

void RoomPlayerAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerAdd::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[9].descriptor;
}

const RoomPlayerAdd& RoomPlayerAdd::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerAdd* RoomPlayerAdd::New(::google::protobuf::Arena* arena) const {
  RoomPlayerAdd* n = new RoomPlayerAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerAdd)
  if (has_player()) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->::pb::RoomPlayer::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RoomPlayer player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerAdd)
  return false;
#undef DO_
}

void RoomPlayerAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerAdd)
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerAdd)
}

::google::protobuf::uint8* RoomPlayerAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerAdd)
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerAdd)
  return target;
}

size_t RoomPlayerAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerAdd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerAdd)
    MergeFrom(*source);
  }
}

void RoomPlayerAdd::MergeFrom(const RoomPlayerAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    mutable_player()->::pb::RoomPlayer::MergeFrom(from.player());
  }
}

void RoomPlayerAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerAdd::CopyFrom(const RoomPlayerAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void RoomPlayerAdd::Swap(RoomPlayerAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerAdd::InternalSwap(RoomPlayerAdd* other) {
  std::swap(player_, other->player_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerAdd::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerAdd

// required .pb.RoomPlayer player = 1;
bool RoomPlayerAdd::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerAdd::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerAdd::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerAdd::clear_player() {
  if (player_ != NULL) player_->::pb::RoomPlayer::Clear();
  clear_has_player();
}
const ::pb::RoomPlayer& RoomPlayerAdd::player() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerAdd.player)
  return player_ != NULL ? *player_
                         : *::pb::RoomPlayer::internal_default_instance();
}
::pb::RoomPlayer* RoomPlayerAdd::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::pb::RoomPlayer;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerAdd.player)
  return player_;
}
::pb::RoomPlayer* RoomPlayerAdd::release_player() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerAdd.player)
  clear_has_player();
  ::pb::RoomPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
void RoomPlayerAdd::set_allocated_player(::pb::RoomPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerAdd.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerRemove::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerRemove::RoomPlayerRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerRemove)
}
RoomPlayerRemove::RoomPlayerRemove(const RoomPlayerRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerRemove)
}

void RoomPlayerRemove::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

RoomPlayerRemove::~RoomPlayerRemove() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerRemove)
  SharedDtor();
}

void RoomPlayerRemove::SharedDtor() {
}

void RoomPlayerRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerRemove::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[10].descriptor;
}

const RoomPlayerRemove& RoomPlayerRemove::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerRemove* RoomPlayerRemove::New(::google::protobuf::Arena* arena) const {
  RoomPlayerRemove* n = new RoomPlayerRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerRemove)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerRemove)
  return false;
#undef DO_
}

void RoomPlayerRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerRemove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerRemove)
}

::google::protobuf::uint8* RoomPlayerRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerRemove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerRemove)
  return target;
}

size_t RoomPlayerRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerRemove)
    MergeFrom(*source);
  }
}

void RoomPlayerRemove::MergeFrom(const RoomPlayerRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void RoomPlayerRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerRemove::CopyFrom(const RoomPlayerRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RoomPlayerRemove::Swap(RoomPlayerRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerRemove::InternalSwap(RoomPlayerRemove* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerRemove::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerRemove

// required uint32 id = 1;
bool RoomPlayerRemove::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerRemove::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerRemove::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerRemove::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomPlayerRemove::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerRemove.id)
  return id_;
}
void RoomPlayerRemove::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerRemove.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kCmdFieldNumber;
const int Frame::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:pb.Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0u;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:pb.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[11].descriptor;
}

const Frame& Frame::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Frame)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cmd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Frame)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.Frame)
  // required uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Frame)
  return target;
}

size_t Frame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.Frame)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_cmd()) {
    // required uint32 cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());
  }

  return total_size;
}
size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required uint32 cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  data_.Swap(&other->data_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// required uint32 cmd = 1;
bool Frame::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Frame::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void Frame::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Frame::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
::google::protobuf::uint32 Frame::cmd() const {
  // @@protoc_insertion_point(field_get:pb.Frame.cmd)
  return cmd_;
}
void Frame::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:pb.Frame.cmd)
}

// required bytes data = 2;
bool Frame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Frame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Frame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Frame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Frame::data() const {
  // @@protoc_insertion_point(field_get:pb.Frame.data)
  return data_.GetNoArena();
}
void Frame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Frame.data)
}
#if LANG_CXX11
void Frame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Frame.data)
}
#endif
void Frame::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Frame.data)
}
void Frame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Frame.data)
}
::std::string* Frame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:pb.Frame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Frame::release_data() {
  // @@protoc_insertion_point(field_release:pb.Frame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Frame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.Frame.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomFrameNotify::kFrameFieldNumber;
const int RoomFrameNotify::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomFrameNotify::RoomFrameNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomFrameNotify)
}
RoomFrameNotify::RoomFrameNotify(const RoomFrameNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:pb.RoomFrameNotify)
}

void RoomFrameNotify::SharedCtor() {
  _cached_size_ = 0;
  frame_ = 0u;
}

RoomFrameNotify::~RoomFrameNotify() {
  // @@protoc_insertion_point(destructor:pb.RoomFrameNotify)
  SharedDtor();
}

void RoomFrameNotify::SharedDtor() {
}

void RoomFrameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomFrameNotify::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[12].descriptor;
}

const RoomFrameNotify& RoomFrameNotify::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomFrameNotify* RoomFrameNotify::New(::google::protobuf::Arena* arena) const {
  RoomFrameNotify* n = new RoomFrameNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomFrameNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomFrameNotify)
  list_.Clear();
  frame_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomFrameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomFrameNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Frame list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomFrameNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomFrameNotify)
  return false;
#undef DO_
}

void RoomFrameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomFrameNotify)
  // required uint32 frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame(), output);
  }

  // repeated .pb.Frame list = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomFrameNotify)
}

::google::protobuf::uint8* RoomFrameNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomFrameNotify)
  // required uint32 frame = 1;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame(), target);
  }

  // repeated .pb.Frame list = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomFrameNotify)
  return target;
}

size_t RoomFrameNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomFrameNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 frame = 1;
  if (has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame());
  }
  // repeated .pb.Frame list = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomFrameNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomFrameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomFrameNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomFrameNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomFrameNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomFrameNotify)
    MergeFrom(*source);
  }
}

void RoomFrameNotify::MergeFrom(const RoomFrameNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomFrameNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_.MergeFrom(from.list_);
  if (from.has_frame()) {
    set_frame(from.frame());
  }
}

void RoomFrameNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomFrameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomFrameNotify::CopyFrom(const RoomFrameNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomFrameNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomFrameNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void RoomFrameNotify::Swap(RoomFrameNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomFrameNotify::InternalSwap(RoomFrameNotify* other) {
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(frame_, other->frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomFrameNotify::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomFrameNotify

// required uint32 frame = 1;
bool RoomFrameNotify::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomFrameNotify::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomFrameNotify::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomFrameNotify::clear_frame() {
  frame_ = 0u;
  clear_has_frame();
}
::google::protobuf::uint32 RoomFrameNotify::frame() const {
  // @@protoc_insertion_point(field_get:pb.RoomFrameNotify.frame)
  return frame_;
}
void RoomFrameNotify::set_frame(::google::protobuf::uint32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomFrameNotify.frame)
}

// repeated .pb.Frame list = 2;
int RoomFrameNotify::list_size() const {
  return list_.size();
}
void RoomFrameNotify::clear_list() {
  list_.Clear();
}
const ::pb::Frame& RoomFrameNotify::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomFrameNotify.list)
  return list_.Get(index);
}
::pb::Frame* RoomFrameNotify::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomFrameNotify.list)
  return list_.Mutable(index);
}
::pb::Frame* RoomFrameNotify::add_list() {
  // @@protoc_insertion_point(field_add:pb.RoomFrameNotify.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::Frame >*
RoomFrameNotify::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomFrameNotify.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::Frame >&
RoomFrameNotify::list() const {
  // @@protoc_insertion_point(field_list:pb.RoomFrameNotify.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomLadderNotify_Item::kIdFieldNumber;
const int RoomLadderNotify_Item::kScoreFieldNumber;
const int RoomLadderNotify_Item::kKillTimesFieldNumber;
const int RoomLadderNotify_Item::kDeadTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomLadderNotify_Item::RoomLadderNotify_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomLadderNotify.Item)
}
RoomLadderNotify_Item::RoomLadderNotify_Item(const RoomLadderNotify_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&dead_times_) -
    reinterpret_cast<char*>(&id_) + sizeof(dead_times_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomLadderNotify.Item)
}

void RoomLadderNotify_Item::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&dead_times_) -
    reinterpret_cast<char*>(&id_) + sizeof(dead_times_));
}

RoomLadderNotify_Item::~RoomLadderNotify_Item() {
  // @@protoc_insertion_point(destructor:pb.RoomLadderNotify.Item)
  SharedDtor();
}

void RoomLadderNotify_Item::SharedDtor() {
}

void RoomLadderNotify_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLadderNotify_Item::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[13].descriptor;
}

const RoomLadderNotify_Item& RoomLadderNotify_Item::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomLadderNotify_Item* RoomLadderNotify_Item::New(::google::protobuf::Arena* arena) const {
  RoomLadderNotify_Item* n = new RoomLadderNotify_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomLadderNotify_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomLadderNotify.Item)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&dead_times_) -
      reinterpret_cast<char*>(&id_) + sizeof(dead_times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomLadderNotify_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomLadderNotify.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 kill_times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_kill_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 dead_times = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dead_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomLadderNotify.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomLadderNotify.Item)
  return false;
#undef DO_
}

void RoomLadderNotify_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomLadderNotify.Item)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required uint32 kill_times = 3;
  if (has_kill_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_times(), output);
  }

  // required uint32 dead_times = 4;
  if (has_dead_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomLadderNotify.Item)
}

::google::protobuf::uint8* RoomLadderNotify_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomLadderNotify.Item)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // required uint32 kill_times = 3;
  if (has_kill_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_times(), target);
  }

  // required uint32 dead_times = 4;
  if (has_dead_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomLadderNotify.Item)
  return target;
}

size_t RoomLadderNotify_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomLadderNotify.Item)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_score()) {
    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  if (has_kill_times()) {
    // required uint32 kill_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_times());
  }

  if (has_dead_times()) {
    // required uint32 dead_times = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dead_times());
  }

  return total_size;
}
size_t RoomLadderNotify_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomLadderNotify.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());

    // required uint32 kill_times = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_times());

    // required uint32 dead_times = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dead_times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLadderNotify_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomLadderNotify.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLadderNotify_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomLadderNotify_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomLadderNotify.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomLadderNotify.Item)
    MergeFrom(*source);
  }
}

void RoomLadderNotify_Item::MergeFrom(const RoomLadderNotify_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomLadderNotify.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_kill_times()) {
      set_kill_times(from.kill_times());
    }
    if (from.has_dead_times()) {
      set_dead_times(from.dead_times());
    }
  }
}

void RoomLadderNotify_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomLadderNotify.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLadderNotify_Item::CopyFrom(const RoomLadderNotify_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomLadderNotify.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLadderNotify_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RoomLadderNotify_Item::Swap(RoomLadderNotify_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomLadderNotify_Item::InternalSwap(RoomLadderNotify_Item* other) {
  std::swap(id_, other->id_);
  std::swap(score_, other->score_);
  std::swap(kill_times_, other->kill_times_);
  std::swap(dead_times_, other->dead_times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomLadderNotify_Item::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomLadderNotify_Item

// required uint32 id = 1;
bool RoomLadderNotify_Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomLadderNotify_Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomLadderNotify_Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomLadderNotify_Item::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RoomLadderNotify_Item::id() const {
  // @@protoc_insertion_point(field_get:pb.RoomLadderNotify.Item.id)
  return id_;
}
void RoomLadderNotify_Item::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLadderNotify.Item.id)
}

// required int32 score = 2;
bool RoomLadderNotify_Item::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomLadderNotify_Item::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomLadderNotify_Item::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomLadderNotify_Item::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 RoomLadderNotify_Item::score() const {
  // @@protoc_insertion_point(field_get:pb.RoomLadderNotify.Item.score)
  return score_;
}
void RoomLadderNotify_Item::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLadderNotify.Item.score)
}

// required uint32 kill_times = 3;
bool RoomLadderNotify_Item::has_kill_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomLadderNotify_Item::set_has_kill_times() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomLadderNotify_Item::clear_has_kill_times() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomLadderNotify_Item::clear_kill_times() {
  kill_times_ = 0u;
  clear_has_kill_times();
}
::google::protobuf::uint32 RoomLadderNotify_Item::kill_times() const {
  // @@protoc_insertion_point(field_get:pb.RoomLadderNotify.Item.kill_times)
  return kill_times_;
}
void RoomLadderNotify_Item::set_kill_times(::google::protobuf::uint32 value) {
  set_has_kill_times();
  kill_times_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLadderNotify.Item.kill_times)
}

// required uint32 dead_times = 4;
bool RoomLadderNotify_Item::has_dead_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomLadderNotify_Item::set_has_dead_times() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomLadderNotify_Item::clear_has_dead_times() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomLadderNotify_Item::clear_dead_times() {
  dead_times_ = 0u;
  clear_has_dead_times();
}
::google::protobuf::uint32 RoomLadderNotify_Item::dead_times() const {
  // @@protoc_insertion_point(field_get:pb.RoomLadderNotify.Item.dead_times)
  return dead_times_;
}
void RoomLadderNotify_Item::set_dead_times(::google::protobuf::uint32 value) {
  set_has_dead_times();
  dead_times_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomLadderNotify.Item.dead_times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomLadderNotify::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomLadderNotify::RoomLadderNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomLadderNotify)
}
RoomLadderNotify::RoomLadderNotify(const RoomLadderNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RoomLadderNotify)
}

void RoomLadderNotify::SharedCtor() {
  _cached_size_ = 0;
}

RoomLadderNotify::~RoomLadderNotify() {
  // @@protoc_insertion_point(destructor:pb.RoomLadderNotify)
  SharedDtor();
}

void RoomLadderNotify::SharedDtor() {
}

void RoomLadderNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLadderNotify::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[14].descriptor;
}

const RoomLadderNotify& RoomLadderNotify::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomLadderNotify* RoomLadderNotify::New(::google::protobuf::Arena* arena) const {
  RoomLadderNotify* n = new RoomLadderNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomLadderNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomLadderNotify)
  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomLadderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomLadderNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.RoomLadderNotify.Item items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomLadderNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomLadderNotify)
  return false;
#undef DO_
}

void RoomLadderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomLadderNotify)
  // repeated .pb.RoomLadderNotify.Item items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomLadderNotify)
}

::google::protobuf::uint8* RoomLadderNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomLadderNotify)
  // repeated .pb.RoomLadderNotify.Item items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomLadderNotify)
  return target;
}

size_t RoomLadderNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomLadderNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .pb.RoomLadderNotify.Item items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLadderNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomLadderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomLadderNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomLadderNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomLadderNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomLadderNotify)
    MergeFrom(*source);
  }
}

void RoomLadderNotify::MergeFrom(const RoomLadderNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomLadderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
}

void RoomLadderNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomLadderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLadderNotify::CopyFrom(const RoomLadderNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomLadderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLadderNotify::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void RoomLadderNotify::Swap(RoomLadderNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomLadderNotify::InternalSwap(RoomLadderNotify* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomLadderNotify::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomLadderNotify

// repeated .pb.RoomLadderNotify.Item items = 1;
int RoomLadderNotify::items_size() const {
  return items_.size();
}
void RoomLadderNotify::clear_items() {
  items_.Clear();
}
const ::pb::RoomLadderNotify_Item& RoomLadderNotify::items(int index) const {
  // @@protoc_insertion_point(field_get:pb.RoomLadderNotify.items)
  return items_.Get(index);
}
::pb::RoomLadderNotify_Item* RoomLadderNotify::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RoomLadderNotify.items)
  return items_.Mutable(index);
}
::pb::RoomLadderNotify_Item* RoomLadderNotify::add_items() {
  // @@protoc_insertion_point(field_add:pb.RoomLadderNotify.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::RoomLadderNotify_Item >*
RoomLadderNotify::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pb.RoomLadderNotify.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::RoomLadderNotify_Item >&
RoomLadderNotify::items() const {
  // @@protoc_insertion_point(field_list:pb.RoomLadderNotify.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerMoveReq::kPosFieldNumber;
const int RoomPlayerMoveReq::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerMoveReq::RoomPlayerMoveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerMoveReq)
}
RoomPlayerMoveReq::RoomPlayerMoveReq(const RoomPlayerMoveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerMoveReq)
}

void RoomPlayerMoveReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&pos_) + sizeof(dir_));
}

RoomPlayerMoveReq::~RoomPlayerMoveReq() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerMoveReq)
  SharedDtor();
}

void RoomPlayerMoveReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void RoomPlayerMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerMoveReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[15].descriptor;
}

const RoomPlayerMoveReq& RoomPlayerMoveReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerMoveReq* RoomPlayerMoveReq::New(::google::protobuf::Arena* arena) const {
  RoomPlayerMoveReq* n = new RoomPlayerMoveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerMoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerMoveReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Vector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerMoveReq)
  return false;
#undef DO_
}

void RoomPlayerMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerMoveReq)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerMoveReq)
}

::google::protobuf::uint8* RoomPlayerMoveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerMoveReq)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerMoveReq)
  return target;
}

size_t RoomPlayerMoveReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerMoveReq)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  return total_size;
}
size_t RoomPlayerMoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerMoveReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerMoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerMoveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerMoveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerMoveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerMoveReq)
    MergeFrom(*source);
  }
}

void RoomPlayerMoveReq::MergeFrom(const RoomPlayerMoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerMoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
  }
}

void RoomPlayerMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerMoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerMoveReq::CopyFrom(const RoomPlayerMoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerMoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerMoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void RoomPlayerMoveReq::Swap(RoomPlayerMoveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerMoveReq::InternalSwap(RoomPlayerMoveReq* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerMoveReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerMoveReq

// required .pb.Vector pos = 1;
bool RoomPlayerMoveReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerMoveReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerMoveReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerMoveReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomPlayerMoveReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerMoveReq.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerMoveReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerMoveReq.pos)
  return pos_;
}
::pb::Vector* RoomPlayerMoveReq::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerMoveReq.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomPlayerMoveReq::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerMoveReq.pos)
}

// required .pb.Vector dir = 2;
bool RoomPlayerMoveReq::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerMoveReq::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerMoveReq::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerMoveReq::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& RoomPlayerMoveReq::dir() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerMoveReq.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerMoveReq::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerMoveReq.dir)
  return dir_;
}
::pb::Vector* RoomPlayerMoveReq::release_dir() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerMoveReq.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void RoomPlayerMoveReq::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerMoveReq.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerDragRes::kPosFieldNumber;
const int RoomPlayerDragRes::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerDragRes::RoomPlayerDragRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerDragRes)
}
RoomPlayerDragRes::RoomPlayerDragRes(const RoomPlayerDragRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerDragRes)
}

void RoomPlayerDragRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&pos_) + sizeof(dir_));
}

RoomPlayerDragRes::~RoomPlayerDragRes() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerDragRes)
  SharedDtor();
}

void RoomPlayerDragRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void RoomPlayerDragRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerDragRes::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[16].descriptor;
}

const RoomPlayerDragRes& RoomPlayerDragRes::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerDragRes* RoomPlayerDragRes::New(::google::protobuf::Arena* arena) const {
  RoomPlayerDragRes* n = new RoomPlayerDragRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerDragRes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerDragRes)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerDragRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerDragRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Vector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerDragRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerDragRes)
  return false;
#undef DO_
}

void RoomPlayerDragRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerDragRes)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerDragRes)
}

::google::protobuf::uint8* RoomPlayerDragRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerDragRes)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerDragRes)
  return target;
}

size_t RoomPlayerDragRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerDragRes)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  return total_size;
}
size_t RoomPlayerDragRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerDragRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerDragRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerDragRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerDragRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerDragRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerDragRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerDragRes)
    MergeFrom(*source);
  }
}

void RoomPlayerDragRes::MergeFrom(const RoomPlayerDragRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerDragRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
  }
}

void RoomPlayerDragRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerDragRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerDragRes::CopyFrom(const RoomPlayerDragRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerDragRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerDragRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void RoomPlayerDragRes::Swap(RoomPlayerDragRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerDragRes::InternalSwap(RoomPlayerDragRes* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerDragRes::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerDragRes

// required .pb.Vector pos = 1;
bool RoomPlayerDragRes::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerDragRes::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerDragRes::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerDragRes::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomPlayerDragRes::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerDragRes.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerDragRes::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerDragRes.pos)
  return pos_;
}
::pb::Vector* RoomPlayerDragRes::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerDragRes.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomPlayerDragRes::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerDragRes.pos)
}

// required .pb.Vector dir = 2;
bool RoomPlayerDragRes::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerDragRes::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerDragRes::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerDragRes::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& RoomPlayerDragRes::dir() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerDragRes.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerDragRes::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerDragRes.dir)
  return dir_;
}
::pb::Vector* RoomPlayerDragRes::release_dir() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerDragRes.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void RoomPlayerDragRes::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerDragRes.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerDragEndReq::RoomPlayerDragEndReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerDragEndReq)
}
RoomPlayerDragEndReq::RoomPlayerDragEndReq(const RoomPlayerDragEndReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerDragEndReq)
}

void RoomPlayerDragEndReq::SharedCtor() {
  _cached_size_ = 0;
}

RoomPlayerDragEndReq::~RoomPlayerDragEndReq() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerDragEndReq)
  SharedDtor();
}

void RoomPlayerDragEndReq::SharedDtor() {
}

void RoomPlayerDragEndReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerDragEndReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[17].descriptor;
}

const RoomPlayerDragEndReq& RoomPlayerDragEndReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerDragEndReq* RoomPlayerDragEndReq::New(::google::protobuf::Arena* arena) const {
  RoomPlayerDragEndReq* n = new RoomPlayerDragEndReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerDragEndReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerDragEndReq)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerDragEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerDragEndReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerDragEndReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerDragEndReq)
  return false;
#undef DO_
}

void RoomPlayerDragEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerDragEndReq)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerDragEndReq)
}

::google::protobuf::uint8* RoomPlayerDragEndReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerDragEndReq)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerDragEndReq)
  return target;
}

size_t RoomPlayerDragEndReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerDragEndReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerDragEndReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerDragEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerDragEndReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerDragEndReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerDragEndReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerDragEndReq)
    MergeFrom(*source);
  }
}

void RoomPlayerDragEndReq::MergeFrom(const RoomPlayerDragEndReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerDragEndReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void RoomPlayerDragEndReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerDragEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerDragEndReq::CopyFrom(const RoomPlayerDragEndReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerDragEndReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerDragEndReq::IsInitialized() const {
  return true;
}

void RoomPlayerDragEndReq::Swap(RoomPlayerDragEndReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerDragEndReq::InternalSwap(RoomPlayerDragEndReq* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerDragEndReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerDragEndReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerReliveReq::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerReliveReq::RoomPlayerReliveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerReliveReq)
}
RoomPlayerReliveReq::RoomPlayerReliveReq(const RoomPlayerReliveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_ = from.job_;
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerReliveReq)
}

void RoomPlayerReliveReq::SharedCtor() {
  _cached_size_ = 0;
  job_ = 0u;
}

RoomPlayerReliveReq::~RoomPlayerReliveReq() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerReliveReq)
  SharedDtor();
}

void RoomPlayerReliveReq::SharedDtor() {
}

void RoomPlayerReliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerReliveReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[18].descriptor;
}

const RoomPlayerReliveReq& RoomPlayerReliveReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerReliveReq* RoomPlayerReliveReq::New(::google::protobuf::Arena* arena) const {
  RoomPlayerReliveReq* n = new RoomPlayerReliveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerReliveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerReliveReq)
  job_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerReliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerReliveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerReliveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerReliveReq)
  return false;
#undef DO_
}

void RoomPlayerReliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerReliveReq)
  // required uint32 job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->job(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerReliveReq)
}

::google::protobuf::uint8* RoomPlayerReliveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerReliveReq)
  // required uint32 job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->job(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerReliveReq)
  return target;
}

size_t RoomPlayerReliveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerReliveReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 job = 1;
  if (has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerReliveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerReliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerReliveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerReliveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerReliveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerReliveReq)
    MergeFrom(*source);
  }
}

void RoomPlayerReliveReq::MergeFrom(const RoomPlayerReliveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerReliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    set_job(from.job());
  }
}

void RoomPlayerReliveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerReliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerReliveReq::CopyFrom(const RoomPlayerReliveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerReliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerReliveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RoomPlayerReliveReq::Swap(RoomPlayerReliveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerReliveReq::InternalSwap(RoomPlayerReliveReq* other) {
  std::swap(job_, other->job_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerReliveReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerReliveReq

// required uint32 job = 1;
bool RoomPlayerReliveReq::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerReliveReq::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerReliveReq::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerReliveReq::clear_job() {
  job_ = 0u;
  clear_has_job();
}
::google::protobuf::uint32 RoomPlayerReliveReq::job() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerReliveReq.job)
  return job_;
}
void RoomPlayerReliveReq::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerReliveReq.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerReliveRes::kJobFieldNumber;
const int RoomPlayerReliveRes::kHpFieldNumber;
const int RoomPlayerReliveRes::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerReliveRes::RoomPlayerReliveRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerReliveRes)
}
RoomPlayerReliveRes::RoomPlayerReliveRes(const RoomPlayerReliveRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&job_, &from.job_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&job_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerReliveRes)
}

void RoomPlayerReliveRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&job_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&job_) + sizeof(score_));
}

RoomPlayerReliveRes::~RoomPlayerReliveRes() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerReliveRes)
  SharedDtor();
}

void RoomPlayerReliveRes::SharedDtor() {
}

void RoomPlayerReliveRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerReliveRes::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[19].descriptor;
}

const RoomPlayerReliveRes& RoomPlayerReliveRes::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerReliveRes* RoomPlayerReliveRes::New(::google::protobuf::Arena* arena) const {
  RoomPlayerReliveRes* n = new RoomPlayerReliveRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerReliveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerReliveRes)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&job_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&job_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerReliveRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerReliveRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 hp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerReliveRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerReliveRes)
  return false;
#undef DO_
}

void RoomPlayerReliveRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerReliveRes)
  // required uint32 job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->job(), output);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  // required uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerReliveRes)
}

::google::protobuf::uint8* RoomPlayerReliveRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerReliveRes)
  // required uint32 job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->job(), target);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  // required uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerReliveRes)
  return target;
}

size_t RoomPlayerReliveRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerReliveRes)
  size_t total_size = 0;

  if (has_job()) {
    // required uint32 job = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());
  }

  if (has_hp()) {
    // required uint32 hp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  if (has_score()) {
    // required uint32 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  return total_size;
}
size_t RoomPlayerReliveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerReliveRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 job = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->job());

    // required uint32 hp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());

    // required uint32 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerReliveRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerReliveRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerReliveRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerReliveRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerReliveRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerReliveRes)
    MergeFrom(*source);
  }
}

void RoomPlayerReliveRes::MergeFrom(const RoomPlayerReliveRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerReliveRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void RoomPlayerReliveRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerReliveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerReliveRes::CopyFrom(const RoomPlayerReliveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerReliveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerReliveRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RoomPlayerReliveRes::Swap(RoomPlayerReliveRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerReliveRes::InternalSwap(RoomPlayerReliveRes* other) {
  std::swap(job_, other->job_);
  std::swap(hp_, other->hp_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerReliveRes::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerReliveRes

// required uint32 job = 1;
bool RoomPlayerReliveRes::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerReliveRes::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerReliveRes::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerReliveRes::clear_job() {
  job_ = 0u;
  clear_has_job();
}
::google::protobuf::uint32 RoomPlayerReliveRes::job() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerReliveRes.job)
  return job_;
}
void RoomPlayerReliveRes::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerReliveRes.job)
}

// required uint32 hp = 2;
bool RoomPlayerReliveRes::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerReliveRes::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerReliveRes::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerReliveRes::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
::google::protobuf::uint32 RoomPlayerReliveRes::hp() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerReliveRes.hp)
  return hp_;
}
void RoomPlayerReliveRes::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerReliveRes.hp)
}

// required uint32 score = 3;
bool RoomPlayerReliveRes::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomPlayerReliveRes::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomPlayerReliveRes::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomPlayerReliveRes::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 RoomPlayerReliveRes::score() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerReliveRes.score)
  return score_;
}
void RoomPlayerReliveRes::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPlayerReliveRes.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPlayerStopReq::kPosFieldNumber;
const int RoomPlayerStopReq::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPlayerStopReq::RoomPlayerStopReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPlayerStopReq)
}
RoomPlayerStopReq::RoomPlayerStopReq(const RoomPlayerStopReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.RoomPlayerStopReq)
}

void RoomPlayerStopReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&pos_) + sizeof(dir_));
}

RoomPlayerStopReq::~RoomPlayerStopReq() {
  // @@protoc_insertion_point(destructor:pb.RoomPlayerStopReq)
  SharedDtor();
}

void RoomPlayerStopReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void RoomPlayerStopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPlayerStopReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[20].descriptor;
}

const RoomPlayerStopReq& RoomPlayerStopReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPlayerStopReq* RoomPlayerStopReq::New(::google::protobuf::Arena* arena) const {
  RoomPlayerStopReq* n = new RoomPlayerStopReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPlayerStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPlayerStopReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPlayerStopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPlayerStopReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Vector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPlayerStopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPlayerStopReq)
  return false;
#undef DO_
}

void RoomPlayerStopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPlayerStopReq)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPlayerStopReq)
}

::google::protobuf::uint8* RoomPlayerStopReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPlayerStopReq)
  // required .pb.Vector pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPlayerStopReq)
  return target;
}

size_t RoomPlayerStopReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.RoomPlayerStopReq)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  return total_size;
}
size_t RoomPlayerStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPlayerStopReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPlayerStopReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPlayerStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPlayerStopReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPlayerStopReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPlayerStopReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPlayerStopReq)
    MergeFrom(*source);
  }
}

void RoomPlayerStopReq::MergeFrom(const RoomPlayerStopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPlayerStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
  }
}

void RoomPlayerStopReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPlayerStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPlayerStopReq::CopyFrom(const RoomPlayerStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPlayerStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerStopReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void RoomPlayerStopReq::Swap(RoomPlayerStopReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPlayerStopReq::InternalSwap(RoomPlayerStopReq* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPlayerStopReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPlayerStopReq

// required .pb.Vector pos = 1;
bool RoomPlayerStopReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPlayerStopReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPlayerStopReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPlayerStopReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& RoomPlayerStopReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerStopReq.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerStopReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerStopReq.pos)
  return pos_;
}
::pb::Vector* RoomPlayerStopReq::release_pos() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerStopReq.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RoomPlayerStopReq::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerStopReq.pos)
}

// required .pb.Vector dir = 2;
bool RoomPlayerStopReq::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomPlayerStopReq::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomPlayerStopReq::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomPlayerStopReq::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& RoomPlayerStopReq::dir() const {
  // @@protoc_insertion_point(field_get:pb.RoomPlayerStopReq.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* RoomPlayerStopReq::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.RoomPlayerStopReq.dir)
  return dir_;
}
::pb::Vector* RoomPlayerStopReq::release_dir() {
  // @@protoc_insertion_point(field_release:pb.RoomPlayerStopReq.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void RoomPlayerStopReq::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.RoomPlayerStopReq.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpellStartReq::kXmlIdFieldNumber;
const int SpellStartReq::kPosFieldNumber;
const int SpellStartReq::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpellStartReq::SpellStartReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpellStartReq)
}
SpellStartReq::SpellStartReq(const SpellStartReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  xml_id_ = from.xml_id_;
  // @@protoc_insertion_point(copy_constructor:pb.SpellStartReq)
}

void SpellStartReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&xml_id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(xml_id_));
}

SpellStartReq::~SpellStartReq() {
  // @@protoc_insertion_point(destructor:pb.SpellStartReq)
  SharedDtor();
}

void SpellStartReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void SpellStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellStartReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[21].descriptor;
}

const SpellStartReq& SpellStartReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpellStartReq* SpellStartReq::New(::google::protobuf::Arena* arena) const {
  SpellStartReq* n = new SpellStartReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpellStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SpellStartReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  xml_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpellStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpellStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xml_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpellStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpellStartReq)
  return false;
#undef DO_
}

void SpellStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpellStartReq)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xml_id(), output);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpellStartReq)
}

::google::protobuf::uint8* SpellStartReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpellStartReq)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xml_id(), target);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpellStartReq)
  return target;
}

size_t SpellStartReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.SpellStartReq)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  if (has_xml_id()) {
    // required uint32 xml_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }

  return total_size;
}
size_t SpellStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SpellStartReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

    // required uint32 xml_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellStartReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SpellStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SpellStartReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpellStartReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SpellStartReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SpellStartReq)
    MergeFrom(*source);
  }
}

void SpellStartReq::MergeFrom(const SpellStartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SpellStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
    if (from.has_xml_id()) {
      set_xml_id(from.xml_id());
    }
  }
}

void SpellStartReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SpellStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellStartReq::CopyFrom(const SpellStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SpellStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellStartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void SpellStartReq::Swap(SpellStartReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpellStartReq::InternalSwap(SpellStartReq* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(xml_id_, other->xml_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpellStartReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellStartReq

// required uint32 xml_id = 1;
bool SpellStartReq::has_xml_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpellStartReq::set_has_xml_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SpellStartReq::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpellStartReq::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 SpellStartReq::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.SpellStartReq.xml_id)
  return xml_id_;
}
void SpellStartReq::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SpellStartReq.xml_id)
}

// required .pb.Vector pos = 2;
bool SpellStartReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpellStartReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void SpellStartReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpellStartReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& SpellStartReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.SpellStartReq.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* SpellStartReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpellStartReq.pos)
  return pos_;
}
::pb::Vector* SpellStartReq::release_pos() {
  // @@protoc_insertion_point(field_release:pb.SpellStartReq.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void SpellStartReq::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpellStartReq.pos)
}

// required .pb.Vector dir = 3;
bool SpellStartReq::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpellStartReq::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void SpellStartReq::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpellStartReq::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& SpellStartReq::dir() const {
  // @@protoc_insertion_point(field_get:pb.SpellStartReq.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* SpellStartReq::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpellStartReq.dir)
  return dir_;
}
::pb::Vector* SpellStartReq::release_dir() {
  // @@protoc_insertion_point(field_release:pb.SpellStartReq.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void SpellStartReq::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpellStartReq.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpellLevelUpReq::kXmlIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpellLevelUpReq::SpellLevelUpReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpellLevelUpReq)
}
SpellLevelUpReq::SpellLevelUpReq(const SpellLevelUpReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xml_id_ = from.xml_id_;
  // @@protoc_insertion_point(copy_constructor:pb.SpellLevelUpReq)
}

void SpellLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  xml_id_ = 0u;
}

SpellLevelUpReq::~SpellLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.SpellLevelUpReq)
  SharedDtor();
}

void SpellLevelUpReq::SharedDtor() {
}

void SpellLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellLevelUpReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[22].descriptor;
}

const SpellLevelUpReq& SpellLevelUpReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpellLevelUpReq* SpellLevelUpReq::New(::google::protobuf::Arena* arena) const {
  SpellLevelUpReq* n = new SpellLevelUpReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpellLevelUpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SpellLevelUpReq)
  xml_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpellLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpellLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 xml_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_xml_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xml_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpellLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpellLevelUpReq)
  return false;
#undef DO_
}

void SpellLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpellLevelUpReq)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->xml_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpellLevelUpReq)
}

::google::protobuf::uint8* SpellLevelUpReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpellLevelUpReq)
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->xml_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpellLevelUpReq)
  return target;
}

size_t SpellLevelUpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SpellLevelUpReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 xml_id = 1;
  if (has_xml_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xml_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SpellLevelUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SpellLevelUpReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpellLevelUpReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SpellLevelUpReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SpellLevelUpReq)
    MergeFrom(*source);
  }
}

void SpellLevelUpReq::MergeFrom(const SpellLevelUpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SpellLevelUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_xml_id()) {
    set_xml_id(from.xml_id());
  }
}

void SpellLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SpellLevelUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellLevelUpReq::CopyFrom(const SpellLevelUpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SpellLevelUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellLevelUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SpellLevelUpReq::Swap(SpellLevelUpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpellLevelUpReq::InternalSwap(SpellLevelUpReq* other) {
  std::swap(xml_id_, other->xml_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpellLevelUpReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellLevelUpReq

// required uint32 xml_id = 1;
bool SpellLevelUpReq::has_xml_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpellLevelUpReq::set_has_xml_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SpellLevelUpReq::clear_has_xml_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpellLevelUpReq::clear_xml_id() {
  xml_id_ = 0u;
  clear_has_xml_id();
}
::google::protobuf::uint32 SpellLevelUpReq::xml_id() const {
  // @@protoc_insertion_point(field_get:pb.SpellLevelUpReq.xml_id)
  return xml_id_;
}
void SpellLevelUpReq::set_xml_id(::google::protobuf::uint32 value) {
  set_has_xml_id();
  xml_id_ = value;
  // @@protoc_insertion_point(field_set:pb.SpellLevelUpReq.xml_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpellLevelUpRes::kSpellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpellLevelUpRes::SpellLevelUpRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpellLevelUpRes)
}
SpellLevelUpRes::SpellLevelUpRes(const SpellLevelUpRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_spell()) {
    spell_ = new ::pb::RoomPlayerSpell(*from.spell_);
  } else {
    spell_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.SpellLevelUpRes)
}

void SpellLevelUpRes::SharedCtor() {
  _cached_size_ = 0;
  spell_ = NULL;
}

SpellLevelUpRes::~SpellLevelUpRes() {
  // @@protoc_insertion_point(destructor:pb.SpellLevelUpRes)
  SharedDtor();
}

void SpellLevelUpRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete spell_;
  }
}

void SpellLevelUpRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellLevelUpRes::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[23].descriptor;
}

const SpellLevelUpRes& SpellLevelUpRes::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpellLevelUpRes* SpellLevelUpRes::New(::google::protobuf::Arena* arena) const {
  SpellLevelUpRes* n = new SpellLevelUpRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpellLevelUpRes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SpellLevelUpRes)
  if (has_spell()) {
    GOOGLE_DCHECK(spell_ != NULL);
    spell_->::pb::RoomPlayerSpell::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpellLevelUpRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpellLevelUpRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RoomPlayerSpell spell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpellLevelUpRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpellLevelUpRes)
  return false;
#undef DO_
}

void SpellLevelUpRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpellLevelUpRes)
  // required .pb.RoomPlayerSpell spell = 1;
  if (has_spell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->spell_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpellLevelUpRes)
}

::google::protobuf::uint8* SpellLevelUpRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpellLevelUpRes)
  // required .pb.RoomPlayerSpell spell = 1;
  if (has_spell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->spell_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpellLevelUpRes)
  return target;
}

size_t SpellLevelUpRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SpellLevelUpRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .pb.RoomPlayerSpell spell = 1;
  if (has_spell()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spell_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellLevelUpRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SpellLevelUpRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SpellLevelUpRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpellLevelUpRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SpellLevelUpRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SpellLevelUpRes)
    MergeFrom(*source);
  }
}

void SpellLevelUpRes::MergeFrom(const SpellLevelUpRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SpellLevelUpRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_spell()) {
    mutable_spell()->::pb::RoomPlayerSpell::MergeFrom(from.spell());
  }
}

void SpellLevelUpRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SpellLevelUpRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellLevelUpRes::CopyFrom(const SpellLevelUpRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SpellLevelUpRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellLevelUpRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_spell()) {
    if (!this->spell_->IsInitialized()) return false;
  }
  return true;
}

void SpellLevelUpRes::Swap(SpellLevelUpRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpellLevelUpRes::InternalSwap(SpellLevelUpRes* other) {
  std::swap(spell_, other->spell_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpellLevelUpRes::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellLevelUpRes

// required .pb.RoomPlayerSpell spell = 1;
bool SpellLevelUpRes::has_spell() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpellLevelUpRes::set_has_spell() {
  _has_bits_[0] |= 0x00000001u;
}
void SpellLevelUpRes::clear_has_spell() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpellLevelUpRes::clear_spell() {
  if (spell_ != NULL) spell_->::pb::RoomPlayerSpell::Clear();
  clear_has_spell();
}
const ::pb::RoomPlayerSpell& SpellLevelUpRes::spell() const {
  // @@protoc_insertion_point(field_get:pb.SpellLevelUpRes.spell)
  return spell_ != NULL ? *spell_
                         : *::pb::RoomPlayerSpell::internal_default_instance();
}
::pb::RoomPlayerSpell* SpellLevelUpRes::mutable_spell() {
  set_has_spell();
  if (spell_ == NULL) {
    spell_ = new ::pb::RoomPlayerSpell;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpellLevelUpRes.spell)
  return spell_;
}
::pb::RoomPlayerSpell* SpellLevelUpRes::release_spell() {
  // @@protoc_insertion_point(field_release:pb.SpellLevelUpRes.spell)
  clear_has_spell();
  ::pb::RoomPlayerSpell* temp = spell_;
  spell_ = NULL;
  return temp;
}
void SpellLevelUpRes::set_allocated_spell(::pb::RoomPlayerSpell* spell) {
  delete spell_;
  spell_ = spell;
  if (spell) {
    set_has_spell();
  } else {
    clear_has_spell();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpellLevelUpRes.spell)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KillNotify_KillInfo::kCatalogFieldNumber;
const int KillNotify_KillInfo::kNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KillNotify_KillInfo::KillNotify_KillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.KillNotify.KillInfo)
}
KillNotify_KillInfo::KillNotify_KillInfo(const KillNotify_KillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&catalog_, &from.catalog_,
    reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&catalog_) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:pb.KillNotify.KillInfo)
}

void KillNotify_KillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&catalog_, 0, reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&catalog_) + sizeof(number_));
}

KillNotify_KillInfo::~KillNotify_KillInfo() {
  // @@protoc_insertion_point(destructor:pb.KillNotify.KillInfo)
  SharedDtor();
}

void KillNotify_KillInfo::SharedDtor() {
}

void KillNotify_KillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillNotify_KillInfo::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[24].descriptor;
}

const KillNotify_KillInfo& KillNotify_KillInfo::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

KillNotify_KillInfo* KillNotify_KillInfo::New(::google::protobuf::Arena* arena) const {
  KillNotify_KillInfo* n = new KillNotify_KillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KillNotify_KillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KillNotify.KillInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&catalog_, 0, reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&catalog_) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KillNotify_KillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.KillNotify.KillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 catalog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_catalog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catalog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.KillNotify.KillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.KillNotify.KillInfo)
  return false;
#undef DO_
}

void KillNotify_KillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.KillNotify.KillInfo)
  // required uint32 catalog = 1;
  if (has_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->catalog(), output);
  }

  // required uint32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.KillNotify.KillInfo)
}

::google::protobuf::uint8* KillNotify_KillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.KillNotify.KillInfo)
  // required uint32 catalog = 1;
  if (has_catalog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->catalog(), target);
  }

  // required uint32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KillNotify.KillInfo)
  return target;
}

size_t KillNotify_KillInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.KillNotify.KillInfo)
  size_t total_size = 0;

  if (has_catalog()) {
    // required uint32 catalog = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog());
  }

  if (has_number()) {
    // required uint32 number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  return total_size;
}
size_t KillNotify_KillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KillNotify.KillInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 catalog = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catalog());

    // required uint32 number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillNotify_KillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KillNotify.KillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const KillNotify_KillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KillNotify_KillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KillNotify.KillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KillNotify.KillInfo)
    MergeFrom(*source);
  }
}

void KillNotify_KillInfo::MergeFrom(const KillNotify_KillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KillNotify.KillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_catalog()) {
      set_catalog(from.catalog());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
}

void KillNotify_KillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KillNotify.KillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillNotify_KillInfo::CopyFrom(const KillNotify_KillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KillNotify.KillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillNotify_KillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KillNotify_KillInfo::Swap(KillNotify_KillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KillNotify_KillInfo::InternalSwap(KillNotify_KillInfo* other) {
  std::swap(catalog_, other->catalog_);
  std::swap(number_, other->number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KillNotify_KillInfo::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KillNotify_KillInfo

// required uint32 catalog = 1;
bool KillNotify_KillInfo::has_catalog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KillNotify_KillInfo::set_has_catalog() {
  _has_bits_[0] |= 0x00000001u;
}
void KillNotify_KillInfo::clear_has_catalog() {
  _has_bits_[0] &= ~0x00000001u;
}
void KillNotify_KillInfo::clear_catalog() {
  catalog_ = 0u;
  clear_has_catalog();
}
::google::protobuf::uint32 KillNotify_KillInfo::catalog() const {
  // @@protoc_insertion_point(field_get:pb.KillNotify.KillInfo.catalog)
  return catalog_;
}
void KillNotify_KillInfo::set_catalog(::google::protobuf::uint32 value) {
  set_has_catalog();
  catalog_ = value;
  // @@protoc_insertion_point(field_set:pb.KillNotify.KillInfo.catalog)
}

// required uint32 number = 2;
bool KillNotify_KillInfo::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KillNotify_KillInfo::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
void KillNotify_KillInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void KillNotify_KillInfo::clear_number() {
  number_ = 0u;
  clear_has_number();
}
::google::protobuf::uint32 KillNotify_KillInfo::number() const {
  // @@protoc_insertion_point(field_get:pb.KillNotify.KillInfo.number)
  return number_;
}
void KillNotify_KillInfo::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:pb.KillNotify.KillInfo.number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KillNotify::kPlayerIdFieldNumber;
const int KillNotify::kKilledIdFieldNumber;
const int KillNotify::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KillNotify::KillNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.KillNotify)
}
KillNotify::KillNotify(const KillNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&killed_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(killed_id_));
  // @@protoc_insertion_point(copy_constructor:pb.KillNotify)
}

void KillNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&killed_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(killed_id_));
}

KillNotify::~KillNotify() {
  // @@protoc_insertion_point(destructor:pb.KillNotify)
  SharedDtor();
}

void KillNotify::SharedDtor() {
}

void KillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillNotify::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[25].descriptor;
}

const KillNotify& KillNotify::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

KillNotify* KillNotify::New(::google::protobuf::Arena* arena) const {
  KillNotify* n = new KillNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KillNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.KillNotify)
  info_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&killed_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(killed_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.KillNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 killed_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_killed_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.KillNotify.KillInfo info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.KillNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.KillNotify)
  return false;
#undef DO_
}

void KillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.KillNotify)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 killed_id = 2;
  if (has_killed_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killed_id(), output);
  }

  // repeated .pb.KillNotify.KillInfo info = 3;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.KillNotify)
}

::google::protobuf::uint8* KillNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.KillNotify)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required uint32 killed_id = 2;
  if (has_killed_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killed_id(), target);
  }

  // repeated .pb.KillNotify.KillInfo info = 3;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.KillNotify)
  return target;
}

size_t KillNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.KillNotify)
  size_t total_size = 0;

  if (has_player_id()) {
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (has_killed_id()) {
    // required uint32 killed_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_id());
  }

  return total_size;
}
size_t KillNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.KillNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());

    // required uint32 killed_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .pb.KillNotify.KillInfo info = 3;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.KillNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const KillNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KillNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.KillNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.KillNotify)
    MergeFrom(*source);
  }
}

void KillNotify::MergeFrom(const KillNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.KillNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_killed_id()) {
      set_killed_id(from.killed_id());
    }
  }
}

void KillNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.KillNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillNotify::CopyFrom(const KillNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.KillNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->info())) return false;
  return true;
}

void KillNotify::Swap(KillNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KillNotify::InternalSwap(KillNotify* other) {
  info_.UnsafeArenaSwap(&other->info_);
  std::swap(player_id_, other->player_id_);
  std::swap(killed_id_, other->killed_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KillNotify::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KillNotify

// required uint32 player_id = 1;
bool KillNotify::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KillNotify::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void KillNotify::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void KillNotify::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 KillNotify::player_id() const {
  // @@protoc_insertion_point(field_get:pb.KillNotify.player_id)
  return player_id_;
}
void KillNotify::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.KillNotify.player_id)
}

// required uint32 killed_id = 2;
bool KillNotify::has_killed_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KillNotify::set_has_killed_id() {
  _has_bits_[0] |= 0x00000002u;
}
void KillNotify::clear_has_killed_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void KillNotify::clear_killed_id() {
  killed_id_ = 0u;
  clear_has_killed_id();
}
::google::protobuf::uint32 KillNotify::killed_id() const {
  // @@protoc_insertion_point(field_get:pb.KillNotify.killed_id)
  return killed_id_;
}
void KillNotify::set_killed_id(::google::protobuf::uint32 value) {
  set_has_killed_id();
  killed_id_ = value;
  // @@protoc_insertion_point(field_set:pb.KillNotify.killed_id)
}

// repeated .pb.KillNotify.KillInfo info = 3;
int KillNotify::info_size() const {
  return info_.size();
}
void KillNotify::clear_info() {
  info_.Clear();
}
const ::pb::KillNotify_KillInfo& KillNotify::info(int index) const {
  // @@protoc_insertion_point(field_get:pb.KillNotify.info)
  return info_.Get(index);
}
::pb::KillNotify_KillInfo* KillNotify::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:pb.KillNotify.info)
  return info_.Mutable(index);
}
::pb::KillNotify_KillInfo* KillNotify::add_info() {
  // @@protoc_insertion_point(field_add:pb.KillNotify.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb::KillNotify_KillInfo >*
KillNotify::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:pb.KillNotify.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::pb::KillNotify_KillInfo >&
KillNotify::info() const {
  // @@protoc_insertion_point(field_list:pb.KillNotify.info)
  return info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPingReq::RoomPingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPingReq)
}
RoomPingReq::RoomPingReq(const RoomPingReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RoomPingReq)
}

void RoomPingReq::SharedCtor() {
  _cached_size_ = 0;
}

RoomPingReq::~RoomPingReq() {
  // @@protoc_insertion_point(destructor:pb.RoomPingReq)
  SharedDtor();
}

void RoomPingReq::SharedDtor() {
}

void RoomPingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPingReq::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[26].descriptor;
}

const RoomPingReq& RoomPingReq::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPingReq* RoomPingReq::New(::google::protobuf::Arena* arena) const {
  RoomPingReq* n = new RoomPingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPingReq)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPingReq)
  return false;
#undef DO_
}

void RoomPingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPingReq)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPingReq)
}

::google::protobuf::uint8* RoomPingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPingReq)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPingReq)
  return target;
}

size_t RoomPingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPingReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPingReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPingReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPingReq)
    MergeFrom(*source);
  }
}

void RoomPingReq::MergeFrom(const RoomPingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void RoomPingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPingReq::CopyFrom(const RoomPingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPingReq::IsInitialized() const {
  return true;
}

void RoomPingReq::Swap(RoomPingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPingReq::InternalSwap(RoomPingReq* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPingReq::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPingReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomPingRes::kCurFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomPingRes::RoomPingRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RoomPingRes)
}
RoomPingRes::RoomPingRes(const RoomPingRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_frame_ = from.cur_frame_;
  // @@protoc_insertion_point(copy_constructor:pb.RoomPingRes)
}

void RoomPingRes::SharedCtor() {
  _cached_size_ = 0;
  cur_frame_ = 0u;
}

RoomPingRes::~RoomPingRes() {
  // @@protoc_insertion_point(destructor:pb.RoomPingRes)
  SharedDtor();
}

void RoomPingRes::SharedDtor() {
}

void RoomPingRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPingRes::descriptor() {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[27].descriptor;
}

const RoomPingRes& RoomPingRes::default_instance() {
  protobuf_ns_2froom_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomPingRes* RoomPingRes::New(::google::protobuf::Arena* arena) const {
  RoomPingRes* n = new RoomPingRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomPingRes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RoomPingRes)
  cur_frame_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomPingRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RoomPingRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cur_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cur_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RoomPingRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RoomPingRes)
  return false;
#undef DO_
}

void RoomPingRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RoomPingRes)
  // required uint32 cur_frame = 1;
  if (has_cur_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RoomPingRes)
}

::google::protobuf::uint8* RoomPingRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.RoomPingRes)
  // required uint32 cur_frame = 1;
  if (has_cur_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RoomPingRes)
  return target;
}

size_t RoomPingRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RoomPingRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 cur_frame = 1;
  if (has_cur_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_frame());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPingRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RoomPingRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomPingRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomPingRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RoomPingRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RoomPingRes)
    MergeFrom(*source);
  }
}

void RoomPingRes::MergeFrom(const RoomPingRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RoomPingRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_frame()) {
    set_cur_frame(from.cur_frame());
  }
}

void RoomPingRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RoomPingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPingRes::CopyFrom(const RoomPingRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RoomPingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPingRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RoomPingRes::Swap(RoomPingRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomPingRes::InternalSwap(RoomPingRes* other) {
  std::swap(cur_frame_, other->cur_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomPingRes::GetMetadata() const {
  protobuf_ns_2froom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomPingRes

// required uint32 cur_frame = 1;
bool RoomPingRes::has_cur_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomPingRes::set_has_cur_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomPingRes::clear_has_cur_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomPingRes::clear_cur_frame() {
  cur_frame_ = 0u;
  clear_has_cur_frame();
}
::google::protobuf::uint32 RoomPingRes::cur_frame() const {
  // @@protoc_insertion_point(field_get:pb.RoomPingRes.cur_frame)
  return cur_frame_;
}
void RoomPingRes::set_cur_frame(::google::protobuf::uint32 value) {
  set_has_cur_frame();
  cur_frame_ = value;
  // @@protoc_insertion_point(field_set:pb.RoomPingRes.cur_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
