// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns/room_scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ns/room_scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
class FrameMoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameMove> {
} _FrameMove_default_instance_;
class FrameStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameStop> {
} _FrameStop_default_instance_;
class FrameDeathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameDeath> {
} _FrameDeath_default_instance_;
class FrameReliveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameRelive> {
} _FrameRelive_default_instance_;
class FrameActionStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameActionStart> {
} _FrameActionStart_default_instance_;
class FrameStartBuffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameStartBuff> {
} _FrameStartBuff_default_instance_;
class FrameRemoveBuffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameRemoveBuff> {
} _FrameRemoveBuff_default_instance_;
class FrameSpellStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameSpellState> {
} _FrameSpellState_default_instance_;
class FrameSceneItemCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameSceneItemCreate> {
} _FrameSceneItemCreate_default_instance_;
class FrameSceneItemRemoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameSceneItemRemove> {
} _FrameSceneItemRemove_default_instance_;
class FrameLevelUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameLevelUp> {
} _FrameLevelUp_default_instance_;
class FramePlayerStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FramePlayerState> {
} _FramePlayerState_default_instance_;

namespace protobuf_ns_2froom_5fscene_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMove, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMove, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMove, dir_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStop, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStop, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStop, dir_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, murderer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, murderer_cur_socre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameDeath, owner_cur_socre_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRelive, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRelive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRelive, player_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, spell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameActionStart, left_cd_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStartBuff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStartBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameStartBuff, buff_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRemoveBuff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRemoveBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRemoveBuff, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRemoveBuff, buff_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSpellState, cur_gen_id_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemCreate, item_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameSceneItemRemove, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameLevelUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameLevelUp, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameLevelUp, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameLevelUp, player_spell_point_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePlayerState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePlayerState, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FramePlayerState, state_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(FrameMove)},
  { 10, 17, sizeof(FrameStop)},
  { 20, 28, sizeof(FrameDeath)},
  { 32, 37, sizeof(FrameRelive)},
  { 38, 46, sizeof(FrameActionStart)},
  { 50, 55, sizeof(FrameStartBuff)},
  { 56, 62, sizeof(FrameRemoveBuff)},
  { 64, 72, sizeof(FrameSpellState)},
  { 76, 81, sizeof(FrameSceneItemCreate)},
  { 82, 87, sizeof(FrameSceneItemRemove)},
  { 88, 95, sizeof(FrameLevelUp)},
  { 98, 104, sizeof(FramePlayerState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameDeath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameRelive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameActionStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameStartBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameRemoveBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameSpellState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameSceneItemCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameSceneItemRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameLevelUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FramePlayerState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ns/room_scene.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _FrameMove_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FrameStop_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FrameDeath_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _FrameRelive_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FrameActionStart_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _FrameStartBuff_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FrameRemoveBuff_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _FrameSpellState_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _FrameSceneItemCreate_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _FrameSceneItemRemove_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _FrameLevelUp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _FramePlayerState_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::pb::protobuf_room_2eproto::InitDefaults();
  _FrameMove_default_instance_.DefaultConstruct();
  _FrameStop_default_instance_.DefaultConstruct();
  _FrameDeath_default_instance_.DefaultConstruct();
  _FrameRelive_default_instance_.DefaultConstruct();
  _FrameActionStart_default_instance_.DefaultConstruct();
  _FrameStartBuff_default_instance_.DefaultConstruct();
  _FrameRemoveBuff_default_instance_.DefaultConstruct();
  _FrameSpellState_default_instance_.DefaultConstruct();
  _FrameSceneItemCreate_default_instance_.DefaultConstruct();
  _FrameSceneItemRemove_default_instance_.DefaultConstruct();
  _FrameLevelUp_default_instance_.DefaultConstruct();
  _FramePlayerState_default_instance_.DefaultConstruct();
  _FrameMove_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _FrameMove_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _FrameStop_default_instance_.get_mutable()->pos_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _FrameStop_default_instance_.get_mutable()->dir_ = const_cast< ::pb::Vector*>(
      ::pb::Vector::internal_default_instance());
  _FrameRelive_default_instance_.get_mutable()->player_ = const_cast< ::pb::RoomPlayer*>(
      ::pb::RoomPlayer::internal_default_instance());
  _FrameStartBuff_default_instance_.get_mutable()->buff_ = const_cast< ::pb::RoomBuff*>(
      ::pb::RoomBuff::internal_default_instance());
  _FrameSceneItemCreate_default_instance_.get_mutable()->item_ = const_cast< ::pb::RoomItem*>(
      ::pb::RoomItem::internal_default_instance());
  _FramePlayerState_default_instance_.get_mutable()->state_ = const_cast< ::pb::RoomPlayerState*>(
      ::pb::RoomPlayerState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023ns/room_scene.proto\022\002pb\032\nroom.proto\"I\n"
      "\tFrameMove\022\n\n\002id\030\001 \002(\r\022\027\n\003pos\030\002 \002(\0132\n.pb"
      ".Vector\022\027\n\003dir\030\003 \002(\0132\n.pb.Vector\"I\n\tFram"
      "eStop\022\n\n\002id\030\001 \002(\r\022\027\n\003pos\030\002 \002(\0132\n.pb.Vect"
      "or\022\027\n\003dir\030\003 \002(\0132\n.pb.Vector\"b\n\nFrameDeat"
      "h\022\n\n\002id\030\001 \002(\r\022\023\n\013murderer_id\030\002 \002(\r\022\032\n\022mu"
      "rderer_cur_socre\030\003 \002(\r\022\027\n\017owner_cur_socr"
      "e\030\004 \002(\r\"-\n\013FrameRelive\022\036\n\006player\030\001 \002(\0132\016"
      ".pb.RoomPlayer\"[\n\020FrameActionStart\022\021\n\tpl"
      "ayer_id\030\001 \002(\r\022\020\n\010spell_id\030\002 \002(\r\022\021\n\tactio"
      "n_id\030\003 \002(\r\022\017\n\007left_cd\030\004 \002(\r\",\n\016FrameStar"
      "tBuff\022\032\n\004buff\030\001 \002(\0132\014.pb.RoomBuff\"5\n\017Fra"
      "meRemoveBuff\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007buff_"
      "id\030\002 \002(\t\"Z\n\017FrameSpellState\022\021\n\tplayer_id"
      "\030\001 \002(\r\022\021\n\taction_id\030\002 \002(\t\022\r\n\005state\030\003 \002(\r"
      "\022\022\n\ncur_gen_id\030\004 \002(\t\"2\n\024FrameSceneItemCr"
      "eate\022\032\n\004item\030\001 \002(\0132\014.pb.RoomItem\"\"\n\024Fram"
      "eSceneItemRemove\022\n\n\002id\030\001 \002(\r\"S\n\014FrameLev"
      "elUp\022\021\n\tplayer_id\030\001 \002(\r\022\024\n\014player_level\030"
      "\002 \002(\r\022\032\n\022player_spell_point\030\003 \002(\r\"I\n\020Fra"
      "mePlayerState\022\021\n\tplayer_id\030\001 \002(\r\022\"\n\005stat"
      "e\030\002 \002(\0132\023.pb.RoomPlayerState*\206\002\n\005FRAME\022\014"
      "\n\010CMD_NONE\020\000\022\014\n\010CMD_MOVE\020\001\022\014\n\010CMD_STOP\020\002"
      "\022\r\n\tCMD_DEATH\020\003\022\016\n\nCMD_RELIVE\020\004\022\024\n\020CMD_A"
      "CTION_START\020\005\022\022\n\016CMD_BUFF_START\020\006\022\023\n\017CMD"
      "_BUFF_REMOVE\020\007\022\022\n\016CMD_SPELL_SATE\020\010\022\031\n\025CM"
      "D_SCENE_ITEM_CREATE\020\t\022\031\n\025CMD_SCENE_TIEM_"
      "REMOVE\020\n\022\027\n\023CMD_PLAYER_LEVEL_UP\020\013\022\022\n\016CMD"
      "_BUFF_STATE\020\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1133);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ns/room_scene.proto", &protobuf_RegisterTypes);
  ::pb::protobuf_room_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ns_2froom_5fscene_2eproto

const ::google::protobuf::EnumDescriptor* FRAME_descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_enum_descriptors[0];
}
bool FRAME_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameMove::kIdFieldNumber;
const int FrameMove::kPosFieldNumber;
const int FrameMove::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameMove::FrameMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameMove)
}
FrameMove::FrameMove(const FrameMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.FrameMove)
}

void FrameMove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(id_));
}

FrameMove::~FrameMove() {
  // @@protoc_insertion_point(destructor:pb.FrameMove)
  SharedDtor();
}

void FrameMove::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void FrameMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameMove::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[0].descriptor;
}

const FrameMove& FrameMove::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameMove* FrameMove::New(::google::protobuf::Arena* arena) const {
  FrameMove* n = new FrameMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameMove::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameMove)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameMove)
  return false;
#undef DO_
}

void FrameMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameMove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameMove)
}

::google::protobuf::uint8* FrameMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameMove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameMove)
  return target;
}

size_t FrameMove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameMove)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t FrameMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameMove)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameMove)
    MergeFrom(*source);
  }
}

void FrameMove::MergeFrom(const FrameMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void FrameMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMove::CopyFrom(const FrameMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void FrameMove::Swap(FrameMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameMove::InternalSwap(FrameMove* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameMove::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameMove

// required uint32 id = 1;
bool FrameMove::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameMove::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameMove::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameMove::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 FrameMove::id() const {
  // @@protoc_insertion_point(field_get:pb.FrameMove.id)
  return id_;
}
void FrameMove::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameMove.id)
}

// required .pb.Vector pos = 2;
bool FrameMove::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameMove::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameMove::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameMove::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& FrameMove::pos() const {
  // @@protoc_insertion_point(field_get:pb.FrameMove.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* FrameMove::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameMove.pos)
  return pos_;
}
::pb::Vector* FrameMove::release_pos() {
  // @@protoc_insertion_point(field_release:pb.FrameMove.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void FrameMove::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameMove.pos)
}

// required .pb.Vector dir = 3;
bool FrameMove::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameMove::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameMove::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameMove::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& FrameMove::dir() const {
  // @@protoc_insertion_point(field_get:pb.FrameMove.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* FrameMove::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameMove.dir)
  return dir_;
}
::pb::Vector* FrameMove::release_dir() {
  // @@protoc_insertion_point(field_release:pb.FrameMove.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void FrameMove::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameMove.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameStop::kIdFieldNumber;
const int FrameStop::kPosFieldNumber;
const int FrameStop::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameStop::FrameStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameStop)
}
FrameStop::FrameStop(const FrameStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::pb::Vector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_dir()) {
    dir_ = new ::pb::Vector(*from.dir_);
  } else {
    dir_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.FrameStop)
}

void FrameStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pos_) + sizeof(id_));
}

FrameStop::~FrameStop() {
  // @@protoc_insertion_point(destructor:pb.FrameStop)
  SharedDtor();
}

void FrameStop::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete dir_;
  }
}

void FrameStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameStop::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[1].descriptor;
}

const FrameStop& FrameStop::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameStop* FrameStop::New(::google::protobuf::Arena* arena) const {
  FrameStop* n = new FrameStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameStop::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameStop)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::pb::Vector::Clear();
    }
    if (has_dir()) {
      GOOGLE_DCHECK(dir_ != NULL);
      dir_->::pb::Vector::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.Vector dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameStop)
  return false;
#undef DO_
}

void FrameStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameStop)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dir_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameStop)
}

::google::protobuf::uint8* FrameStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameStop)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .pb.Vector pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required .pb.Vector dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dir_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameStop)
  return target;
}

size_t FrameStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameStop)
  size_t total_size = 0;

  if (has_pos()) {
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_dir()) {
    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t FrameStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pb.Vector pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .pb.Vector dir = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dir_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameStop)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameStop)
    MergeFrom(*source);
  }
}

void FrameStop::MergeFrom(const FrameStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_pos()) {
      mutable_pos()->::pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::pb::Vector::MergeFrom(from.dir());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void FrameStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameStop::CopyFrom(const FrameStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir_->IsInitialized()) return false;
  }
  return true;
}

void FrameStop::Swap(FrameStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameStop::InternalSwap(FrameStop* other) {
  std::swap(pos_, other->pos_);
  std::swap(dir_, other->dir_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameStop::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameStop

// required uint32 id = 1;
bool FrameStop::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameStop::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameStop::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameStop::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 FrameStop::id() const {
  // @@protoc_insertion_point(field_get:pb.FrameStop.id)
  return id_;
}
void FrameStop::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameStop.id)
}

// required .pb.Vector pos = 2;
bool FrameStop::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameStop::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameStop::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameStop::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Vector::Clear();
  clear_has_pos();
}
const ::pb::Vector& FrameStop::pos() const {
  // @@protoc_insertion_point(field_get:pb.FrameStop.pos)
  return pos_ != NULL ? *pos_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* FrameStop::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameStop.pos)
  return pos_;
}
::pb::Vector* FrameStop::release_pos() {
  // @@protoc_insertion_point(field_release:pb.FrameStop.pos)
  clear_has_pos();
  ::pb::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void FrameStop::set_allocated_pos(::pb::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameStop.pos)
}

// required .pb.Vector dir = 3;
bool FrameStop::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameStop::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameStop::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameStop::clear_dir() {
  if (dir_ != NULL) dir_->::pb::Vector::Clear();
  clear_has_dir();
}
const ::pb::Vector& FrameStop::dir() const {
  // @@protoc_insertion_point(field_get:pb.FrameStop.dir)
  return dir_ != NULL ? *dir_
                         : *::pb::Vector::internal_default_instance();
}
::pb::Vector* FrameStop::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) {
    dir_ = new ::pb::Vector;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameStop.dir)
  return dir_;
}
::pb::Vector* FrameStop::release_dir() {
  // @@protoc_insertion_point(field_release:pb.FrameStop.dir)
  clear_has_dir();
  ::pb::Vector* temp = dir_;
  dir_ = NULL;
  return temp;
}
void FrameStop::set_allocated_dir(::pb::Vector* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameStop.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameDeath::kIdFieldNumber;
const int FrameDeath::kMurdererIdFieldNumber;
const int FrameDeath::kMurdererCurSocreFieldNumber;
const int FrameDeath::kOwnerCurSocreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameDeath::FrameDeath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameDeath)
}
FrameDeath::FrameDeath(const FrameDeath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&owner_cur_socre_) -
    reinterpret_cast<char*>(&id_) + sizeof(owner_cur_socre_));
  // @@protoc_insertion_point(copy_constructor:pb.FrameDeath)
}

void FrameDeath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&owner_cur_socre_) -
    reinterpret_cast<char*>(&id_) + sizeof(owner_cur_socre_));
}

FrameDeath::~FrameDeath() {
  // @@protoc_insertion_point(destructor:pb.FrameDeath)
  SharedDtor();
}

void FrameDeath::SharedDtor() {
}

void FrameDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameDeath::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[2].descriptor;
}

const FrameDeath& FrameDeath::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameDeath* FrameDeath::New(::google::protobuf::Arena* arena) const {
  FrameDeath* n = new FrameDeath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameDeath::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameDeath)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&owner_cur_socre_) -
      reinterpret_cast<char*>(&id_) + sizeof(owner_cur_socre_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 murderer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_murderer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &murderer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 murderer_cur_socre = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_murderer_cur_socre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &murderer_cur_socre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 owner_cur_socre = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_owner_cur_socre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_cur_socre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameDeath)
  return false;
#undef DO_
}

void FrameDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameDeath)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 murderer_id = 2;
  if (has_murderer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->murderer_id(), output);
  }

  // required uint32 murderer_cur_socre = 3;
  if (has_murderer_cur_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->murderer_cur_socre(), output);
  }

  // required uint32 owner_cur_socre = 4;
  if (has_owner_cur_socre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_cur_socre(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameDeath)
}

::google::protobuf::uint8* FrameDeath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameDeath)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 murderer_id = 2;
  if (has_murderer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->murderer_id(), target);
  }

  // required uint32 murderer_cur_socre = 3;
  if (has_murderer_cur_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->murderer_cur_socre(), target);
  }

  // required uint32 owner_cur_socre = 4;
  if (has_owner_cur_socre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_cur_socre(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameDeath)
  return target;
}

size_t FrameDeath::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameDeath)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_murderer_id()) {
    // required uint32 murderer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_id());
  }

  if (has_murderer_cur_socre()) {
    // required uint32 murderer_cur_socre = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_cur_socre());
  }

  if (has_owner_cur_socre()) {
    // required uint32 owner_cur_socre = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_cur_socre());
  }

  return total_size;
}
size_t FrameDeath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameDeath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 murderer_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_id());

    // required uint32 murderer_cur_socre = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_cur_socre());

    // required uint32 owner_cur_socre = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_cur_socre());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameDeath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameDeath)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameDeath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameDeath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameDeath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameDeath)
    MergeFrom(*source);
  }
}

void FrameDeath::MergeFrom(const FrameDeath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameDeath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_murderer_id()) {
      set_murderer_id(from.murderer_id());
    }
    if (from.has_murderer_cur_socre()) {
      set_murderer_cur_socre(from.murderer_cur_socre());
    }
    if (from.has_owner_cur_socre()) {
      set_owner_cur_socre(from.owner_cur_socre());
    }
  }
}

void FrameDeath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameDeath::CopyFrom(const FrameDeath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FrameDeath::Swap(FrameDeath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameDeath::InternalSwap(FrameDeath* other) {
  std::swap(id_, other->id_);
  std::swap(murderer_id_, other->murderer_id_);
  std::swap(murderer_cur_socre_, other->murderer_cur_socre_);
  std::swap(owner_cur_socre_, other->owner_cur_socre_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameDeath::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameDeath

// required uint32 id = 1;
bool FrameDeath::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameDeath::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameDeath::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameDeath::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 FrameDeath::id() const {
  // @@protoc_insertion_point(field_get:pb.FrameDeath.id)
  return id_;
}
void FrameDeath::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameDeath.id)
}

// required uint32 murderer_id = 2;
bool FrameDeath::has_murderer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameDeath::set_has_murderer_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameDeath::clear_has_murderer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameDeath::clear_murderer_id() {
  murderer_id_ = 0u;
  clear_has_murderer_id();
}
::google::protobuf::uint32 FrameDeath::murderer_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameDeath.murderer_id)
  return murderer_id_;
}
void FrameDeath::set_murderer_id(::google::protobuf::uint32 value) {
  set_has_murderer_id();
  murderer_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameDeath.murderer_id)
}

// required uint32 murderer_cur_socre = 3;
bool FrameDeath::has_murderer_cur_socre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameDeath::set_has_murderer_cur_socre() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameDeath::clear_has_murderer_cur_socre() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameDeath::clear_murderer_cur_socre() {
  murderer_cur_socre_ = 0u;
  clear_has_murderer_cur_socre();
}
::google::protobuf::uint32 FrameDeath::murderer_cur_socre() const {
  // @@protoc_insertion_point(field_get:pb.FrameDeath.murderer_cur_socre)
  return murderer_cur_socre_;
}
void FrameDeath::set_murderer_cur_socre(::google::protobuf::uint32 value) {
  set_has_murderer_cur_socre();
  murderer_cur_socre_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameDeath.murderer_cur_socre)
}

// required uint32 owner_cur_socre = 4;
bool FrameDeath::has_owner_cur_socre() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameDeath::set_has_owner_cur_socre() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameDeath::clear_has_owner_cur_socre() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameDeath::clear_owner_cur_socre() {
  owner_cur_socre_ = 0u;
  clear_has_owner_cur_socre();
}
::google::protobuf::uint32 FrameDeath::owner_cur_socre() const {
  // @@protoc_insertion_point(field_get:pb.FrameDeath.owner_cur_socre)
  return owner_cur_socre_;
}
void FrameDeath::set_owner_cur_socre(::google::protobuf::uint32 value) {
  set_has_owner_cur_socre();
  owner_cur_socre_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameDeath.owner_cur_socre)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameRelive::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameRelive::FrameRelive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameRelive)
}
FrameRelive::FrameRelive(const FrameRelive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::pb::RoomPlayer(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.FrameRelive)
}

void FrameRelive::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
}

FrameRelive::~FrameRelive() {
  // @@protoc_insertion_point(destructor:pb.FrameRelive)
  SharedDtor();
}

void FrameRelive::SharedDtor() {
  if (this != internal_default_instance()) {
    delete player_;
  }
}

void FrameRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameRelive::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[3].descriptor;
}

const FrameRelive& FrameRelive::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameRelive* FrameRelive::New(::google::protobuf::Arena* arena) const {
  FrameRelive* n = new FrameRelive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameRelive::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameRelive)
  if (has_player()) {
    GOOGLE_DCHECK(player_ != NULL);
    player_->::pb::RoomPlayer::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameRelive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RoomPlayer player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameRelive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameRelive)
  return false;
#undef DO_
}

void FrameRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameRelive)
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameRelive)
}

::google::protobuf::uint8* FrameRelive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameRelive)
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameRelive)
  return target;
}

size_t FrameRelive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameRelive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .pb.RoomPlayer player = 1;
  if (has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameRelive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameRelive)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameRelive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameRelive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameRelive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameRelive)
    MergeFrom(*source);
  }
}

void FrameRelive::MergeFrom(const FrameRelive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameRelive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    mutable_player()->::pb::RoomPlayer::MergeFrom(from.player());
  }
}

void FrameRelive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameRelive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRelive::CopyFrom(const FrameRelive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameRelive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRelive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_player()) {
    if (!this->player_->IsInitialized()) return false;
  }
  return true;
}

void FrameRelive::Swap(FrameRelive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameRelive::InternalSwap(FrameRelive* other) {
  std::swap(player_, other->player_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameRelive::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameRelive

// required .pb.RoomPlayer player = 1;
bool FrameRelive::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameRelive::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameRelive::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameRelive::clear_player() {
  if (player_ != NULL) player_->::pb::RoomPlayer::Clear();
  clear_has_player();
}
const ::pb::RoomPlayer& FrameRelive::player() const {
  // @@protoc_insertion_point(field_get:pb.FrameRelive.player)
  return player_ != NULL ? *player_
                         : *::pb::RoomPlayer::internal_default_instance();
}
::pb::RoomPlayer* FrameRelive::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::pb::RoomPlayer;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameRelive.player)
  return player_;
}
::pb::RoomPlayer* FrameRelive::release_player() {
  // @@protoc_insertion_point(field_release:pb.FrameRelive.player)
  clear_has_player();
  ::pb::RoomPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
void FrameRelive::set_allocated_player(::pb::RoomPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameRelive.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameActionStart::kPlayerIdFieldNumber;
const int FrameActionStart::kSpellIdFieldNumber;
const int FrameActionStart::kActionIdFieldNumber;
const int FrameActionStart::kLeftCdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameActionStart::FrameActionStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameActionStart)
}
FrameActionStart::FrameActionStart(const FrameActionStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&left_cd_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(left_cd_));
  // @@protoc_insertion_point(copy_constructor:pb.FrameActionStart)
}

void FrameActionStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&left_cd_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(left_cd_));
}

FrameActionStart::~FrameActionStart() {
  // @@protoc_insertion_point(destructor:pb.FrameActionStart)
  SharedDtor();
}

void FrameActionStart::SharedDtor() {
}

void FrameActionStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameActionStart::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[4].descriptor;
}

const FrameActionStart& FrameActionStart::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameActionStart* FrameActionStart::New(::google::protobuf::Arena* arena) const {
  FrameActionStart* n = new FrameActionStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameActionStart::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameActionStart)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&left_cd_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(left_cd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameActionStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameActionStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 spell_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_spell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 action_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_action_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 left_cd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_left_cd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameActionStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameActionStart)
  return false;
#undef DO_
}

void FrameActionStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameActionStart)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 spell_id = 2;
  if (has_spell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spell_id(), output);
  }

  // required uint32 action_id = 3;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_id(), output);
  }

  // required uint32 left_cd = 4;
  if (has_left_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->left_cd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameActionStart)
}

::google::protobuf::uint8* FrameActionStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameActionStart)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required uint32 spell_id = 2;
  if (has_spell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spell_id(), target);
  }

  // required uint32 action_id = 3;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_id(), target);
  }

  // required uint32 left_cd = 4;
  if (has_left_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->left_cd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameActionStart)
  return target;
}

size_t FrameActionStart::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameActionStart)
  size_t total_size = 0;

  if (has_player_id()) {
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (has_spell_id()) {
    // required uint32 spell_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spell_id());
  }

  if (has_action_id()) {
    // required uint32 action_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_id());
  }

  if (has_left_cd()) {
    // required uint32 left_cd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_cd());
  }

  return total_size;
}
size_t FrameActionStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameActionStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());

    // required uint32 spell_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spell_id());

    // required uint32 action_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_id());

    // required uint32 left_cd = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_cd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameActionStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameActionStart)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameActionStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameActionStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameActionStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameActionStart)
    MergeFrom(*source);
  }
}

void FrameActionStart::MergeFrom(const FrameActionStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameActionStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_spell_id()) {
      set_spell_id(from.spell_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_left_cd()) {
      set_left_cd(from.left_cd());
    }
  }
}

void FrameActionStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameActionStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameActionStart::CopyFrom(const FrameActionStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameActionStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameActionStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FrameActionStart::Swap(FrameActionStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameActionStart::InternalSwap(FrameActionStart* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(spell_id_, other->spell_id_);
  std::swap(action_id_, other->action_id_);
  std::swap(left_cd_, other->left_cd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameActionStart::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameActionStart

// required uint32 player_id = 1;
bool FrameActionStart::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameActionStart::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameActionStart::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameActionStart::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 FrameActionStart::player_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameActionStart.player_id)
  return player_id_;
}
void FrameActionStart::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameActionStart.player_id)
}

// required uint32 spell_id = 2;
bool FrameActionStart::has_spell_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameActionStart::set_has_spell_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameActionStart::clear_has_spell_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameActionStart::clear_spell_id() {
  spell_id_ = 0u;
  clear_has_spell_id();
}
::google::protobuf::uint32 FrameActionStart::spell_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameActionStart.spell_id)
  return spell_id_;
}
void FrameActionStart::set_spell_id(::google::protobuf::uint32 value) {
  set_has_spell_id();
  spell_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameActionStart.spell_id)
}

// required uint32 action_id = 3;
bool FrameActionStart::has_action_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameActionStart::set_has_action_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameActionStart::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameActionStart::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
::google::protobuf::uint32 FrameActionStart::action_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameActionStart.action_id)
  return action_id_;
}
void FrameActionStart::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameActionStart.action_id)
}

// required uint32 left_cd = 4;
bool FrameActionStart::has_left_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameActionStart::set_has_left_cd() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameActionStart::clear_has_left_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameActionStart::clear_left_cd() {
  left_cd_ = 0u;
  clear_has_left_cd();
}
::google::protobuf::uint32 FrameActionStart::left_cd() const {
  // @@protoc_insertion_point(field_get:pb.FrameActionStart.left_cd)
  return left_cd_;
}
void FrameActionStart::set_left_cd(::google::protobuf::uint32 value) {
  set_has_left_cd();
  left_cd_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameActionStart.left_cd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameStartBuff::kBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameStartBuff::FrameStartBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameStartBuff)
}
FrameStartBuff::FrameStartBuff(const FrameStartBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buff()) {
    buff_ = new ::pb::RoomBuff(*from.buff_);
  } else {
    buff_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.FrameStartBuff)
}

void FrameStartBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_ = NULL;
}

FrameStartBuff::~FrameStartBuff() {
  // @@protoc_insertion_point(destructor:pb.FrameStartBuff)
  SharedDtor();
}

void FrameStartBuff::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buff_;
  }
}

void FrameStartBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameStartBuff::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[5].descriptor;
}

const FrameStartBuff& FrameStartBuff::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameStartBuff* FrameStartBuff::New(::google::protobuf::Arena* arena) const {
  FrameStartBuff* n = new FrameStartBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameStartBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameStartBuff)
  if (has_buff()) {
    GOOGLE_DCHECK(buff_ != NULL);
    buff_->::pb::RoomBuff::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameStartBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameStartBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RoomBuff buff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameStartBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameStartBuff)
  return false;
#undef DO_
}

void FrameStartBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameStartBuff)
  // required .pb.RoomBuff buff = 1;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->buff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameStartBuff)
}

::google::protobuf::uint8* FrameStartBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameStartBuff)
  // required .pb.RoomBuff buff = 1;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->buff_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameStartBuff)
  return target;
}

size_t FrameStartBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameStartBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .pb.RoomBuff buff = 1;
  if (has_buff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buff_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameStartBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameStartBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameStartBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameStartBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameStartBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameStartBuff)
    MergeFrom(*source);
  }
}

void FrameStartBuff::MergeFrom(const FrameStartBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameStartBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buff()) {
    mutable_buff()->::pb::RoomBuff::MergeFrom(from.buff());
  }
}

void FrameStartBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameStartBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameStartBuff::CopyFrom(const FrameStartBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameStartBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameStartBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_buff()) {
    if (!this->buff_->IsInitialized()) return false;
  }
  return true;
}

void FrameStartBuff::Swap(FrameStartBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameStartBuff::InternalSwap(FrameStartBuff* other) {
  std::swap(buff_, other->buff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameStartBuff::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameStartBuff

// required .pb.RoomBuff buff = 1;
bool FrameStartBuff::has_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameStartBuff::set_has_buff() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameStartBuff::clear_has_buff() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameStartBuff::clear_buff() {
  if (buff_ != NULL) buff_->::pb::RoomBuff::Clear();
  clear_has_buff();
}
const ::pb::RoomBuff& FrameStartBuff::buff() const {
  // @@protoc_insertion_point(field_get:pb.FrameStartBuff.buff)
  return buff_ != NULL ? *buff_
                         : *::pb::RoomBuff::internal_default_instance();
}
::pb::RoomBuff* FrameStartBuff::mutable_buff() {
  set_has_buff();
  if (buff_ == NULL) {
    buff_ = new ::pb::RoomBuff;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameStartBuff.buff)
  return buff_;
}
::pb::RoomBuff* FrameStartBuff::release_buff() {
  // @@protoc_insertion_point(field_release:pb.FrameStartBuff.buff)
  clear_has_buff();
  ::pb::RoomBuff* temp = buff_;
  buff_ = NULL;
  return temp;
}
void FrameStartBuff::set_allocated_buff(::pb::RoomBuff* buff) {
  delete buff_;
  buff_ = buff;
  if (buff) {
    set_has_buff();
  } else {
    clear_has_buff();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameStartBuff.buff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameRemoveBuff::kPlayerIdFieldNumber;
const int FrameRemoveBuff::kBuffIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameRemoveBuff::FrameRemoveBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameRemoveBuff)
}
FrameRemoveBuff::FrameRemoveBuff(const FrameRemoveBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buff_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buff_id()) {
    buff_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_id_);
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:pb.FrameRemoveBuff)
}

void FrameRemoveBuff::SharedCtor() {
  _cached_size_ = 0;
  buff_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
}

FrameRemoveBuff::~FrameRemoveBuff() {
  // @@protoc_insertion_point(destructor:pb.FrameRemoveBuff)
  SharedDtor();
}

void FrameRemoveBuff::SharedDtor() {
  buff_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameRemoveBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameRemoveBuff::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[6].descriptor;
}

const FrameRemoveBuff& FrameRemoveBuff::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameRemoveBuff* FrameRemoveBuff::New(::google::protobuf::Arena* arena) const {
  FrameRemoveBuff* n = new FrameRemoveBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameRemoveBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameRemoveBuff)
  if (has_buff_id()) {
    GOOGLE_DCHECK(!buff_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buff_id_.UnsafeRawStringPointer())->clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameRemoveBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameRemoveBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string buff_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buff_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buff_id().data(), this->buff_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.FrameRemoveBuff.buff_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameRemoveBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameRemoveBuff)
  return false;
#undef DO_
}

void FrameRemoveBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameRemoveBuff)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required string buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff_id().data(), this->buff_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameRemoveBuff.buff_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buff_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameRemoveBuff)
}

::google::protobuf::uint8* FrameRemoveBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameRemoveBuff)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required string buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff_id().data(), this->buff_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameRemoveBuff.buff_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buff_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameRemoveBuff)
  return target;
}

size_t FrameRemoveBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameRemoveBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string buff_id = 2;
  if (has_buff_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buff_id());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameRemoveBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameRemoveBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameRemoveBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameRemoveBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameRemoveBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameRemoveBuff)
    MergeFrom(*source);
  }
}

void FrameRemoveBuff::MergeFrom(const FrameRemoveBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameRemoveBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_buff_id()) {
      set_has_buff_id();
      buff_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buff_id_);
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
}

void FrameRemoveBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameRemoveBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRemoveBuff::CopyFrom(const FrameRemoveBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameRemoveBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRemoveBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FrameRemoveBuff::Swap(FrameRemoveBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameRemoveBuff::InternalSwap(FrameRemoveBuff* other) {
  buff_id_.Swap(&other->buff_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameRemoveBuff::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameRemoveBuff

// optional uint32 player_id = 1;
bool FrameRemoveBuff::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameRemoveBuff::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameRemoveBuff::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameRemoveBuff::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 FrameRemoveBuff::player_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameRemoveBuff.player_id)
  return player_id_;
}
void FrameRemoveBuff::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameRemoveBuff.player_id)
}

// required string buff_id = 2;
bool FrameRemoveBuff::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameRemoveBuff::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameRemoveBuff::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameRemoveBuff::clear_buff_id() {
  buff_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buff_id();
}
const ::std::string& FrameRemoveBuff::buff_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameRemoveBuff.buff_id)
  return buff_id_.GetNoArena();
}
void FrameRemoveBuff::set_buff_id(const ::std::string& value) {
  set_has_buff_id();
  buff_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FrameRemoveBuff.buff_id)
}
#if LANG_CXX11
void FrameRemoveBuff::set_buff_id(::std::string&& value) {
  set_has_buff_id();
  buff_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.FrameRemoveBuff.buff_id)
}
#endif
void FrameRemoveBuff::set_buff_id(const char* value) {
  set_has_buff_id();
  buff_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FrameRemoveBuff.buff_id)
}
void FrameRemoveBuff::set_buff_id(const char* value, size_t size) {
  set_has_buff_id();
  buff_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FrameRemoveBuff.buff_id)
}
::std::string* FrameRemoveBuff::mutable_buff_id() {
  set_has_buff_id();
  // @@protoc_insertion_point(field_mutable:pb.FrameRemoveBuff.buff_id)
  return buff_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameRemoveBuff::release_buff_id() {
  // @@protoc_insertion_point(field_release:pb.FrameRemoveBuff.buff_id)
  clear_has_buff_id();
  return buff_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameRemoveBuff::set_allocated_buff_id(::std::string* buff_id) {
  if (buff_id != NULL) {
    set_has_buff_id();
  } else {
    clear_has_buff_id();
  }
  buff_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buff_id);
  // @@protoc_insertion_point(field_set_allocated:pb.FrameRemoveBuff.buff_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameSpellState::kPlayerIdFieldNumber;
const int FrameSpellState::kActionIdFieldNumber;
const int FrameSpellState::kStateFieldNumber;
const int FrameSpellState::kCurGenIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameSpellState::FrameSpellState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameSpellState)
}
FrameSpellState::FrameSpellState(const FrameSpellState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action_id()) {
    action_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_id_);
  }
  cur_gen_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cur_gen_id()) {
    cur_gen_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cur_gen_id_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pb.FrameSpellState)
}

void FrameSpellState::SharedCtor() {
  _cached_size_ = 0;
  action_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_gen_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(state_));
}

FrameSpellState::~FrameSpellState() {
  // @@protoc_insertion_point(destructor:pb.FrameSpellState)
  SharedDtor();
}

void FrameSpellState::SharedDtor() {
  action_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_gen_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameSpellState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameSpellState::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[7].descriptor;
}

const FrameSpellState& FrameSpellState::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameSpellState* FrameSpellState::New(::google::protobuf::Arena* arena) const {
  FrameSpellState* n = new FrameSpellState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameSpellState::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameSpellState)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_action_id()) {
      GOOGLE_DCHECK(!action_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*action_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_cur_gen_id()) {
      GOOGLE_DCHECK(!cur_gen_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cur_gen_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameSpellState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameSpellState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string action_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_id().data(), this->action_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.FrameSpellState.action_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string cur_gen_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_gen_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur_gen_id().data(), this->cur_gen_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pb.FrameSpellState.cur_gen_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameSpellState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameSpellState)
  return false;
#undef DO_
}

void FrameSpellState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameSpellState)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required string action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameSpellState.action_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action_id(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required string cur_gen_id = 4;
  if (has_cur_gen_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_gen_id().data(), this->cur_gen_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameSpellState.cur_gen_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cur_gen_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameSpellState)
}

::google::protobuf::uint8* FrameSpellState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameSpellState)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required string action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_id().data(), this->action_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameSpellState.action_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_id(), target);
  }

  // required uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // required string cur_gen_id = 4;
  if (has_cur_gen_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur_gen_id().data(), this->cur_gen_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pb.FrameSpellState.cur_gen_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cur_gen_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameSpellState)
  return target;
}

size_t FrameSpellState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameSpellState)
  size_t total_size = 0;

  if (has_action_id()) {
    // required string action_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_id());
  }

  if (has_cur_gen_id()) {
    // required string cur_gen_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cur_gen_id());
  }

  if (has_player_id()) {
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (has_state()) {
    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  return total_size;
}
size_t FrameSpellState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameSpellState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string action_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action_id());

    // required string cur_gen_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cur_gen_id());

    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());

    // required uint32 state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameSpellState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameSpellState)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSpellState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameSpellState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameSpellState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameSpellState)
    MergeFrom(*source);
  }
}

void FrameSpellState::MergeFrom(const FrameSpellState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameSpellState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_action_id()) {
      set_has_action_id();
      action_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_id_);
    }
    if (from.has_cur_gen_id()) {
      set_has_cur_gen_id();
      cur_gen_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cur_gen_id_);
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void FrameSpellState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameSpellState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSpellState::CopyFrom(const FrameSpellState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameSpellState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSpellState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FrameSpellState::Swap(FrameSpellState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameSpellState::InternalSwap(FrameSpellState* other) {
  action_id_.Swap(&other->action_id_);
  cur_gen_id_.Swap(&other->cur_gen_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameSpellState::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameSpellState

// required uint32 player_id = 1;
bool FrameSpellState::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameSpellState::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameSpellState::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameSpellState::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 FrameSpellState::player_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameSpellState.player_id)
  return player_id_;
}
void FrameSpellState::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameSpellState.player_id)
}

// required string action_id = 2;
bool FrameSpellState::has_action_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameSpellState::set_has_action_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameSpellState::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameSpellState::clear_action_id() {
  action_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_id();
}
const ::std::string& FrameSpellState::action_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameSpellState.action_id)
  return action_id_.GetNoArena();
}
void FrameSpellState::set_action_id(const ::std::string& value) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FrameSpellState.action_id)
}
#if LANG_CXX11
void FrameSpellState::set_action_id(::std::string&& value) {
  set_has_action_id();
  action_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.FrameSpellState.action_id)
}
#endif
void FrameSpellState::set_action_id(const char* value) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FrameSpellState.action_id)
}
void FrameSpellState::set_action_id(const char* value, size_t size) {
  set_has_action_id();
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FrameSpellState.action_id)
}
::std::string* FrameSpellState::mutable_action_id() {
  set_has_action_id();
  // @@protoc_insertion_point(field_mutable:pb.FrameSpellState.action_id)
  return action_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSpellState::release_action_id() {
  // @@protoc_insertion_point(field_release:pb.FrameSpellState.action_id)
  clear_has_action_id();
  return action_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSpellState::set_allocated_action_id(::std::string* action_id) {
  if (action_id != NULL) {
    set_has_action_id();
  } else {
    clear_has_action_id();
  }
  action_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_id);
  // @@protoc_insertion_point(field_set_allocated:pb.FrameSpellState.action_id)
}

// required uint32 state = 3;
bool FrameSpellState::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrameSpellState::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
void FrameSpellState::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrameSpellState::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 FrameSpellState::state() const {
  // @@protoc_insertion_point(field_get:pb.FrameSpellState.state)
  return state_;
}
void FrameSpellState::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameSpellState.state)
}

// required string cur_gen_id = 4;
bool FrameSpellState::has_cur_gen_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameSpellState::set_has_cur_gen_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameSpellState::clear_has_cur_gen_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameSpellState::clear_cur_gen_id() {
  cur_gen_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cur_gen_id();
}
const ::std::string& FrameSpellState::cur_gen_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameSpellState.cur_gen_id)
  return cur_gen_id_.GetNoArena();
}
void FrameSpellState::set_cur_gen_id(const ::std::string& value) {
  set_has_cur_gen_id();
  cur_gen_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.FrameSpellState.cur_gen_id)
}
#if LANG_CXX11
void FrameSpellState::set_cur_gen_id(::std::string&& value) {
  set_has_cur_gen_id();
  cur_gen_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.FrameSpellState.cur_gen_id)
}
#endif
void FrameSpellState::set_cur_gen_id(const char* value) {
  set_has_cur_gen_id();
  cur_gen_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.FrameSpellState.cur_gen_id)
}
void FrameSpellState::set_cur_gen_id(const char* value, size_t size) {
  set_has_cur_gen_id();
  cur_gen_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.FrameSpellState.cur_gen_id)
}
::std::string* FrameSpellState::mutable_cur_gen_id() {
  set_has_cur_gen_id();
  // @@protoc_insertion_point(field_mutable:pb.FrameSpellState.cur_gen_id)
  return cur_gen_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameSpellState::release_cur_gen_id() {
  // @@protoc_insertion_point(field_release:pb.FrameSpellState.cur_gen_id)
  clear_has_cur_gen_id();
  return cur_gen_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameSpellState::set_allocated_cur_gen_id(::std::string* cur_gen_id) {
  if (cur_gen_id != NULL) {
    set_has_cur_gen_id();
  } else {
    clear_has_cur_gen_id();
  }
  cur_gen_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_gen_id);
  // @@protoc_insertion_point(field_set_allocated:pb.FrameSpellState.cur_gen_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameSceneItemCreate::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameSceneItemCreate::FrameSceneItemCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameSceneItemCreate)
}
FrameSceneItemCreate::FrameSceneItemCreate(const FrameSceneItemCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::pb::RoomItem(*from.item_);
  } else {
    item_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pb.FrameSceneItemCreate)
}

void FrameSceneItemCreate::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
}

FrameSceneItemCreate::~FrameSceneItemCreate() {
  // @@protoc_insertion_point(destructor:pb.FrameSceneItemCreate)
  SharedDtor();
}

void FrameSceneItemCreate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete item_;
  }
}

void FrameSceneItemCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameSceneItemCreate::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[8].descriptor;
}

const FrameSceneItemCreate& FrameSceneItemCreate::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameSceneItemCreate* FrameSceneItemCreate::New(::google::protobuf::Arena* arena) const {
  FrameSceneItemCreate* n = new FrameSceneItemCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameSceneItemCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameSceneItemCreate)
  if (has_item()) {
    GOOGLE_DCHECK(item_ != NULL);
    item_->::pb::RoomItem::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameSceneItemCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameSceneItemCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.RoomItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameSceneItemCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameSceneItemCreate)
  return false;
#undef DO_
}

void FrameSceneItemCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameSceneItemCreate)
  // required .pb.RoomItem item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->item_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameSceneItemCreate)
}

::google::protobuf::uint8* FrameSceneItemCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameSceneItemCreate)
  // required .pb.RoomItem item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->item_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameSceneItemCreate)
  return target;
}

size_t FrameSceneItemCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameSceneItemCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .pb.RoomItem item = 1;
  if (has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameSceneItemCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameSceneItemCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSceneItemCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameSceneItemCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameSceneItemCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameSceneItemCreate)
    MergeFrom(*source);
  }
}

void FrameSceneItemCreate::MergeFrom(const FrameSceneItemCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameSceneItemCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    mutable_item()->::pb::RoomItem::MergeFrom(from.item());
  }
}

void FrameSceneItemCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameSceneItemCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSceneItemCreate::CopyFrom(const FrameSceneItemCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameSceneItemCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSceneItemCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  return true;
}

void FrameSceneItemCreate::Swap(FrameSceneItemCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameSceneItemCreate::InternalSwap(FrameSceneItemCreate* other) {
  std::swap(item_, other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameSceneItemCreate::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameSceneItemCreate

// required .pb.RoomItem item = 1;
bool FrameSceneItemCreate::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameSceneItemCreate::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameSceneItemCreate::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameSceneItemCreate::clear_item() {
  if (item_ != NULL) item_->::pb::RoomItem::Clear();
  clear_has_item();
}
const ::pb::RoomItem& FrameSceneItemCreate::item() const {
  // @@protoc_insertion_point(field_get:pb.FrameSceneItemCreate.item)
  return item_ != NULL ? *item_
                         : *::pb::RoomItem::internal_default_instance();
}
::pb::RoomItem* FrameSceneItemCreate::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::pb::RoomItem;
  }
  // @@protoc_insertion_point(field_mutable:pb.FrameSceneItemCreate.item)
  return item_;
}
::pb::RoomItem* FrameSceneItemCreate::release_item() {
  // @@protoc_insertion_point(field_release:pb.FrameSceneItemCreate.item)
  clear_has_item();
  ::pb::RoomItem* temp = item_;
  item_ = NULL;
  return temp;
}
void FrameSceneItemCreate::set_allocated_item(::pb::RoomItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FrameSceneItemCreate.item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameSceneItemRemove::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameSceneItemRemove::FrameSceneItemRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameSceneItemRemove)
}
FrameSceneItemRemove::FrameSceneItemRemove(const FrameSceneItemRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pb.FrameSceneItemRemove)
}

void FrameSceneItemRemove::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

FrameSceneItemRemove::~FrameSceneItemRemove() {
  // @@protoc_insertion_point(destructor:pb.FrameSceneItemRemove)
  SharedDtor();
}

void FrameSceneItemRemove::SharedDtor() {
}

void FrameSceneItemRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameSceneItemRemove::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[9].descriptor;
}

const FrameSceneItemRemove& FrameSceneItemRemove::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameSceneItemRemove* FrameSceneItemRemove::New(::google::protobuf::Arena* arena) const {
  FrameSceneItemRemove* n = new FrameSceneItemRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameSceneItemRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameSceneItemRemove)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameSceneItemRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameSceneItemRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameSceneItemRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameSceneItemRemove)
  return false;
#undef DO_
}

void FrameSceneItemRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameSceneItemRemove)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameSceneItemRemove)
}

::google::protobuf::uint8* FrameSceneItemRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameSceneItemRemove)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameSceneItemRemove)
  return target;
}

size_t FrameSceneItemRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameSceneItemRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameSceneItemRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameSceneItemRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameSceneItemRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameSceneItemRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameSceneItemRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameSceneItemRemove)
    MergeFrom(*source);
  }
}

void FrameSceneItemRemove::MergeFrom(const FrameSceneItemRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameSceneItemRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void FrameSceneItemRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameSceneItemRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameSceneItemRemove::CopyFrom(const FrameSceneItemRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameSceneItemRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameSceneItemRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FrameSceneItemRemove::Swap(FrameSceneItemRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameSceneItemRemove::InternalSwap(FrameSceneItemRemove* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameSceneItemRemove::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameSceneItemRemove

// required uint32 id = 1;
bool FrameSceneItemRemove::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameSceneItemRemove::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameSceneItemRemove::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameSceneItemRemove::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 FrameSceneItemRemove::id() const {
  // @@protoc_insertion_point(field_get:pb.FrameSceneItemRemove.id)
  return id_;
}
void FrameSceneItemRemove::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameSceneItemRemove.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameLevelUp::kPlayerIdFieldNumber;
const int FrameLevelUp::kPlayerLevelFieldNumber;
const int FrameLevelUp::kPlayerSpellPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameLevelUp::FrameLevelUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FrameLevelUp)
}
FrameLevelUp::FrameLevelUp(const FrameLevelUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&player_spell_point_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(player_spell_point_));
  // @@protoc_insertion_point(copy_constructor:pb.FrameLevelUp)
}

void FrameLevelUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&player_spell_point_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(player_spell_point_));
}

FrameLevelUp::~FrameLevelUp() {
  // @@protoc_insertion_point(destructor:pb.FrameLevelUp)
  SharedDtor();
}

void FrameLevelUp::SharedDtor() {
}

void FrameLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameLevelUp::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[10].descriptor;
}

const FrameLevelUp& FrameLevelUp::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameLevelUp* FrameLevelUp::New(::google::protobuf::Arena* arena) const {
  FrameLevelUp* n = new FrameLevelUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FrameLevelUp)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&player_spell_point_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(player_spell_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FrameLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 player_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 player_spell_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_spell_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_spell_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FrameLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FrameLevelUp)
  return false;
#undef DO_
}

void FrameLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FrameLevelUp)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required uint32 player_level = 2;
  if (has_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_level(), output);
  }

  // required uint32 player_spell_point = 3;
  if (has_player_spell_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_spell_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FrameLevelUp)
}

::google::protobuf::uint8* FrameLevelUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FrameLevelUp)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required uint32 player_level = 2;
  if (has_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_level(), target);
  }

  // required uint32 player_spell_point = 3;
  if (has_player_spell_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_spell_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FrameLevelUp)
  return target;
}

size_t FrameLevelUp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FrameLevelUp)
  size_t total_size = 0;

  if (has_player_id()) {
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  if (has_player_level()) {
    // required uint32 player_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_level());
  }

  if (has_player_spell_point()) {
    // required uint32 player_spell_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_spell_point());
  }

  return total_size;
}
size_t FrameLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FrameLevelUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());

    // required uint32 player_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_level());

    // required uint32 player_spell_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_spell_point());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FrameLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameLevelUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameLevelUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FrameLevelUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FrameLevelUp)
    MergeFrom(*source);
  }
}

void FrameLevelUp::MergeFrom(const FrameLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FrameLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_level()) {
      set_player_level(from.player_level());
    }
    if (from.has_player_spell_point()) {
      set_player_spell_point(from.player_spell_point());
    }
  }
}

void FrameLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FrameLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameLevelUp::CopyFrom(const FrameLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FrameLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameLevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FrameLevelUp::Swap(FrameLevelUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameLevelUp::InternalSwap(FrameLevelUp* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(player_level_, other->player_level_);
  std::swap(player_spell_point_, other->player_spell_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameLevelUp::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameLevelUp

// required uint32 player_id = 1;
bool FrameLevelUp::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameLevelUp::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameLevelUp::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameLevelUp::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 FrameLevelUp::player_id() const {
  // @@protoc_insertion_point(field_get:pb.FrameLevelUp.player_id)
  return player_id_;
}
void FrameLevelUp::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameLevelUp.player_id)
}

// required uint32 player_level = 2;
bool FrameLevelUp::has_player_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameLevelUp::set_has_player_level() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameLevelUp::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameLevelUp::clear_player_level() {
  player_level_ = 0u;
  clear_has_player_level();
}
::google::protobuf::uint32 FrameLevelUp::player_level() const {
  // @@protoc_insertion_point(field_get:pb.FrameLevelUp.player_level)
  return player_level_;
}
void FrameLevelUp::set_player_level(::google::protobuf::uint32 value) {
  set_has_player_level();
  player_level_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameLevelUp.player_level)
}

// required uint32 player_spell_point = 3;
bool FrameLevelUp::has_player_spell_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrameLevelUp::set_has_player_spell_point() {
  _has_bits_[0] |= 0x00000004u;
}
void FrameLevelUp::clear_has_player_spell_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrameLevelUp::clear_player_spell_point() {
  player_spell_point_ = 0u;
  clear_has_player_spell_point();
}
::google::protobuf::uint32 FrameLevelUp::player_spell_point() const {
  // @@protoc_insertion_point(field_get:pb.FrameLevelUp.player_spell_point)
  return player_spell_point_;
}
void FrameLevelUp::set_player_spell_point(::google::protobuf::uint32 value) {
  set_has_player_spell_point();
  player_spell_point_ = value;
  // @@protoc_insertion_point(field_set:pb.FrameLevelUp.player_spell_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FramePlayerState::kPlayerIdFieldNumber;
const int FramePlayerState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FramePlayerState::FramePlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FramePlayerState)
}
FramePlayerState::FramePlayerState(const FramePlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::pb::RoomPlayerState(*from.state_);
  } else {
    state_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:pb.FramePlayerState)
}

void FramePlayerState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&state_) + sizeof(player_id_));
}

FramePlayerState::~FramePlayerState() {
  // @@protoc_insertion_point(destructor:pb.FramePlayerState)
  SharedDtor();
}

void FramePlayerState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete state_;
  }
}

void FramePlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FramePlayerState::descriptor() {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[11].descriptor;
}

const FramePlayerState& FramePlayerState::default_instance() {
  protobuf_ns_2froom_5fscene_2eproto::InitDefaults();
  return *internal_default_instance();
}

FramePlayerState* FramePlayerState::New(::google::protobuf::Arena* arena) const {
  FramePlayerState* n = new FramePlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FramePlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.FramePlayerState)
  if (has_state()) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->::pb::RoomPlayerState::Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FramePlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FramePlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pb.RoomPlayerState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FramePlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FramePlayerState)
  return false;
#undef DO_
}

void FramePlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FramePlayerState)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // required .pb.RoomPlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FramePlayerState)
}

::google::protobuf::uint8* FramePlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.FramePlayerState)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // required .pb.RoomPlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->state_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FramePlayerState)
  return target;
}

size_t FramePlayerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.FramePlayerState)
  size_t total_size = 0;

  if (has_state()) {
    // required .pb.RoomPlayerState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  if (has_player_id()) {
    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  return total_size;
}
size_t FramePlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.FramePlayerState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pb.RoomPlayerState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);

    // required uint32 player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FramePlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.FramePlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const FramePlayerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FramePlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.FramePlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.FramePlayerState)
    MergeFrom(*source);
  }
}

void FramePlayerState::MergeFrom(const FramePlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.FramePlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_state()) {
      mutable_state()->::pb::RoomPlayerState::MergeFrom(from.state());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
}

void FramePlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.FramePlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FramePlayerState::CopyFrom(const FramePlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.FramePlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FramePlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void FramePlayerState::Swap(FramePlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FramePlayerState::InternalSwap(FramePlayerState* other) {
  std::swap(state_, other->state_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FramePlayerState::GetMetadata() const {
  protobuf_ns_2froom_5fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ns_2froom_5fscene_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FramePlayerState

// required uint32 player_id = 1;
bool FramePlayerState::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FramePlayerState::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FramePlayerState::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FramePlayerState::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 FramePlayerState::player_id() const {
  // @@protoc_insertion_point(field_get:pb.FramePlayerState.player_id)
  return player_id_;
}
void FramePlayerState::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:pb.FramePlayerState.player_id)
}

// required .pb.RoomPlayerState state = 2;
bool FramePlayerState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FramePlayerState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void FramePlayerState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void FramePlayerState::clear_state() {
  if (state_ != NULL) state_->::pb::RoomPlayerState::Clear();
  clear_has_state();
}
const ::pb::RoomPlayerState& FramePlayerState::state() const {
  // @@protoc_insertion_point(field_get:pb.FramePlayerState.state)
  return state_ != NULL ? *state_
                         : *::pb::RoomPlayerState::internal_default_instance();
}
::pb::RoomPlayerState* FramePlayerState::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::pb::RoomPlayerState;
  }
  // @@protoc_insertion_point(field_mutable:pb.FramePlayerState.state)
  return state_;
}
::pb::RoomPlayerState* FramePlayerState::release_state() {
  // @@protoc_insertion_point(field_release:pb.FramePlayerState.state)
  clear_has_state();
  ::pb::RoomPlayerState* temp = state_;
  state_ = NULL;
  return temp;
}
void FramePlayerState::set_allocated_state(::pb::RoomPlayerState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.FramePlayerState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
