syntax="proto3";
package proto;

enum CHAT_CC{ 
	CC_CROSS_GAME = 5;
	CC_CROSS_CW	  = 8;
	CC_CROSS_LEGION = 10;
	CC_CROSS_CW_DIAMOND = 9;
	CC_WORLD_ARENA	= 11;
}

enum CMD {
	NONE	= 0;
	HEART_BEAT = 1;
	PROTOCOL_STATUS        	  = 2;
	BATTLE_ERROR_NOTI		  = 3;
	TEST = 4;

	LOGIN                   	= 2001 ;// 尝试客户端登陆
	CREATE_PLAYER				= 2002;
	PLAYER_INFO_NOTIFY 			= 2003;
	RANDOM_NAME 				= 2004;
	GET_PLAYER_ONLINE_DATA 		= 2005;
	WEAR_CHANGE_NOTIFY 			= 2006;
	SYSTEM_TIME_NOTIFY 			= 2007;
	ONLINE_SCENE_NOTIFY         = 2008;
	PLAYER_LEVEL_VIP_INFO_NOTIFY = 2009;

	P_T_CHAT_PLAYER_INFO 		= 2010;
	SYSTEM_SETTINGS				 = 2011;
	SYSTEM_SETTINGS_NOTIFY				 = 2012;
	BATTLE_SVR_CLOSE_NOTIFY		= 2013;
	P_T_CHAT_EXTRA_NOTIFY		= 2014;	//额外频道推送
	CLIENT_LOAD_FINISH			= 2015;//客户端加载完毕
	CROSS_CLOSED_NOTIFY			= 2016;
	//================= TEAM ==================
	TEAM_CREATE 			= 2020;  //创建队伍
	TEAM_CREATE_NOTIFY 		= 2021;  //创建队伍通知
	TEAM_LIST 				= 2022;  //获取队伍列表
	TEAM_KICK 				= 2023;  //踢出队伍
	TEAM_KICK_NOTIFY		= 2024;  //踢出队伍通知
	TEAM_ENTER 				= 2025;  //进入队伍
	TEAM_ENTER_NOTIFY		= 2026;  //进入队伍通知
	TEAM_GET_INFO			= 2027;  //获取队伍信息
	TEAM_INFO_NOTIFY 		= 2028;  //队伍信息通知
	TEAM_PANEL_CLOSE 		= 2029;  //关闭面板
	TEAM_LEAVE				= 2030;  //离开队伍
	TEAM_LEAVE_NOTIFY		= 2031;  //离开队伍通知
	TEAM_SETTING			= 2032;  //队伍设置
	TEAM_REPLY              = 2033;  //队伍申请应答
	TEAM_REPLY_NOTIFY       = 2034;  //队伍申请应答通知
	TEAM_COUNT_CHANGE_NOTIFY = 2035; //队伍成员数量变化通知
	TEAM_AUTO				= 2036;  //快速加入
	TEAM_MEMBER_SYN_NOTIFY	= 2037;  //队伍成员同步通知
	TEAM_INVITED_NOTIFY		= 2038;  //邀请通知
	TEAM_MEM_INFO_NOTIFY	= 2039;

	// 后面实现TODO
	TEAM_READY 				= 2040;
	TEAM_PWD 				= 2041;
	TEAM_CHANGEHERO 		= 2042;
	TEAM_START 				= 2043;
	TEAM_BU_ZHEN 			= 2044;
	TEAM_BUZHEN_NOTIFY 		= 2045;
	
	TEAM_DISMISS			= 2046;
	TEAM_DISMISS_NOTIFY		= 2047;
	TEAM_STOP				= 2048;
	TEAM_STOP_NOTIFY		= 2049;
	TEAM_CHANGE_NAME		= 2054;
	TEAM_START_NOTIFY		= 2055;
	//================= TEAM  END ==================

	BATTLE_ACTION_NOTIFY = 2050;
	BATTLE_MANUAL = 2051;
	BATTLE_TEST = 2052;
	BATTLE_TEST_START_NOTIFY = 2053;
	
	GUAJI_PLAY_START = 2060;
	
	//腾讯接口
	QQ_ADDGOODS = 2100;
	QQ_NEW_GIFT = 2101;
	QQ_DAY_NORMAL_GIFT = 2102;
	QQ_DAY_HIGH_GIFT = 2103;
	QQ_LEVEL_GIFT = 2104;
	QQ_GIFT_INFO = 2105;
	QQ_GET_TOKEN = 2106;
	QQ_Gift_GET = 2107;
	QQ_DAY_INVITE_INFO = 2108;
	QQ_DAY_INVITE_REWARD = 2109;
	QQ_DAY_INVITE_SUCCESS = 2110;
	QQ_LOGIN_GIFT = 2111;
	QQ_REGISTER_NEW_SERVER = 2112;
	
	VPLAN_INFO = 2150;
	VPLAN_DAY = 2151;
	VPLAN_LEVEL = 2152;
	VPLAN_CONSUME = 2153;
	VPLAN_TITLE = 2154;
	V360_GIFT_ACTIVE = 2155;
	
	ZILLIONAIRE_RUN = 2170;
	ZILLIONAIRE_SPEC_RUN = 2171;
	ZILLIONAIRE_BUY_COUNT = 2172;
	ZILLIONAIRE_GUESS_NUM = 2173;
	ZILLIONAIRE_OPEN_BOX = 2174;
	ZILLIONAIRE_GUESS_FIGURE = 2175;
	ZILLIONAIRE_FIGHT_START = 2176;
	ZILLIONAIRE_FIGHT_END = 2177;
	ZILLIONAIRE_GAME_GETSTAR = 2178;
	ZILLIONAIRE_RANK = 2179;
	ZILLIONAIRE_INFO = 2180;
	ZILLIONAIRE_SCORE_CHANGE_NOTIFY = 2181;
	ZILLIONAIRE_DIAMOND_PASS = 2182;
	ZILLIONAIRE_QUIT = 2183;
	ZILLIONAIRE_SCORE_INFO = 2184;
	ZILLIONAIRE_SCORE_REWARD = 2185;
	ZILLIONAIRE_RUN_ONEROUND = 2186;	
	
	TOWER_INFO = 2190;
	TOWER_RANK = 2191;
	TOWER_JUMP = 2192;
	TOWER_SCORE_REWARD = 2193;
	TOWER_RANK_REWARD = 2194;
	TOWER_BUY = 2195;
	
	BEJEWELED_INFO = 2200;
	BEJEWELED_MOVE = 2201;
	BEJEWELED_ONE_SHOT = 2202;
	BEJEWELED_RANK = 2203;
	BEJEWELED_SCORE_REWARD =  2204;
	BEJEWELED_RANK_REWARD =  2205;
	BEJEWELED_BUY =  2206;
	BEJEWELED_BUY_ENERGY =  2207;
	
	FAZHEN_INFO = 2220; //法阵信息 
	FAZHEN_CHG_HERO = 2221; //法阵上将
	FAZHEN_UPGRADE = 2222; //法阵升级

	// add by leiyh from 4000~4999
	//leiyh begin
	
	FUNCTION_OPEN_TIME_NOTIFY = 4101;	//功能开启时间推送
	FUNCTION_TIMES_NOTIFY =	4102;		//功能次数推送

	//背包
	NORMAL_BAG = 4010;		//获取背包信息
	EQUIP_BAG = 4020;		//获取装备背包信息
	BAG_ITEM_SELL = 4021;   //卖出背包物品
	BAG_ITEM_USE = 4022;	//使用背包物品
	SHOW_ITEM = 4023;		//展示物品
	
	//竞技场（天梯）
	ARENA_INFO				= 4030;	//获取竞技场信息
	ARENA_CHALLENGE 		= 4031;	//挑战玩家
	ARENA_CLEAR_CD 			= 4032;	//清除Cd
	ARENA_CLEAR_CD_DIAMOND 	= 4033;	//获取清除Cd所需钻石
	ARENA_BUY_TIMES 		= 4034;	//购买挑战次数
	ARENA_SET_MANIFESTO 	= 4035;	//设置竞技宣言
	ARENA_CHANGE_ENEMY 		= 4036;	//更换对手
	ARENA_GET_RANK_REWARD 	= 4037;	//获取排名奖励
	ARENA_GET_RANK_LIST		= 4038;	//获取排行榜
	ARENA_REPORT_INFO		= 4039;	//获取战报
	ARENA_MULTI_CHALLENGE	= 4040;
	ARENA_LEAVE				= 4041;	//离开竞技场
	ARENA_REPORT_NOTIFY		= 4042;	//战报推送
	
	//争霸赛
	COMPETE_INFO				= 4050;	//获取争霸赛信息
	COMPETE_PLAYER_DISPLAY		= 4051;	//参赛角色显示
	COMPETE_STAGE_INFO			= 4052;	//擂台信息
	COMPETE_GROUP_STAGE_INFO	= 4053;	//获取页签所有擂台信息
	COMPETE_STATUS_TIME_NOTIFY	= 4054;	//推送status与time
	COMPETE_GAMBLE_INFO			= 4055;	//我的下注
	COMPETE_GAMBLE				= 4056;	//下注
	COMPETE_GAMBLE_REWARD		= 4057;	//领取下注奖励
	COMPETE_GAMBLE_REWARD_NOTIFY = 4058; //可领奖通知
	COMPETE_PLAYER_RANK_INFO	 = 4059; //玩家战绩信息
	COMPETE_GET_RANK_REWARD		= 4060;	//获取排名奖励
	COMPETE_OPEN_TIME			= 4061;	//争霸赛开启时间
	
	//七日活动
	SEVEN_DAY_INFO			= 4070;	//获取7日活动信息
	SEVEN_DAY_GET_REWARD 	= 4071;	//获取7日活动奖励
	SEVEN_DAY_NOTIFY		= 4072;	//7日活动可领取推送
	SEVEN_DAY_TIME_STAMP	= 4073;	//7日活动时间戳
	SEVEN_DAY_SHOP_SELL_OUT_NOTIFY		= 4074;		//商品卖光通知
	SEVEN_DAY_AVAI_NUM		= 4075;	//7日活动可行活动Num
	SEVEN_DAY_BIG_TASK_BUY  = 4076;
	
	//第一次进游戏
	PLAYER_FIRST_BATTLE					= 4080;		//玩家第一次进入游戏 第一场战斗
	
	//跨服战场
	BG_INFO					= 4200;	//基本信息
	BG_TEAM_INFO			= 4201;	//队伍信息
	BG_TEAM_NEW_MEM_NOTIFY 	= 4202;	//新队员Notify			
	BG_TEAM_MEM_INFO_NOTIFY	= 4203;	//所有队员信息
	BG_REG					= 4204;	//单人 排队请求
	BG_REG_NOTIFY			= 4205;	//开始排队 状态推送
	BG_LEAVE				= 4206;	//离开战场 排队 or 战斗阶段
	BG_LEAVE_NOTIFY			= 4207;	//排队过程中 离开通知
	BG_BTL_LEAVE_NOTIFY		= 4208;	//离开战场通知
	BG_START_NOTIFY			= 4209; //战场开始 Notify
	BG_ENTER				= 4210;	//接受: 拒绝 进入战场
	BG_CHECK				= 4211;	//检查: 玩家是否在战场
	BG_TEAM_DISMISS_NOTIFY	= 4212;	//队伍解散Notify
	BG_TIMEOUT_LEAVE_NOTIFY = 4213;	//超时(60)分钟 离开队列Notify
	BG_FRIENDS_LIST			= 4214;	//朋友列表
	BG_FAMILY_MEMBER_LIST	= 4215;	//公会成员列表
	BG_FIGHT 				= 4216;	//发起战斗
	BG_FIGHT_NOTIFY			= 4217;	//战斗结算
	BG_GATHER				= 4218;	//采集
	BG_GATHER_NOTIFY		= 4219;	//采集Notify
	BG_STAGE_ENTER_NOTIFY	= 4220;	//加入后场景信息推送
	BG_STAGE_NEW_ENTER_NOTIFY = 4221;	//新加入者推送
	BG_DEAD_NOTIFY			= 4222;		//死亡Notify
	BG_REBORN_NOTIFY		= 4223;		//复活Notify
	BG_PLAYER_STATUS_NOTIFY	= 4224;		//玩家状态
	BG_SCENE_MOVE			= 4225;		//战场移动
	BG_SCENE_MOVE_NOTIFY	= 4226;		//战场移动Notify
	BG_RES_STATUS_NOTIFY	= 4227;		//资源状态推送
	BG_STAGE_GET_REPORT				= 4228;	//战场内战报
	BG_CRY_STAGE_INFO_NOTIFY	= 4229;		//水晶资源站 信息推送
	BG_STAGE_END_NOTIFY			= 4230;		//战场胜利推送
	BG_STAGE_LEAVE			= 4231;	//离开战场
	BG_STAGE_LEAVE_NOTIFY	= 4232;	//离开战场Notify
	BG_GATHER_STATUS_NOTIFY	= 4233;	//挖矿状态Notify
	BG_GET_TITLE_REWARD		= 4234;	//领取排位奖励
	BG_GET_TITLE_REWARD_INFO = 4235;	//获取排位奖励情况
	BG_GET_RANK_INFO		= 4236;	//获取排名信息
	BG_FIRE_STAGE_INFO_NOTIFY	= 4237;	//烈焰焦土 信息推送
	BG_PLACE_FLAG_NOTIFY		= 4238;	//放置战旗Notify
	BG_FIGHT_NPC			= 4239;	//战场 攻击NPC
	BG_FIGHT_NPC_NOTIFY		= 4240;	//战场 攻击NPC Notify
	
	CROSS_SCENE_MOVE		= 4300;	//跨服场景移动
	CROSS_SCENE_MOVE_NOTIFY	= 4301;	//场景移动通知
	CARD_INFO_NOTIFY		= 4302;	//使用卡片信息推送
	
	//跨服个人竞技
	
	CROSS_ARENA_INFO				= 4310;	//跨服个人竞技 海选/决赛 基本信息
	CROSS_ARENA_FIGHT				= 4311;	//跨服个人竞技 海选 战斗
	CROSS_ARENA_CHANGE_ENEMY		= 4313;	//跨服个人竞技 海选 更换对手
	CROSS_ARENA_BOX_STATUS_NOTIFY 	= 4314;	//跨服个人竞技 海选 宝箱状态推送
	CROSS_ARENA_RANK_INFO			= 4315;	//跨服个人竞技 海选/决赛 排行榜
	CROSS_ARENA_SOME_DATA_NOTIFY 	= 4316;	//跨服个人竞技 海选/决赛 数据推送	
	CROSS_ARENA_GET_LAYER_BOX		= 4317;	//跨服个人竞技 海选 宝箱信息
	CROSS_ARENA_CHEER_INFO			= 4318;	//跨服个人竞技 决赛 助威面板信息
	CROSS_ARENA_CHEER				= 4319;	//跨服个人竞技 决赛 助威
	CROSS_ARENA_FINAL_FIGHT			= 4320;	//跨服个人竞技 决赛 战斗
	CROSS_ARENA_GET_REPORT			= 4321;	//跨服个人竞技 决赛 战报(跨服/个人)
	CROSS_ARENA_DIST_CHEER			= 4322;	//跨服个人竞技 决赛 区助威请求
	CROSS_ARENA_HONOR_HALL			= 4323;	//跨服个人竞技 荣誉殿堂
	CROSS_ARENA_UPDATE_FINAL_ENEMY	= 4324;	//跨服个人竞技 决赛 刷新对手	
	
	FAMILY_EXPE_INFO				= 4350;	//跨服远征 基本信息
	FAMILY_EXPE_START				= 4351;	//跨服远征 开启
	FAMILY_EXPE_START_NOTIFY		= 4352;	//跨服远征 开启Notify
	FAMILY_EXPE_CHALLENGE_INFO		= 4353;	//跨服远征 可挑战公会信息
	FAMILY_EXPE_FIGHT_START			= 4354;	//跨服远征 开始挑战玩家
	FAMILY_EXPE_FIGHT_END			= 4355;	//跨服远征 结束挑战玩家
	FAMILY_EXPE_SURRENDER			= 4356;	//跨服远征 投降
	FAMILY_EXPE_FIGHT				= 4358;	//跨服远征 战斗
	FAMILY_EXPE_GET_CON_RANK		= 4359;	//跨服远征 拉取玩家贡献排名
	FAMILY_EXPE_END_NOTIFY			= 4360;	//跨服远征 结束通知
	FAMILY_EXPE_RECEIVE_TASK		= 4361;	//跨服远征 接收任务
	FAMILY_EXPE_TASK_NOTIFY			= 4362;	//跨服远征 任务通知 
	FAMILY_EXPE_CROSS_RANK			= 4363;	//跨服远征 跨服排名
	FAMILY_EXPE_FAMILY_PLAYER_RANK  = 4365;	//跨服远征 公会内排名
	FAMILY_EXPE_SINGLE_RANK         = 4366; //跨服远征 个人排名
	FAMILY_EXPE_BATTLE_INFO			= 4364;	//跨服远征 战况信息
	FAMILY_EXPE_LAST_CHAMPION		= 4367;	//跨服远征 上届排名
	FAMILY_EXPE_CHAMPION_THRONE		= 4368;	//跨服远征 冠军王座
	FAMILY_EXPE_BATTLE_REPORT       = 4369;	//跨服远征 战报信息
	FAMILY_EXPE_DATA_NOTIFY			= 4370;	//跨服远征 次数通知
	//注意: 41xx不可用
	
	CUSTOM_TEST = 4444;
	
	//leiyh end

	//**************************************************************************
	//add by dongming from 7000~7999
	
	//幸运树
	LUCK_TREE_INFO									= 7457;//拉面板信息
	LUCK_TREE_CHEER									= 7458;//祈福
	LUCK_TREE_BUY									= 7459;//商店购买东西
	LUCK_TREE_GET_REWARD							= 7460;//个人积分和世界树领奖
	LUCK_TREE_WORLD_EXP_NOTIFY						= 7461;//世界树信息通知
	LUCK_TREE_DAJIANG_NOTIFY						= 7462;//大奖等信息通知
	
	//转盘
	ZHUAN_PAN_INFO									= 7450;
	ZHUAN_PAN_COMMON								= 7451;
	ZHUAN_PAN_SUPER									= 7452;
	ZHUAN_PAN_BUY									= 7453;
	ZHUAN_PAN_GET_STATIC							= 7454;
	ZHUAN_PAN_RANK_DATA								= 7455;//拉积分排行信息
	ZHUAN_PAN_DAJIANG								= 7456;
	
	
	//抽将系统
	LOTTERY_INFO 									= 4000;	//获取抽将信息
	LOTTERY_GET_REWARD								= 7200;
	LOTTERY											= 4001;	//抽将
	LOTTERY_SUPERRAND 								= 3000;	//至尊抽将
	LOTTERY_TEST 									= 3001;
	LOTTERY_ADDITEM_TEST 							= 3002;	
	
	//玩家移动
	PLAYER_MOVE										= 7000;
	PLAYER_MOVE_NOTIFY								= 7001;
	
	//资源副本
	PLAYER_BOSS_ZHAO_HUAN							= 7090;
	PLAYER_BOSS_ZHAO_HUAN_FREE_TIME 				= 7091;
	PLAYER_RES_STAGE_FIGHT_END						= 7005;
	
	//军衔升级
	PLAYER_MILITARYRANK_UPGRADE						= 7012;
	PLAYER_MILITARYRANK_INFO						= 7017;
	
	//好友系统
	PLAYER_FRIEND_SEARCH							= 7013;
	PLAYER_FRIEND_RECOMMEND							= 7014;
	PLAYER_FRIEND_QIE_CHUO							= 7015;
	PLAYER_FRIEND_NEXT								= 7016;
	PLAYER_FRIEND_APPLY								= 7024;//发起好友请求
	PLAYER_FRIEND_APPLY_NOTIFY						= 7020;//通知前端有好友请求
	PLAYER_DELETE_FRIEND							= 7036;
	PLAYER_DELETE_FRIEND_NOTIFY						= 7037;
	PLAYER_ADD_TO_HEI_MING_DAN						= 7038;
	PLAYER_REMOVE_HEI_MING_DAN						= 7039;
	PLAYER_FRIENDS_INFO								= 7048;//用于获取玩家自己的好友
	PLAYER_ALL_INFO									= 7050;
	PLAYER_SEE_FRIEND_INFO							= 7055;
	PLAYER_CLEAR_ALL_INFO							= 7054;
	PLAYER_ONLINE_NOTIFY							= 7051;//好友上线通知--通知他人
	PLAYER_OFFLINE_NOTIFY							= 7052;//好友下线通知--通知他人
	PLAYER_APPLY_AGREE_PI_LIANG						= 7056;//批量同意
	PLAYER_APPLY_REFUSE_PI_LIANG					= 7058;//批量拒绝
	PLAYER_APPLY_AGREE								= 7063;//好友请求通过
	PLAYER_APPLY_AGREE_NOTIFY						= 7062;
	PLAYER_APPLY_REFUSE								= 7064;//好友请求被拒
	PLAYER_APPLY_REFUSE_NOTIFY						= 7065;//好友请求通过通知
	PLAYER_FRIEND_CHAT								= 7066;
	PLAYER_FRIEND_CHAT_NOTIFY						= 7067;
	PLAYER_APPLY_PI_LIANG							= 7068;//批量添加
	FRIEND_CONGRATULATE								= 7069;//好友祝贺
	FRIEND_CONGRATULATE_ALL							= 7309;
	FRIEND_CONGRATULATE_NOTIFY						= 7300;
	FRIEND_TRENDS									= 7301;//好友动态
	FRIEND_DONATE_STAMINA							= 7302;
	FRIEND_DONATE_STAMINA_NOTIFY					= 7303;
	FRIEND_SIGNATURE								= 7304;
	FRIEND_SIGNATURE_NOTIFY							= 7305;
	FRIEND_STAMINA_GET 								= 7306;
	FRIEND_STAMINA_GET_ALL							= 7307;
	FRIEND_DONATE_STAMINA_ALL						= 7308;
	FRIEND_TREND_NOTIFY								= 7310;
	FRIEND_DAILY_INFO_CLEAR_NOTIFY					= 7311;
	FRIEND_STAMINA_INFO								= 7312;
 
	//坐骑系统
	PLAYER_ACTIVATE_SADDLE_HORSE					= 7070;
	PLAYER_USE_SADDLE_HORSE							= 7071;
	PLAYER_UNUSE_SADDLE_HORSE						= 7072;
	PLAYER_CHANGE_SADDLE_HORSE						= 7073;
	PLAYER_CHANGE_GLORY								= 7075;
	PLAYER_GET_SADDLE_HORSES						= 7077;
	PLAYER_GET_GLORIES								= 7079;
	PLAYER_GET_CURRENT_GLORY						= 7081;
	PLAYER_GET_CURRENT_SADDLE_HORSE					= 7083;
	PLAYER_SADDLE_HORSE_YAN_JIU						= 7085;
	PLAYER_SADDLE_HORSE_YAN_JIU_ONE_KEY				= 7087;
	PLAYER_SADDLE_HORSE_UPGRADE						= 7088;
	SADDLE_HORSE_NOTIFY								= 7089;
	HORSE_SHENGJIE									= 7092;
	HORSE_PROTECT									= 7093;
	HORSE_OPEN_PROTECT								= 7094;
	HORSE_INFO_NOTIFY								= 7095;
	HORSE_EQUIP_CHANGE							    = 7096;
	HORSE_EQUIP_STRENGTH			  				= 7097;
	HORSE_EQUIP_TUPO			  					= 7098;
	HORSE_GET_PROTECT_INFO							= 7099;
	HORSE_REBORN									= 7100;

	
	//工会BOSS
	FAMILY_BOSS_INFO								= 7170;//界面相关的信息
	FAMILY_BOSS_SET_NEXT_START_TIME					= 7171;//鼓舞
	FAMILY_BOSS_BUY_GULI							= 7172;//
	FAMILY_BOSS_HURT_INFO							= 7173;//设置模式
	FAMILY_BOSS_MODEL_SET							= 7174;//
	FAMILY_BOSS_RELIVE								= 7175;// 
	FAMILY_BOSS_JOIN_FIGHT_START					= 7176;
	FAMILY_BOSS_JOIN_FIGHT_END						= 7177;
	FAMILY_BOSS_MEMBER_RELIVE_NOTIFY				= 7178;//玩家复活通知
	FAMILY_BOSS_MEMBER_DEAD_NOTIFY					= 7179;//玩家死亡通知
	FAMILY_BOSS_NEXT_START_TIME_NOTIFY				= 7180;//返回下一个周期的活动开始时间
	FAMILY_BOSS_START_EVENT_NOTIFY					= 7181;//新状态通知
	FAMILY_BOSS_TOP_RANK_NOTIFY						= 7182;//伤害排行更新
	FAMILY_BOSS_NEXT_WAVE_NOTIFY					= 7183;//用于返回新刷出的怪物的信息
	FAMILY_BOSS_INFO_NOTIFY			 				= 7184;//用于返回复活怪物的信息
	FAMILY_BOSS_BOSS_RELIVE_NOTIFY					= 7185;//BOSS复活
	FAMILY_BOSS_BOSS_BUFF_NOTIFY					= 7186;//BOSS获得BUFF
	FAMILY_BOSS_HURT_REWARD							= 7187;//BOSS累计伤害奖励
	FAMILY_BOSS_QUICK_FIGHT_START					= 7188;//快速战斗
	FAMILY_BOSS_SUPPER_RANK							= 7189;//荣耀殿堂
	
	//世界BOSS
	WORLD_BOSS_INFO									= 7500;//界面相关的信息
	WORLD_BOSS_HURT_INFO							= 7503;//设置模式
	WORLD_BOSS_MEMBER_RELIVE_NOTIFY					= 7508;//玩家复活通知
	WORLD_BOSS_MEMBER_DEAD_NOTIFY					= 7509;//玩家死亡通知
	WORLD_BOSS_START_EVENT_NOTIFY					= 7511;//新状态通知
	WORLD_BOSS_TOP_RANK_NOTIFY						= 7512;//伤害排行更新
	WORLD_BOSS_NEXT_WAVE_NOTIFY						= 7513;//用于返回新刷出的怪物的信息
	WORLD_BOSS_HURT_REWARD							= 7517;//BOSS累计伤害奖励
	WORLD_BOSS_QUICK_FIGHT_START					= 7518;//快速战斗
	WORLD_BOSS_INFO_NOTIFY			 				= 7514;//用于返回复活怪物的信息
	WORLD_BOSS_JOIN_FIGHT_START						= 7515;
	WORLD_BOSS_MODEL_SET							= 7516;//
	//WORLD_BOSS_BOSS_RELIVE_NOTIFY					= 7515;//BOSS复活
	//WORLD_BOSS_BOSS_BUFF_NOTIFY					= 7516;//BOSS获得BUFF
	//WORLD_BOSS_NEXT_START_TIME_NOTIFY				= 7510;//返回下一个周期的活动开始时间
	
	//工会副本
	FAMILY_STAGE_CHAPTER_SELECT						= 7144;
	FAMILY_STAGE_GET_REWARD							= 7145;
	FAMILY_STAGE_CHAPTER_SELECT_NOTIFY				= 7146;
	FAMILY_STAGE_GET_REWARD_NOTIFY					= 7147;
	FAMILY_STAGE_REWARD_INFO						= 7148;
	FAMILY_STAGE_RECORD								= 7149;
	FAMILY_STAGE_ENTER_CHAPTER						= 7150;
	FAMILY_STAGE_FIGHT_START						= 7151;
	FAMILY_STAGE_FIGHT_END							= 7152;
	FAMILY_STAGE_YU_KOU_START						= 7153;
	FAMILY_STAGE_YU_KOU_END							= 7154;
	FAMILY_STAGE_HURT_RANK							= 7155;
	FAMILY_STAGE_HPS_NOTIFY							= 7156;
	FAMILY_STAGE_RESET_NOTIFY						= 7157;
	FAMILY_STAGE_FIGHT_START_NOTIFY					= 7158;
	FAMILY_STAGE_FIGHT_END_NOTIFY					= 7159;
	FAMILY_STAGE_NODE_RANK							= 7160;
	FAMILY_STAGE_BUY_TIMES							= 7161;
	FAMILY_STAGE_TIMES_NOTIFY						= 7162;
	FAMILY_STAGE_YU_KOU_SAO_DANG					= 7163;
	
	//英雄试炼
	HERO_PRACTICE_INFO								= 7201;
	HERO_PRACTICE_ENTER_NODE						= 7202;
	HERO_PRACTICE_FIGHT_START						= 7203;
	HERO_PRACTICE_FIGHT_END							= 7204;
	HERO_PRACTICE_TIMES_NOTIFY						= 7205;
	HERO_PRACTICE_RESET_NOTIFY    					= 7206;
	HERO_PRACTICE_SAO_DANG							= 7207;
	
	//手机微信认证
	MOBILE_CHECK_GET_CODE							= 7320;
	MOBILE_CHECK									= 7321;
	MOBILE_CHECK_GET_REWARD							= 7322;
	
	WEIXIN_GET_REWARD_NOTIFY						= 7323;//表示可以领取奖励了
	WEIXIN_GET_REWARD								= 7324;
	
	//公会科技
	FAMILY_TECH_INFO								= 7401;
	FAMILY_TECH_RESEARCH							= 7402;
	FAMILY_TECH_STUDY								= 7403;
	FAMILY_TECH_RESEARCH_NOTIFY						= 7404;
	
	//激活码
	ACTIVATE_CODE									= 7405;			
	
	//限时优惠
	SUPER_SALE_INFO									= 7410;
	SUPER_SALE_GET_REWARD							= 7411;
	SUPER_SALE_BUY_ITEM								= 7412;
	SUPER_SALE_ALL_COUNT_NOTIFY						= 7413;
	SUPER_SALE_RECHARGE_EXTRA_REWARD_NOTIFY			= 7414;
	SUPER_SALE_RESET_NOTIFY							= 7421;
	SUPER_SALE_REFRESH								= 7409;
	
	//开服基金
	OPEN_FUND_INFO									= 7415;
	OPEN_FUND_BUY_FUND								= 7416;
	OPEN_FUND_GET_FUND_REWARD						= 7417;
	OPEN_FUND_GET_WELFARE							= 7418;
	OPEN_FUND_WELFARE_NOTIFY						= 7419;
	
	//360特权
	PRIVILEGE_WEI_SHI_CHECK							= 7420;
	PRIVILEGE_WEI_SHI_JIASU							= 7441;
	PRIVILEGE_WEI_SHI_JIASU_NOTIFY					= 7442;
	PRIVILEGE_WEI_SHI_INFO							= 7443;
	
	//搜狗领奖
	SOUGOU_GET_REWARD								= 7423;
	SOUGOU_INPUT_GET_REWARD							= 7422;
	
	//多玩新手卡
	DUOWAN_NEWER_CARD								= 7424;
	
	//顺玩领奖
	SHUN_WANG_GET_REWARD							= 7434;
	
	FUNCTION_ACTION_NOTIFY							= 7425;

	//神格
	SHEN_GRID_INFO									= 7426;//拉面板信息
	SHEN_GRID_CLICK									= 7427;//点击选择
	SHEN_GRID_CHOOSE								= 7428;//镶嵌星核
	
	//觉醒之路
	JUE_ROAD_INFO									= 7429;//拉面板信息
	JUE_ROAD_FIGHT_START							= 7430;//战斗开始
	JUE_ROAD_FIGHT_END								= 7431;//战斗结束
	JUE_ROAD_SAO_DANG								= 7432;//扫荡
	JUE_ROAD_GET_REWARD								= 7433;//领奖 -- 宝箱
	JUE_ROAD_RECORD									= 7438;//点击节点时的请求
	
	//开服冲级大赛
	OPEN_CHALLENGE_INFO								= 7436;
	OPEN_CHALLENGE_GET_REWARD						= 7435;
	OPEN_CHALLENGE_NOTIFY							= 7437;//领奖通知
	
	//迅雷金钻VIP
	XUNLEI_JINZUAN_GET_REWARD						= 7439;
	XUNLEI_JINZUAN_INFO_NOTIFY						= 7440;
	
	//女神理财
	
	VIP_FINANCE_PLAN_INFO						= 7590;
	VIP_FINANCE_PLAN_BUY						= 7591;
	VIP_FINANCE_PLAN_GET_REWARD					= 7592;
	
	//QQ每周礼包
	QQ_WEEK_NORMAL_GIFT_GET							= 7603;
	
	//**************************************************************************
	//add by gailun  6000~6999
	
	//场景分线
	CHANGE_CITY_SCENE_LINE	= 6050;
	SHOW_LINE_STATE = 6051;
	SHOW_LINE_NUMBER = 6052;
	
	//聊天	
	PUBLIC_TALK						= 6001;
	PRIVATE_TALK					= 6002;
	EVENT_NOTIFY					= 6003;
	PUBLIC_TALK_MULTI				= 6004;
//	CROSS_TALK						= 6005;	//跨服聊天
//	CROSS_TALK_MULTI				= 6006;	//跨服聊天 多推
	
	//shenyuan
	GET_SHEN_YUAN_INFO				= 6073;
	SHEN_YUAN_GET_MYSTERI_BOX		= 6075;
	SHEN_YUAN_TONG_GUAN				= 6076;	
	SHEN_YUAN_REQUEST_FRIEND		= 6077;
	FIGHT_SHEN_YUAN_START			= 6078;
	FIGHT_SHEN_YUAN_END				= 6079;
	GOU_MAI_SHEN_YUAN_BUFF			= 6080;
	SHEN_YUAN_PAI_MING				= 6081;
	SHEN_YUAN_BUY_BUFF				= 6083;
	SHEN_YUAN_CONTINUE_CHANLLENGE	= 6084;
	SHEN_YUAN_RANK_REWARD		= 6085;
	SHEN_YUAN_RECEIVE_BOX		= 6086;
	SHEN_YUAN_STOP_FIGHT		= 6087;
	SHEN_YUAN_GET_LUCKY_BOX		= 6088;

	//关卡首杀
	STAGE_BTL_GUIDE					= 6068;
	
	//运镖
	GET_YUN_BIAO_STATE				= 6136;	
	GET_YUN_BIAO_TEAM_INFO		    = 6137;
	GET_YUN_BIAO_FLY_INFO			= 6138;	
	SHOW_YUN_BIAO_DA_JIE_INFO		= 6146;
	YUN_BIAO_DA_JIE					= 6147;	
	REFRESH_YUN_BIAO_SHIP_QUALITY	= 6148;
	
	//排行
	ABILITY_RANK						= 6210;
	AREA_RANK						= 6211;
	FAMILY_RANK					= 6212;
	LEVEL_RANK						= 6213;		
	STAGE_STAR_RANK					= 6214;
	RANK_SEARCH_NAME				= 6215;
	
	//签到信息
	GET_SIGN_IN_INFO				= 6300;
	SIGN_IN							= 6301;
	CAN_SIGN_IN						= 6302;
	SIGN_IN_AWARD					= 6303;
	
	//vip
	GET_VIP_INFO					= 6401;
	GET_CHARGE_INFO					= 6402;
	GET_VIP_REWARD_INFO				= 6403;
	VIP_RECEIVE_CHARGE_REWARD		= 6404;
	VIP_GET_FIRST_CHARGE			= 6405;
	VIP_GET_FIRST_CHARGE_REWARD	    = 6406;
	
	WEB_SAVE						= 6501;
	CLIENT_DOWNLOAD					= 6502;
	
	VIP_MONTH_CARD					= 6505;
	
	//Open Module 
	OPEN_MODULE						= 6601;

	//装备升星
	EQUIP_ADD_STAR					= 6602;
	//微端登陆礼包
	WEI_DUAN_GET_REWARD				= 6603;
	//称号系统
	ACTIVE_TITLE					= 6701;
	TITLE_PANEL						= 6702;
	TITLE_CHANGE_NOTIFY				= 6703;
	WEAR_TITLE						= 6704;
	WEAR_OUT_TITLE					= 6705;
	
	//十四日活动
	FOURTEEN_DAY_NOTIFY				= 6230;
	FOURTEEN_INFO					= 6231;
	FOURTEEN_DAY_GET_REWARD			= 6232;
	FOURTEEN_DAY_SHOP_BUY_TIMES		= 6234; 
	FOURTEEN_DAY_OPEN_SUPER_SHOP	= 6235;

//////情人节活动
	VALENTINE_SEND_FLOWER			= 6240;
	VALENTINE_SHOP					= 6241;
	VALENTINE_SHOP_INFO				= 6252;
//元宵节活动
	LANTERN_SHOP					= 6257;
	LANTERN_SHOP_INFO				= 6258;

//春节活动 
	SPRING_LOGIN_INFO				= 6242;
	SPRING_WELCOME_GOD_INFO			= 6243;
	SPRING_GET_GOD_REWARD			= 6244;
	SPRING_WELFARE_INFO				= 6245;
	SPRING_FIRE_CRACKER				= 6247;
	SPRING_GET_WELFARE_REWARD		= 6248;
	SPRING_LOGIN 					= 6249;
	SPRING_FIGHT_BOSS_START			= 6250;
	SPRING_FIGHT_BOSS_END			= 6251;
	SPRING_BEAT_BOSS_NUM			= 6253;//攻打boss次数
	SPRING_GET_BEAT_BOSS_RANK_REWARD 	= 6254;//领取排行奖励
	SPRING_BEAT_BOSS_LAST_RANK      = 6255;//昨日排行界面
	SPRING_BEAT_BOSS_RANK_LIST		= 6246;//实时排行
	SPRING_BOSS_STOP_FIGHT			= 6256; 
	
	GODDESS_VOTE_PANEL				= 6259;
	GODDESS_VOTE 					= 6260;
	GODDESS_SHOW_PANEL				= 6261;
	GODDESS_SCORE_PANEL				= 6262;
	GODDESS_GET_SCORE_REWARD		= 6263;
	
	BECOME_STRONG					= 6264;
	
	WHITE_VALENTINE_SEND_CHOCOLATE	= 6267;
	WHITE_VALENTINE_STUNNER			= 6268;
	WHITE_VALENTINE_RECEIVE_MESSAGE = 6269;
	WHITE_VALENTINE_SHOP			= 6270;
	WHITE_VALENTINE_SHOP_INFO		= 6271;
	
	MIRROR_SYSTEM					= 6272;
	
	MINE_SWEEP_PANEL				= 6273;
	MINE_SWEEP_RESET				= 6275;
	MINE_SWEEP_ONE_KEY				= 6276;
	MINE_SWEEP_DIG					= 6277;
	MINE_SWEEP_RANK_TABLE			= 6278;
	MINE_SWEEP_SINGLE_REWARD		= 6279;
	MINE_SWEEP_BUY					= 6280;
	MINE_SWEEP_ALL_INFO				= 6281;
	MINE_SWEEP_SHOP_INFO			= 6282;
	MINE_SWEEP_OPEN_BLESS			= 6296;
	
	//端午节
	DRAGON_BOAT_ALL_INFO			= 6350;
	DRAGON_BOAT_MAKE_PANEL			= 6351;
	DRAGON_BOAT_SHOP_INFO			= 6352;
	DRAGON_BOAT_BUY					= 6353;
	DRAGON_BOAT_MAKE_ITEM			= 6354;
	DRAGON_BOAT_ONE_KEY_MAKE		= 6355;
	DRAGON_BOAT_RANK_TABLE			= 6356;
	DRAGON_BOAT_SINGLE_REWARD		= 6357;
	DRAGON_BOAT_GET_MATERIALS		= 6358;
	DRAGON_BOAT_DONATE_PANEL		= 6359;
	DRAGON_BOAT_DONATE				= 6360;
	DRAGON_BOAT_REQ_DONATE			= 6361;

	//母亲节
	MOTHER_DAY_SEND					= 6283;
	
	//时装配饰
	FASHION_MAKE					= 6284;
	FASHION_XI_LIAN					= 6285;
	FASHION_SKILL 					= 6286;
	FASHION_WEAR					= 6287;
	FASHION_LIST					= 6288;
	
	//三人转限制
	AUTO_ADD_BUZHEN_HERO		    = 6289;
	
	//跨服转盘
	ZHUANPAN_CROSS_INFO 			= 6290;
	ZHUANPAN_CROSS_RANK 			= 6291;
	ZHUANPAN_CROSS_ROTATE 			= 6292;
	ZHUANPAN_CROSS_SUPER 			= 6293;
	ZHUANPAN_CROSS_BUY 				= 6294;
	ZHUANPAN_CROSS_SCORE_RWD		= 6295;
	
	//卡牌大师
	POKER_INFO 			= 6310;
	POKER_RANK 			= 6311;
	POKER_DRAW  		= 6312;
	POKER_BUY 			= 6313;
	POKER_SELL 			= 6314;
	POKER_SWEEP 		= 6315;
	POKER_SCORE_RWD		= 6316;

	//限时宝藏
	KEYSHOP_INFO        = 6320;
	KEYSHOP_BUY         = 6321;
	KEYSHOP_TIMEINFO    = 6322;
	KEYSHOP_INFO_NOTIFY = 6323;

	//改名卡
	CHANGE_PLAYER_NAME  = 6325;
	CHANGE_FAMILY_NAME  = 6326;
	FAMILY_NAME_NOTIFY  = 6327;
	
	//群聊
	GROUPCHAT_INFO      = 6329;//玩家讨论组信息
	GROUPCHAT_CREATE    = 6330;//创建
	GROUPCHAT_INVITE	= 6331;//邀请
	GROUPCHAT_LEAVE		= 6332;//离开
	GROUPCHAT_ACCEPT	= 6333;//接受邀请
	GROUPCHAT_GETOUT	= 6334;//踢人
	GROUPCHAT_SPEAK		= 6335;//发言
	GROUPCHAT_MSG_NOTIFY = 6336;//收到消息
	GROUPCHAT_INVITE_NOTIFY = 6337;//收到邀请
	GROUPCHAT_DISMISS   	= 6338;//解散
	GROUPCHAT_MSG_RECORD   	= 6339;//消息记录
	GROUPCHAT_DISMISS_NOTIFY   = 6340;//解散通知
	GROUPCHAT_GETOUT_NOTIFY   = 6341;//被踢通知
	
	//角色头像
	PLAYER_AVATAR_INFO      = 6342;
	PLAYER_AVATAR_USE       = 6343;
	PLAYER_AVATAR_ACT       = 6344;
	PLAYER_AVATAR_NOTIFY    = 6349;
	
	//坐骑占星
	HORSEDIVINE_INFO		= 6345;
	HORSEDIVINE_ACTI		= 6346;
	HORSEDIVINE_DIVINE		= 6347;
	HORSEDIVINE_ONEKEY		= 6348;
	
	//一元抢购
	ROBBUY_REWARD_INFO		= 6409;//可领奖信息
	ROBBUY_INFO				= 6410;
	ROBBUY_BUY				= 6411;
	ROBBUY_SHOPBUY			= 6412;//商店-弃用
	ROBBUY_SHOPINFO			= 6413;//商店信息-弃用
	ROBBUY_GET_REWARD		= 6414;//领奖
	
	//购物车
	SHOPCAR_INFO			= 6415;
	SHOPCAR_BUY				= 6416;
	SHOPCAR_SAVE			= 6417;
	
	//周年庆
	ANIVERSARY_INFO			= 6418;
	
	//雕像
	STATUE_RANK				= 6420;
	STATUE_GETREWARD		= 6421;
	STATUE_WORSHIP			= 6422;
	STATUE_WORSHIP_INFO		= 6423;//玩家膜拜信息
	STATUE_MODEL_INFO		= 6424;//玩家雕像信息
	
	//gailun end
	
	// add by weiwei from  8000
	ENTER_SCENE               		= 8000;
	ENTER_SCENE_OTHER_PLAYER_NOTIFY  = 8001;
	LEAVE_SCENE_NOTIFY        		= 8002;
	ENTER_SCENE_PLAYER_NOTIFY		= 8003;
	PLAYER_DATA_NOTIFY			    = 8004;
	TEST_DROP_GROUP					= 8005;
	STAMINA_RECOVER_NOTIFY          = 8006;
	GET_SWAP_ACTIONS				= 8007;
	SWAP_ACTION						= 8008;

	STAGE_FIGHT_START		  = 8053;
	STAGE_FIGHT_END			  = 8054;
	GET_STAGE_INFOS			  = 8055;
	GET_CHAPTER_INFOS		  = 8056;
	GET_CHAPTER_REWARD	  	  = 8057;
	STAGE_SAO_DANG			  = 8058;
	STAGE_PHASE_CHECK		  = 8059;
	STAGE_RESET			 	  = 8060;
	STAGE_OPEN_BOX			  = 8061;
	ELITE_INVADE_FIGHT_START  = 8062;
	ELITE_INVADE_FIGHT_END	  = 8063;
	ELITE_INVADE_NOTIFY       = 8064;
	
	EQUIP_STRENGTH			  = 8100;
	EQUIP_JINGLIAN			  = 8101;
	ITEM_HECHENG			  = 8102;
	EQUIP_CHANGE			  = 8103;
	EQUIP_PANEL_VIEW		  = 8104;
	EQUIP_UPGRADE_GOLDEN	  = 8105; //红装升金装
	EQUIP_SHENG_JIE	          = 8106; //红装金装 升价
	EQUIP_ADD_STAR_TUPO		  = 8107; //装备升星突破

	BUY_GOLD_INFO			  = 8110; //点金面板
	BUY_GOLD				  = 8111; //点金

	
	GET_MAIL_LIST			  = 8150;
	READ_MAIL				  = 8151;
	SEND_MAIL			      = 8152;
	DEL_MAIL				  = 8153;
	MAIL_NOTIFY				  = 8154;
	DEL_MAIL_NOTIFY			  = 8155;
	GET_MAIL_REWARD 		  = 8156;
	NEW_GROUP_MAIL_NOTIFY     = 8157;
	GET_NEW_GROUP_MAIL        = 8158; //优化协议
	
	BTL_SKILL_NOTIFY  		  = 8200;
	BTL_ADD_BUFF_NOTIFY		  = 8201;
	BTL_DEL_BUFF_NOTIFY		  = 8202;
	BTL_PLAYER_DEAD_NOTIFY    = 8203;
	BTL_PLAYER_REVIVE_NOTIFY  = 8204;
	BTL_NPC_HP_NOTIFY		  = 8205;
	
	// 任务
	TASK_GET_CUR_INFO 		  = 8300;
	TASK_FINISH				  = 8301;
	TASK_INFO_NOTIFY		  = 8302;
	
	// 活动
	ACTIVITY_GET_INFOS        = 8350;
	ACTIVITY_REWARD_FINISH    = 8351;
	ACTIVITY_INFO_NOTIFY      = 8352;
	ACTIVITY_REWARD_NOTIFY    = 8353;
	STATIC_ACTIVITYS		  = 8354;
	
	ACTIVITY_HOT_UPDATE_NOTIFY = 8360;
	
	//国战
	CW_REGISTER				= 8400;  //报名
	CW_CANDIDATE_LIST		= 8401;  //拉取候选人列表
	CW_JOIN_CANDIDATE		= 8402;  //参与候选人
	CW_VOTE_GENERAL			= 8403;  //投票将军
	CW_SHOW_GENERAL			= 8405;  //拉取将军信息
	CW_RAND_CAMP			= 8406;  //随机阵营
	CW_CAMP_LIST			= 8407;  //拉取阵营列表
	CW_VOTE_MARSHAL			= 8409;  //投票元帅
	CW_SHOW_MARSHAL			= 8410;  //拉取元帅信息
	CW_PLAYER_INFO			= 8411;  //玩家国战信息
	CW_MARSHAL_NOTIFY		= 8412;
	CW_EVENT_LOG_NOTIFY		= 8413;
	
	CW_CANCEL_INST			= 8414;
	
	CW_CITY_MAP				= 8450; //国战世界地图
	CW_CITY_STAT_NOTIFY 	= 8452; //地图节点Notify
	CW_CITY_MOVE 			= 8453; //世界地图移动
	CW_BACK_TO_HOME_CITY	= 8454; //回主城  	
	
	CW_ENTER_CITY						= 8455; //	进入城池
	CW_LEAVE_CITY					    = 8457; //  离开城市
	CW_INNER_CITY_AUTO_FIGHT			= 8459; //	城池内战斗
	CW_INNER_CITY_AUTO_FIGHT_NOTIFY     = 8460;
	CW_INNER_CITY_CONSTRUCT_BUILDING	= 8464; //	建造建筑物
	CW_INNER_CITY_MOVE					= 8465; //	地图内移动
	CW_INNER_CITY_MOVE_NOTIFY			= 8466;
	CW_INNER_CITY_USE_SKILL				= 8467; // 使用技能
	CW_INNER_CITY_CAMP_ABILITY_NOTIFY	= 8468;
	CW_INNER_CITY_GRID_INFO_NOTIFY		= 8469;
	CW_INNER_CITY_ENTER_DIDONG			= 8470;
	CW_INNER_CITY_ATTACK_BUILDING		= 8471;
	
	CW_RANK_NOTIFY            			= 8472;
	CW_GET_RANK_REWARD					= 8473;
	CW_RANK								= 8474;
	CW_INNER_CITY_USE_SKILL_NOTIFY      = 8475;
	CW_PHASE_NOTIFY						= 8476;
	CW_JIESUAN_PANEL					= 8477;
	CW_HONOR_HALL						= 8478;
	CW_KILL_MASTER_NOTIFY				= 8479; // 1 元帅 2 将军
	CW_WAR_PHASE_STATUS_NOTIFY			= 8480; 
	CW_GET_SKILL_INFO					= 8481;
	CW_PLAYER_BASE_VAL_NOTIFY			= 8482; //行动力 疲劳度等信息
	CW_GET_DAILY_CITY_INFO				= 8483;
	CW_GET_DAILY_CITY_REWARD			= 8484;
	CW_LEAVE_CITY_NOTIFY				= 8485;
	//CW_CONVENE_NOTIFY					= 8486;
	CW_CITY_MOVE_CD_CLEAR				= 8487;
	CW_TASK_FIGHT						= 8488;
	CW_GET_JT_PRODUCTS					= 8489;
	CW_JT_PRODUCTS_NOTIFY				= 8490;
	CW_ATK_NOTIFY						= 8491;
	CW_CHANGE_TO_INST					= 8492;
	CW_INST_DEAD_NOTIFY					= 8493;
	CW_KULOU_BOMB						= 8494;
	CW_GET_MSMQ_TASK_INFO				= 8495;
	CW_ZHAOJI_NOTIFY					= 8496;
	CW_APPLY_ZHAOJI						= 8497;
	CW_ROBOT_NOTIFY						= 8498;
	CW_SHENGEN_NOTIFY					= 8499;

	
	//	地图技能	 1 瞬移 2 行动力
	
	//拍卖行
	GET_AUCTION_LIST        = 8500;
	AUCTION_SELL_ITEM		= 8501;
	AUCTION_UNSELL_ITEM		= 8502;
	AUCTION_BUY_ITEM		= 8503;
	AUCTION_MY_ORDER		= 8504;
	AUCTION_MY_SELLS		= 8505;
	AUCTION_SET_AUTO_BID    = 8506;
	AUCTION_MY_LIST_STAT_NOTIFY = 8507;
	
	//节日额外掉落
	ACTIVITY_DROP_STATIC_NOTIFY = 8520;
	PLAYER_PVP 				= 8521;
	
	//合服活动
	GET_HF_ACTIVITY_RANK    = 8522;
	
	//  团购
	
	GET_OP_ACTIVITY_STATIC  	= 8530; //团购静态数据拉取
	OP_ACTIVITY_STATIC_NOTIFY 	= 8531; //团购静态数据改变通知
	TUAN_GOU_INFO				= 8532; //拉取单条团购信息
	TUAN_GOU_INFO_NOTIFY		= 8533; //团购人数变化信息通知
	TUAN_GOU_PANEL_CLOSE		= 8534; //关闭团购面板
	BUY_TUAN_GOU				= 8535; //购买团购物品
	GET_TUAN_GOU_SCORE_REWARD	= 8536; //获取团购积分奖励
	TUAN_GOU_SCORE_INFO			= 8537; //获取团购积分信息
	
	//团购本地化
	TUAN_GOU_LOCAL_INFO				= 8538; //拉取单条团购信息
	TUAN_GOU_LOCAL_INFO_NOTIFY		= 8539; //团购人数变化信息通知
	BUY_TUAN_GOU_LOCAL				= 8540; //购买团购物品
	GET_TUAN_GOU_LOCAL_SCORE_REWARD	= 8541; //获取团购积分奖励
	TUAN_GOU_LOCAL_SCORE_INFO		= 8542; //获取团购积分信息


		
	// 秘境探险
	MJTX_INFO					= 8600; //拉取玩家秘境探险信息	
	MJTX_RANK					= 8601; //开启宝箱
	MJTX_OPEN_BOX				= 8602; //开启宝箱
	MJTX_FIGHT_START			= 8603; //攻打敌人战斗开始
	MJTX_FIGHT_END				= 8604; //攻打敌人战斗结束
	MJTX_AUTO_FIGHT				= 8605; //自动战斗
	MJTX_NEXT_LEVEL				= 8606; //下一关卡
	MJTX_SOME_COUNT_NOTIFY		= 8607;
	
	//  小基金
	
	FUND_INFO					= 8620;
	BUY_FUND					= 8621;
	GET_FUND_REWARD				= 8622;
	
	
	//宠物觉醒玩法
	
	GET_PET_WAKEUP_PLAY    					= 8650;
	PET_WAKEUP_PLAY_FIGHT_START 			= 8651;
	PET_WAKEUP_PLAY_FIGHT_END 				= 8652;
	PET_WAKEUP_PLAY_SAODANG					= 8653;
	PET_WAKEUP_PLAY_GET_CHAPTER_REWARD		= 8654;
	PET_WAKEUP_PLAY_GET_RANK_INFO 			= 8655;
	PET_WAKEUP_PLAY_EVALUATE				= 8656;
	
	//神器养成
	ARTIFACT_GET_INFOS						= 8670;
	ARTIFACT_FORGE							= 8671;
	ARTIFACT_ADD_EXP						= 8672;
	ARTIFACT_ADD_STAR						= 8673;
	ARTIFACT_JINJIE							= 8674;
	ARTIFACT_XILIAN							= 8675;
	ARTIFACT_RECAST							= 8676;
	ARTIFACT_INFO_NOTIFY					= 8677;
	ARTIFACT_EQUIP						    = 8678;
	ARTIFACT_GET_ARTI_MODEL_ABILITY			= 8679;
	ARTIFACT_REBORN							= 8680;
	ARTIFACT_DECOMPOSE						= 8681;
	ARTIFACT_MASTER_SHOW					= 8682;
	
	//坐骑图鉴
	HORSE_TUJIAN_INFO						= 8700;
	HORSE_TUJIAN_JIHUO						= 8701;
	HORSE_TUJIAN_ZHURU						= 8702;
	HORSE_TUJIAN_GET_HUOLI					= 8703;
	HORSE_TUJIAN_HUOLI_NOTIFY				= 8704;
	
	//编年史
	HISTORY									= 8710;
	
	//巅峰对决
	WORLD_COMP_FIRST_INIT_RANK				= 8750;
	WORLD_COMP_TEAM_RANK					= 8751;
	WORLD_COMP_TEAM_REFRESH					= 8752;
	WORLD_COMP_TEAM_FIGHT					= 8753;
	WORLD_COMP_TEAM_INFO					= 8754;
	WORLD_COMP_FINAL_PANEL					= 8755;
	WORLD_COMP_FINAL_INFO					= 8756;
	WORLD_COMP_NODE_INFO					= 8757;
	WORLD_COMP_DIAN_ZAN						= 8758;
	WORLD_COMP_DIAN_ZAN_LOG					= 8759;
	WORLD_COMP_HONOR_HALL					= 8760;
	WORLD_COMP_TEAM_GET_REWARD				= 8761;
	WORLD_COMP_TAOTAI_GET_REWARD			= 8762;
	WORLD_COMP_TAOTAI_DIST_GET_REWARD		= 8763;
	WORLD_COMP_RECORD						= 8764;
	WORLD_COMP_FINAL_ROUND_NOTIFY			= 8765;
	WORLD_COMP_FINAL_SIMPLE_NODE_INFO		= 8766;
	WORLD_COMP_TAOTAI_DIST_RANK				= 8767;
	WORLD_COMP_GET_DIANZAN_REWARD			= 8768;
	
	/////////////////////////// ww END //////////////////////
	
	//英雄养成
	HERO_ADD_EXP 			= 5001;
	HERO_TUPO				= 5002;
	HERO_INFO				= 5005;
	HERO_PEIYANG			= 5007;
	HERO_PEIYANG_TIHUAN 	= 5008;
	HERO_SHENGJIE			= 5009;
	PANEL_VIEW 				= 5010;//面板；主角或英雄
	HERO_INFO_NOTIFY		= 5011;
	EXP_HEROES 				= 5012;
	HERO_COMBINE			= 5013;
	HERO_SHENGJIE_RECORD 	= 5014;
	HERO_TUPO_ITEM_EQUIP	= 5015;
	HERO_TUPO_ITEM_EQUIP_ALL= 5016;
	HERO_TALENT				= 5017;
	HERO_ALL_INFO_NOTIFY	= 5018;
	HERO_SKIN_ACTIVIE 		= 5019;
	HERO_SKIN_EQUIP			= 5021;
	HERO_SKIN_INFO  		= 5022;
	
	//**********************************************************
	// 挂机
	GUAJI_INFO 					= 3020; //挂机信息
	GUAJI_CHANGE_NANDU 			= 3021; //改变挂机难度
	GUAJI_BOSS_FIGHT_START 		= 3022; //挂机boss开始
	GUAJI_BOSS_FIGHT_END 		= 3023; //挂机boss结束
	GUAJI_GET_BAG_INFO			= 3024; //挂机包裹信息
	GUAJI_GET_BAG_REWARD 		= 3025; //获取包裹奖励 
	GUAJI_EXTRA_REWARD_NOTIFY 	= 3026; //额外奖励通知
	GUAJI_LOG					= 3027; //日志
	GUAJI_SWITCH				= 3028; //挂机自动组队，开始挂机开关
	GUAJI_INFO_NOTIFY           = 3029; //挂机个人信息变化通知
	TEAM_INVITE					= 3030; //挂机邀请
	GUAJI_FIGHT_ST_NOTIFY       = 3031; //挂机是否在挂机中状态通知
	GUAJI_REWARD_DISP_NOTIFY    = 3032; //挂机奖励显示通知
	CROSS_SCENE_WATCH           = 3033; //跨服场景观察
	CROSS_SCENE_ENTER			= 3034; //跨服场景进入
	CROSS_SCENE_LEAVE			= 3035; //跨服场景离开
	CROSS_SCENE_ENTER_NOTIFY    = 3036; //跨服场景进入通知
	CROSS_SCENE_LEAVE_NOTIFY    = 3037; //跨服场景离开通知
	CROSS_SCENE_WATCH_CLOSE     = 3038; //跨服场景观察关闭
	CROSS_SCENE_ENTER_OTHER_NOTIFY    = 3039; //跨服场景进入通知
	
	//挂机pvp
	GUAJI_CHANGE_PVPER          = 3140; //挂机换一批
	//GUAJI_IMMU_FIGHT			= 3142; //免战		
	GUAJI_PVP_FIGHT_START		= 3143; //pvp战斗
	GUAJI_PVP_FIGHT_END			= 3144; 
	GUAJI_PVP_TODAY_RANK		= 3145; //今日榜
	GUAJI_PVP_YESTODAY_RANK		= 3146; //昨日榜
	GUAJI_GET_RANK_REWARD		= 3147; //领取昨日榜奖励
	GUAJI_SOME_DATA_NOTIFY		= 3148; //挂机部分数据通知
	GUAJI_PVP_GM		 	  	= 3149;
	GUAJI_PVP_BE_STEAL_NOTIFY   = 3150; //被抢通知
	GUAJI_PVP_AUTO_FIGHT		= 3151;
	GUAJI_SWITCH_NOTIFY         = 3152;
	GUAJI_SAO_DANG				= 3153;
	
	// 商店
	SHOP_LIST		= 3040; //获取列表
	SHOP_BUY 		= 3041; //购买
	SHOP_REFRESH 	= 3042;	//商店刷新
	GM_SHOP_LIST	= 3047;
	GM_SHOP_BUY		= 3046;
	//商城
	MALL_LIST		= 3043; //商城列表
	MALL_BUY		= 3044; //商城购买
	MALL_NOTIFY		= 3045; //商城推送消息


	//布阵
	BU_ZHEN_CHANGE 	= 5020;
	BU_ZHEN_VIEW 	= 5030;
	BU_ZHEN_SUPPORT = 5031;
	BU_ZHEN_LIST 	= 5032;

	//宝物
	BAO_WU_BAG 				= 5100;
	BAO_WU_EQUIP 			= 5101;
	BAO_WU_STRENGTH 		= 5102;
	BAO_WU_KEYIN 			= 5103;
	BAO_WU_FUMO 			= 5104;
	BAO_WU_FUMO_OPEN 		= 5105;
	BAO_WU_MO_SHI_COMBINE 	= 5106;
	BAO_WU_MO_SHI_TRANSFER 	= 5107;
	BAO_WU_FUMO_ALL 		= 5108;
	BAO_WU_MOSHI_ALL		= 5109;
	MO_SHI_COMBINE_RECORD 	= 5110;
	BAO_WU_STAT_NOTIFY      = 5111;
	BAO_WU_GOLD_COMBINE		= 5112;
	BAO_WU_REMOULD			= 5113;
	BAO_WU_PURIFY			= 5114;
	BAO_WU_FUWEN_KEYIN		= 5115;

	//工会
	FAMILY_CREATE 			= 5201;
	FAMILY_APPLY 			= 5202;
	FAMILY_APPLY_OP 		= 5203;
	FAMILY_OPEN_INVITE 		= 5204;
	FAMILY_INVITE_FRIEND 	= 5205;
	FAMILY_APPOINT 			= 5206;
	FAMILY_CHANGE_LEADER 	= 5207;
	FAMILY_POST_UP 			= 5208;
	FAMILY_QUIT 			= 5209;
	FAMILY_KICK 			= 5210;
	FAMILY_INFO 			= 5211;
	FAMILY_MEMBER_LIST 		= 5212;
	FAMILY_LIST 			= 5213;
	FAMILY_DONATE 			= 5214;
	FAMILY_CHANGE_NOTICE 	= 5215;
	FAMILY_CHANGE_FLAG 		= 5216;
	FAMILY_LOG 				= 5217;
	FAMILY_APPLY_LIST 		= 5218;
	FAMILY_QIAN_DAO 		= 5219;
	FAMILY_APPLY_NOTIFY 	= 5220;
	FAMILY_DISMISS			= 5221;
	FAMILY_CLEAR_CD			= 5222;
	FAMILY_MEMBER_INFO		= 5223;
	FAMILY_OTHER			= 5224;
	FAMILY_DONATE_REWARD	= 5225;
	FAMILY_POST_AUTHORITY 	= 5226;
	FAMILY_GET_AUTHORITY	= 5227;
	FAMILY_AUTHORITY_NOTIFY	= 5228;
	FAMILY_DONATE_SCORE		= 5229;
	FAMILY_DONATE_NOTIFY	= 5230;

	//时装系统
	CLOTHES_BAG				= 5301;
	CLOTHES_WEAR			= 5302;
	CLOTHES_SKILL			= 5303;
	CLOTHES_SKILL_BAG		= 5304;
	CLOTHES_ACTIVE			= 5305;
	
	//查看其它玩家信息
	VIEW_OTHER_PLAYER 		= 5310;
	
	//回收系统
	RECYCLE_HERO_DECOMPOSE  = 5330;
	RECYCLE_EQUIP_DECOMPOSE = 5331;
	RECYCLE_BAOWU_DECOMPOSE = 5332;
	RECYCLE_PET_DECOMPOSE 	= 5334;
	RECYCLE_PLAYER_REBORN	= 5337;
	RECYCLE_HORSE_EQUIP_DECOMPOSE = 5338;
	
	
	//购买资源
	TIMES_BUY 				= 5335;
	GET_TIMES_BUY			= 5336;
	
	//援军培养
	SUPPORT_INFO_NOTIFY			= 5340;
	
	//战宠系统
	PET_LEVEL_UP   		= 5360;
	PET_INFO_NOTIFY 	= 5361;
	PET_GRADE_UP 		= 5362;
	PET_STAR_UP			= 5363;
	PET_ON_BATTLE		= 5364;
	PET_PROTECT			= 5365;
	PET_EQUIP			= 5366;
	PET_INFO 			= 5367;
	PET_STATUS_ACTIVE	= 5368;
	PET_STATUS_USE		= 5369;
	PET_ON_SCENE		= 5372;
	PET_WAKE_UP 		= 5373;
	
	//资源挽回
	RETRIVAL_INFO	= 5370;
	RETRIVAL_REWARD = 5371;
	
	//跨服组队竞技
	CTEAM_ARENA_SELECT_ENEMY		= 5401; //跨服预选赛 选择对手
	CTEAM_ARENA_FIGHT				= 5402; //跨服预选赛 开战
	CTEAM_ARENA_ENCOURAGE			= 5403; //鼓舞士气
	CTEAM_ARENA_RANK				= 5404; //排行榜
	CTEAM_ARENA_INFO				= 5405; //获取当前对战信息
	CTEAM_ARENA_ENEMY_CHANGE_NOTIFY = 5406;	//对手变更通知
	CTEAM_ARENA_CHANGE_SORT			= 5407;	//改变出战顺序
	CTEAM_ARENA_STATE				= 5408;	//当前状态
	CTEAM_ARENA_PRE_REPORT			= 5409;	//预选赛获取战报
	CTEAM_ARENA_FINAL_REPORT		= 5410;	//决赛获取战报
	CTEAM_PLAYER_INFO 				= 5411; //玩家个人信息
	CTEAM_PLAYER_REWARD				= 5412; //领取胜场奖励
	CTEAM_ARENA_FINAL_TEAM			= 5413; //决赛界面
	CTEAM_ARENA_FINAL_BET_INFO		= 5414; //下注信息
	CTEAM_ARENA_FINAL_BET_REWARD	= 5415; //领取下注
	CTEAM_ARENA_FINAL_BET			= 5416;	//下注
	CTEAM_ARENA_HONOR				= 5417;//殿堂
	
	//神兵产出玩法
	MINE_AREA_INFO			= 5441;
	MINE_HILL_INFO  		= 5442;
	MINE_FIGHT				= 5444;
	MINE_ABANDON			= 5445;
	MINE_REWARD				= 5446;
	GET_MINE_INFO			= 5447;
	MINE_LEAVE 				= 5448;
	MINE_INFO_NOTIFY 		= 5449;
	MINE_INVITE_APPLY		= 5450;
	MINE_INVITE_AGREE	 	= 5451;
	MINE_INVITE_INFO		= 5453;
	GET_ENEMY_INFO			= 5452;
	MINE_EVENT_NOTIFY	 	= 5454;
	MINE_SPECIAL			= 5455;
	MINE_TIMES				= 5456;
	MINE_LOG				= 5457;
	
	//国战军团
	CW_LEGION_CREATE 		= 5470;//创建
	CW_LEGION_LIST 			= 5471;//军团列表
	CW_LEGION_INFO 			= 5472;//军团信息
	CW_LEGION_APPLY 		= 5473;//申请
	CW_LEGION_QUIT 			= 5474;//退出
	CW_LEGION_NOTICE		= 5475;//修改公告
	CW_LEGION_REWARD		= 5476;//领取军饷
	CW_LEGION_DONATE		= 5477;//捐献
	CW_LEGION_LEVEL_UP		= 5478;//升级军团
	CW_LEGION_TECH_LEARN	= 5479;//科技学习
	CW_LEGION_INVITE		= 5480;//邀请
	CW_LEGION_APPOINT 		= 5481;//任命
	CW_LEGION_MACHINE		= 5482;//军械
	CW_LEGION_NOTIFY		= 5483;//信息推送
	CW_LEGION_AGREE			= 5484;//同意申请
	CW_LEGION_AUTO			= 5485;//自动加入
	CW_LEGION_KICK			= 5486;//踢出
	CW_LEGION_MEMBER_INFO 	= 5487;//成员信息
	CW_LEGION_APPLY_LIST 	= 5488;//申请列表
	CW_LEGION_CHANGE_LEADER = 5489;//军团长转让
	CW_LEGION_MEMBER_NOTIFY = 5490;//个人信息推送
	CW_LEGION_DISMISS		= 5491;//解散
	CW_LEGION_GET_FREE_CITY	= 5492;//抢夺无主之城
	CW_LEGION_TRANSFER_CITY	= 5493;//转让城池
	CW_LEGION_REJECT_FREE_CITY= 5494;//拒绝接受城池
	CW_LEGION_FREE_CITY_LIST = 5495;//转让城池列表
	CW_LEGION_CITY_REWARD	= 5496;//领取城池产出
	CW_LEGION_INVITE_NOTIFY	= 5497; //邀请通知
	CW_LEGION_MACHINE_CANCLE = 5498; //军械取消
	CW_LEGION_MACHINE_COMPLETE = 5499; //军械加速
	
	//结婚系统
	MARRIAGE_SEEK_INFO  		= 5510;//征婚列表
	MARRIAGE_SEEK  				= 5511;//征婚
	MARRIAGE_APPLY_INFO			= 5512;//应征列表
	MARRIAGE_APPLY  			= 5513;//应征
	MARRIAGE_PROPOSE_INFO  		= 5514;//求婚列表
	MARRIAGE_PROPOSE  			= 5515;//求婚
	MARRIAGE_ACCEPT  			= 5516;//接受求婚
	MARRIAGE_DATE_INFO  		= 5517;//婚宴信息
	MARRIAGE_DATE  				= 5518;//确定婚宴
	MARRIAGE_INFO				= 5519;
	MARRIAGE_PROPOSE_NOTIFY		= 5520;
	MARRIAGE_ACCEPT_NOTIFY		= 5521;
	MARRIAGE_DIVORCE			= 5522;
	MARRIAGE_RING_ACTIVE		= 5523;
	MARRIAGE_RING_LEVEL_UP		= 5524;
	MARRIAGE_INTERACT			= 5525;
	MARRIAGE_WEDDING_INFO		= 5526;//婚礼的信息
	MARRIAGE_WEDDING_GUEST_OP	= 5527;//婚礼宾客行为  礼炮 烟花 花篮
	MARRIAGE_WEDDING_HOST_OP	= 5528;//婚礼主人行为 发红包 发糖果
	MARRIAGE_WEDDING_GET		= 5529;//抢红包 抢糖果
	MARRIAGE_WEDDING_BOX		= 5530;//箱子
	MARRIAGE_WEDDING_NOTIFY		= 5531;
	MARRIAGE_WEDDING_PILGRIMAGE = 5532;//发起
	MARRIAGE_WEDDING_ACCEPT		= 5533;//处理发起
	MARRIAGE_WEDDING_WORDS		= 5534;//贺词		
	MARRIAGE_DIVORCE_NOTIFY		= 5535;
	MARRIAGE_DIVORCE_CONFIRM	= 5536;
	MARRIAGE_INTERACT_LOG		= 5537;
	MARRIAGE_DIVORCE_INFO_NOTIFY= 5538;
	MARRIAGE_INTERACT_NOTIFY	= 5539;
	MARRIAGE_APPLY_NOTIFY		= 5540;
	MARRIAGE_PILGRIMAGE_NOTIFY  = 5541;
	MARRIAGE_WEDDING_ALL_OP		= 5542;
	
	//全服组队竞技
	WORLD_ARENA_START			= 5545;
	WORLD_ARENA_MATCH			= 5547;
	WORLD_ARENA_TEAM_NOTIFY		= 5548;
	WORLD_ARENA_STANDBY			= 5549;
	WORLD_ARENA_PICK			= 5551;
	WORLD_ARENA_CHANGE_BATTLE	= 5552;
	WORLD_ARENA_RANK			= 5553;
	WORLD_ARENA_OPENBOX			= 5555;
	WORLD_ARENA_TEAM_INFO		= 5556;
	WORLD_ARENA_INFO 			= 5557;
	WORLD_ARENA_STOP_MATCH		= 5558;
	WORLD_ARENA_RANK_REWARD		= 5559;
	WORLD_ARENA_WIN_TOP			= 5560;

	
		//守护女神
	FAMILY_GAUNTLET_INFO							= 7600; // 守护女神 活动信息
	FAMILY_GAUNTLET_INFO_NOTIFY						= 7601; // 守护女神 活动信息同步
	FAMILY_GAUNTLET_LEVEL							= 7602; // 守护女神 选择挑战难度

	FAMILY_GAUNTLET_BATTLE_START_NOTIFY				= 7606; // 守护女神 活动开始
	FAMILY_GAUNTLET_BATTLE_END_NOTIFY				= 7607; // 守护女神 活动结束
	FAMILY_GAUNTLET_BATTLE_NOTIFY					= 7608; // 守护女神 活动数据
	FAMILY_GAUNTLET_BATTLE_STATE_NOTIFY				= 7609; // 守护女神 状态通知
	FAMILY_GAUNTLET_BATTLE_SYNC						= 7610; // 守护女神 活动同步
	FAMILY_GAUNTLET_ANGEL_SYNC_NOTIFY				= 7611; // 守护女神 女神状态同步
	FAMILY_GAUNTLET_STAGE_NEW_NOTIFY				= 7612; // 守护女神 新阶段
	FAMILY_GAUNTLET_STAGE_SYNC_NOTIFY				= 7613; // 守护女神 阶段同步

	FAMILY_GAUNTLET_MEMBER_NEW_NOTIFY				= 7615; // 守护女神 活动成员加入
	FAMILY_GAUNTLET_MEMBER_SYNC_NOTIFY				= 7616; // 守护女神 活动成员状态同步

	FAMILY_GAUNTLET_MONSTER_NEW_NOTIFY				= 7620; // 守护女神 怪物创建
	FAMILY_GAUNTLET_MONSTER_SYNC_NOTIFY				= 7621; // 守护女神 怪物同步
	FAMILY_GAUNTLET_MONSTER_ARRIVED_NOTIFY			= 7622; // 守护女神 怪物到达
	FAMILY_GAUNTLET_MONSTER_DIED_NOTIFY				= 7623; // 守护女神 怪物死亡

	FAMILY_GAUNTLET_BOSS_NEW_NOTIFY					= 7625; // 守护女神 BOSS创建
	FAMILY_GAUNTLET_BOSS_SYNC_NOTIFY				= 7626; // 守护女神 BOSS同步
	FAMILY_GAUNTLET_BOSS_DIED_NOTIFY				= 7627; // 守护女神 BOSS死亡

	FAMILY_GAUNTLET_JOIN_FIGHT						= 7630; // 守护女神 战斗
	FAMILY_GAUNTLET_QUICK_FIGHT						= 7631; // 守护女神 快速战斗

	FAMILY_GAUNTLET_FIGHT_SYNC_NOTIFY				= 7640; // 守护女神 攻击状态
	FAMILY_GAUNTLET_SKILL_SYNC_NOTIFY				= 7645; // 守护女神 技能同步
	FAMILY_GAUNTLET_SKILL_USE						= 7646; // 守护女神 使用技能
	FAMILY_GAUNTLET_SKILL_FROZEN_NOTIFY				= 7647; // 守护女神 使用了冻结技能

	FAMILY_GAUNTLET_RANK_SYNC_NOTIFY				= 7650; // 排行榜更新
	
	//阵营战
	ZHEN_YING_INFO          = 5565;
	ZHEN_YING_CHOICE		= 5566;
	ZHEN_YING_SIGN			= 5567;
	ZHEN_YING_SIGN_REWARD	= 5568;
	ZHEN_YING_SCORE_REWARD	= 5569;
	ZHEN_YING_RANK_INFO		= 5570;
	ZHEN_YING_END_REWARD	= 5571;
	ZHEN_YING_SHOP_BUY		= 5572;
	
	HERO_EVOLVE                     = 15003;    //英雄进化
	ACTIVATE_STAR_FORCE_NODE        = 15004;    //激活星力节点
	FORCE_PROP_NOTIFY               = 15005;    //激活星力节点总加成属性

	RICHMAN_INFO					= 10090;	//获得资源大亨玩家领奖状态
	RICHMAN_SHOP_INFO				= 10092;	//资源大亨商店购买情况
	RICHMAN_RANK_INFO				= 10093;	//资源大亨获取排行榜信息
	RICHMAN_SHOP_BUY				= 10094;	//资源大亨商店购买
	RICHMAN_SCORE_REWARD			= 10095;	//资源大亨领取积分奖励
	RICHMAN_RANK_REWARD				= 10096;	//资源大亨领取排行奖励
}


enum EC {    // err code
 	OK				= 0;
	ERROR			= 1; // 用来处理非正常逻辑的错误

	SYSTEM_BUSY = 300000000;
	RELOGIN = 300000001;//重复登陆
	FORBIDDEN = 300000002;//禁止登录中
	PARAM_ERROR				= 300000003; //参数错误
	FUNCTION_NOT_OPEN       = 300000004; //功能未开启
	PLAYER_SPEED_UP			= 300000005; //玩家加速踢下线

	NO_PLAYER_ROLE				= 300002001;
	LOGIN_OTHER					= 300002003;
	INVALID_NAME 				= 300002004;
	PLAYER_LEVEL_LIMIT			= 300002005;
	PLAYER_NOT_EXIST			= 300002006;
	AVOID_INDULGE				= 300002007;

	// add by leiyh from 0x34000~0x34999
	//背包
	BAG_ID_WRONG = 300004000;			//背包错误
	BAG_FULL = 300004001;			//背包已满
	BAG_ALREADY_EXIST = 300004002;		//背包已存在
	BAG_TYPE_NOT_EXIST = 300004003;		//背包类型不存在
	BAG_EQUIP_EXIST = 300004004;		//装备背包某位置已有装备
	BAG_EQUIP_PLACE_NOT_EXIST = 300004005;	//装备位置不存在
	BAG_CLOTH_PLACE_NOT_EXIST = 300004006;//时装位置不存在
	HEROPOS_ERROR = 300004007; //英雄位置错误

	//物品
	ITEM_FULL = 300004020;			//物品数量已达上限
	ITEM_COUNT_CANNOT_ADD = 300004021;	//物品数量不可增加
	ITEM_ID_NOT_EXIST = 300004022;		//物品id不存在
	ITEM_ID_ALREADY_EXIST = 300004023;	//物品id已存在
	ITEM_COUNT_NOT_ENOUGH = 300004024;	//物品数量不足
	ITEM_NOT_EXIST = 300004025;		//物品(itemId)不存在:
	ITEM_KIND_WRONG = 300004026;		//物品类型错误
	ITEM_CREATE_FAILED = 300004027;		//创建物品失败
	ITEM_SLICE_LEN_MISMATCH = 300004028;	//SLICE长度不匹配
	
	
	// 装备
	ITEM_IS_NOT_EQUIP = 300004029;		//不是装备
	EQUIP_STRENGTH_CNT_ERR = 300004030;   //强化次数错误
	EQUIP_STRENGTH_LV_LIMIT = 300004031; //强化等级上限
	EQUIP_JINGLIAN_LV_LIMIT = 300004032; //精炼等级上限
	ITEM_CANNOT_SELL = 300004033;
	ITEM_CANNOT_USE = 300004034;
	ITEM_USE_CHOICE = 300004035;
	ITEM_COUNT_IS_ZERO = 300004036;	//物品数量为0
	ITEM_IS_EXIST = 300004037;//物品已存在
	ITEM_CANNOT_ADDSTAR		= 300006300;//装备不能被升星，升星表里没有这个id或者装备品质不够
	EQUIP_ADD_STAR_LIMIT = 	  300006301; //升星等级上限
	ITEM_STREN_LEVEL_LIMIT	= 300006302;//装备强化等级不足100级，不能升星
	EQUIP_ADD_STAR_CNT_ERR	= 300006303;//升星次数错误
	EQUIP_UP_GOLDEN_NOT_RED = 300006304;//不是红装
	EQUIP_UP_GOLDEN_STAR_NOTFULL = 300006305;//没有满星
	EQUIP_SJ_NOT_GOLD_RED = 300006306;//升价不是红,金装

	
	
	//币种消耗
	GOLD_NOT_ENOUGH = 300004040;			//金币不足
	DIAMOND_NOT_ENOUGH = 300004041;		//钻石不足
	SOURCE_NOT_ENOUGH = 300004042;      //资源不足

	//抽将
	LOTTERY_ITEM_NOT_ENOUGH 	= 300004050;	//待消耗物品不足
	LOTTERY_ID_NOT_EXIST 		= 300004051;	//LOTTERY_ID不存在
	LOTTERY_MOLIZHI_UPLIMIT 	= 300007200;	//玩家魔力值以达到上限
	LOTTERY_CD 					= 300004052;	//LOTTERY_ID不存在
	LOTTERY_TIMES_LIMIT 		= 300004053;	//每日抽将次数上限
	LOTTERY_MOLIZHI_NOT_ENOUGH	= 300007201;	//玩家魔力值不足
	LOTTERY_HERO_NUM_UPLIMIT    = 300007202;

	
	//掉落
	DROP_COMMIT_CANNOT_ADDITEM 		= 300004060;	//无法添加物品
	DROP_COMMIT_FAIL_TO_CREATE_HERO = 300004061;	//创建英雄失败
	DROP_ERROR						= 300004062;	//掉落物品失败
	
	//竞技场
	ARENA_LEVEL_NOT_ENOUGH 			= 300004070;	//玩家等级不足
	ARENA_RANK_NOT_ENOUGH 			= 300004071;	//玩家排名不足
	ARENA_CD_LIMIT 					= 300004072;	//CD限制
	ARENA_TIMES_NOT_ENOUGH 			= 300004073;	//剩余次数不足
	ARENA_ENEMY_IN_CHALLENGE		= 300004074;	//敌方正被挑战
	ARENA_RANK_LIST_CHANGE 			= 300004075;	//敌方排名已变
	ARENA_RANK_REWARD_RANK_LIMIT  	= 300004076;	//领奖排名不足
	ARENA_BUY_TIMES_LIMIT			= 300004077;	//购买次数已达上限
	ARENA_RANK_REWARD_ALREADY_GET 	= 300004078;	//已领取过奖励
	ARENA_MANIFESTO_SENSITIVE 		= 300004079;	//宣言有敏感词
	ARENA_CANNOT_CHALLENGE_SELF		= 300004080;	//不可挑战自己
	ARENA_MANIFESTO_LENGTH_LIMIT	= 300004081;	//长度限制
	ARENA_MANIFESTO_LOCKED			= 300004082;	//宣言锁定
	ARENA_MULTI_CHALLENGE_RANK_NOT_ENOUGH = 300004083;	//竞技场多次挑战 排名不足
	
	//争霸赛
	COMPETE_GAMBLE_NOT_OPEN						= 300004100;	//下注未开放
	COMPETE_STATUS_GAMBLE_NOT_ALLOWED 			= 300004101;	//已不允许在改比赛下注	
	COMPETE_GAMBLE_TIMES_LIMIT					= 300004102;	//下注次数达上限
	COMPETE_GAMBLE_REWARD_STAGE_NOT_END			= 300004103;	//比赛尚未结束
	COMPETE_GAMBLE_REWARD_PLAYER_NOT_GAMBLE 	= 300004104;	//玩家未下注
	COMPETE_RANK_REWARD_ALREADY_GET				= 300004105;	//已领取过奖励
	COMPETE_NOT_OPEN							= 300004106;	//竞技场未开放
	COMPETE_GAMBLE_REWARD_ALREADY_GET 			= 300004107;	//下注奖励已领取
	
	//七日目标
	SEVEN_DAY_DAY_LIMIT					= 300004120;		//日期未到
	SEVEN_DAY_REWARD_ALREADY_GET		= 300004121;		//奖励已领取
	SEVEN_DAY_SHOP_ALREADY_GET			= 300004122;		//商品已购买过
	SEVEN_DAY_SHOP_LACK_STOCK			= 300004123;		//已被抢购完
	SEVEN_DAY_TASK_REWARD_NOT_AVAI  	= 300004124;		//任务未完成
	SEVEN_DAY_TASK_REWARD_ALREADY_GET 	= 300004125;		//任务奖励已领取
	SEVEN_DAY_CLOSE						= 300004126;		//7日活动关闭
	SEVEN_DAY_SHOP_LIMIT				= 300004127;		//已达到购买上限
	SEVEN_DAY_SHOP_BUY_COUNT_LIMIT		= 300004128;		//输入购买数超过可购买上限
	
	//跨服战场
	BG_PLAYER_ALREADY_IN_TEAM			= 300004140;		//已有队伍
	BG_PLAYER_NOT_IN_TEAM				= 300004141;		//没有队伍
	BG_TEAM_MEM_NOT_ENOUGH				= 300004142;		//小组人数不足
	BG_NOT_OPEN							= 300004143;		//战场未开放
	BG_TEAM_NOT_EXIST					= 300004144;		//队伍不存在
	BG_TEAM_ENTER_NOT_ALLOWDED			= 300004145;		//队伍不可进入: 已经开始排队
	BG_STAGE_NOT_EXIST					= 300004146;		//战场不存在
	BG_TEAM_MEM_IN_BTL					= 300004147;		//队友正在战场中
	BG_TEAM_MEM_IN_WAIT					= 300004148;		//队友正在排队中
	BG_CANNOT_FIGHT_ALLY				= 300004149;		//不可攻击队友
	BG_CANNOT_FIGHT_SELF				= 300004150;		//不可攻击自己
	BG_RES_RUN_OUT						= 300004151;		//资源点已枯竭
	BG_RES_BEING_GATHERED				= 300004152;		//资源点正在被采集
	BG_PLAYER_IN_PENALTY_TIME			= 300004153;		//玩家正在惩罚时间(不可进入战场)
	BG_PLAYER_NOT_IN_WAIT_STATUS		= 300004154;		//玩家不在等待状态
	BG_PLAYER_ALREADY_IN_WAIT_QUEUE		= 300004155;		//玩家已在等待队列中
	BG_TEAM_ALREADY_IN_WAIT_QUEUE		= 300004156;		//队伍已在队列中
	BG_PLAYER_ALREADY_IN_BG_STAGE		= 300004157;		//玩家已在战场中
	BG_PLAYER_NOT_REG					= 300004158;		//玩家尚未报名
	BG_NOT_OPEN_ON_FIRST_DAY			= 300004159;		//开服首日不开启该功能
	BG_TITLE_REWARD_ALREADY_GET			= 300004160;		//排位奖励已领取
	BG_TITLE_REWARD_LIMIT				= 300004161;		//排位不足
	BG_ENEMY_IN_BTL						= 300004162;		//对方玩家在战斗中
	BG_IN_DEFENSIVE_TIME				= 300004163;		//对方玩家在保护时间
	BG_SPECIAL_ORE_GATHERER_LIMIT		= 300004164;		//特殊矿点，采集人数限制
	BG_GATHERING						= 300004165;		//玩家正在采集中
	BG_GATHERING_BY_OTHERS				= 300004166;		//其他玩家正在采集中
	BG_MULTI_CARD_USED_ALREADY			= 300004167;		//已使用过该效果的加倍卡片
	BG_ALREADY_HAVE_FLAG				= 300004168;		//已有旗帜
	BG_BETTER_MULTI_CARD_ALREADY_USED 	= 300004169;		//已使用过更好的卡片
	BG_NPC_ALREADY_DEAD					= 300004170;		//NPC已死亡
	BG_PLAYER_IN_BTL					= 300004171;		//玩家(自己)正在战斗中
	BG_NPC_IN_BTL						= 300004172;		//NPC正在挑战中
	
	//距离过远
	TOO_FAR						= 300004200;	//距离过远
	
	//跨服个人竞技
	CROSS_ARENA_RESIDUAL_TIMES_NOT_ENOUGH	= 300004250;	//海选/决赛	剩余挑战次数不足
	CROSS_ARENA_LAYER_BOX_ALREADY_GET		= 300004251;	//海选		宝箱已经领取
	CROSS_ARENA_ENEMY_DATA_ERROR			= 300004252;	//决赛		对手数据错误
	CROSS_ARENA_ENEMY_RANK_CHANGED			= 300004253;	//决赛		对手排名发生变化
	CROSS_ARENA_ENEMY_IN_BTL				= 300004254;	//决赛		对手正在挑战中
	CROSS_ARENA_PLAYER_IN_BTL				= 300004255;	//决赛		玩家(自己)正在挑战中
	CROSS_ARENA_PLAYER_RANK_CHANGED			= 300004256;	//决赛		玩家排名变化	
	CROSS_ARENA_CANNOT_FIGHT_SELF			= 300004257;	//决赛		不可挑战自己
	CROSS_ARENA_AUDIENCE_CANNOT_FIGHT		= 300004258;	//决赛		观众不可攻击
	CROSS_ARENA_CHEER_RESIDUAL_TIMES_NOT_ENOUGH	= 300004259;	//决赛 	剩余助威次数不足
	CROSS_ARENA_FINAL_FIGHT_RANK_NOT_ENOUGH = 300004260;	//决赛		前10名才可挑战前3
	CROSS_ARENA_NOT_MASS					= 300004261;	//不在海选期
	CROSS_ARENA_NOT_FINAL					= 300004262;	//不在决赛期
	CROSS_ARENA_CANNOT_FIGHT_LOWER_RANK		= 300004263;	//决赛		不可挑战低排名玩家
	CROSS_ARENA_ENEMY_ALREADY_DEAD			= 300004264;	//海选		对手已死亡
	
	FAMILY_EXPE_ACTIVITY_NOT_OPEN			= 300004300;	//跨服远征	活动未开启
	FAMILY_EXPE_WAIT_LEADER_OPEN			= 300004301;	//跨服远征	等待会长/副会长开启
	FAMILY_EXPE_TIMES_NOT_ENOUGH			= 300004302;	//跨服远征	公会剩余挑战次数不足
	FAMILY_EXPE_PLAYER_TIMES_NOT_ENOUGH		= 300004303;	//跨服远征	玩家剩余挑战次数不足
	FAMILY_EXPE_PLAYER_ALREADY_IN_BTL		= 300004305;	//跨服远征	玩家本人正在挑战中
	FAMILY_EXPE_ENEMY_ALREADY_IN_BTL		= 300004306;	//跨服远征	敌方正在被挑战中
	FAMILY_EXPE_AVAI_PLAYER_NOT_ENOUGH		= 300004307;	//跨服远征	可参战人数不足
	FAMILY_EXPE_ALREADY_START				= 300004308;	//跨服远征	已经开启
	FAMILY_EXPE_NOT_IN_OPEN_INTVL			= 300004309;	//跨服远征	不在活动开放时间内
	FAMILY_EXPE_CANNOT_FIGHT_SELF_FAMILY	= 300004310;	//跨服远征	不可挑战己方公会
	FAMILY_EXPE_FAMILY_NOT_QUALITIFY		= 300004311;	//跨服远征	公会资质不足
	FAMILY_EXPE_FAMILY_NOT_IN_CHANLLENGE	= 300004312;	//跨服远征	不在公会可挑战时间
	FAMILY_EXPE_NOT_FIGHT_PLAYER			= 300004313;	//跨服远征 	非本场战斗参战人员
	FAMILY_EXPE_TASK_IN_CD					= 300004314;	//跨服远征    领取任务CD限制
	FAMILY_EXPE_FIGHT_ALREADY_START         = 300004315;	//跨服远征    战斗已经开始
	FAMILY_ALREADY_GET_TASK					= 300004316;	//跨服远征    已领取该任务
	FAMILY_EXPE_TARGET_FAMILY_NOT_EXISTS    = 300004317;	//跨服远征    对方公会不存在
	FAMILY_EXPE_TARGET_PLAYER_NOT_EXISTS    = 300004318;	//跨服远征    对方玩家不存在 
	FAMILY_EXPE_FIGHT_IN_CD					= 300004319;	//跨服远征    战斗CD限制
	FAMILY_EXPE_CANNOT_RECEIVE_TASK			= 300004320;	//跨服远征    开战后不能再接任务
	FAMILY_EXPE_ACTIVITY_ON					= 300004321;	//跨服远征    活动期间不能退出公会
	FAMILY_EXPE_ACTIVITY_ON_BREAK_OUT		= 300004322;	//跨服远征	 活动期间不能踢人
	FAMILY_EXPE_WAIT						= 300004323;	//跨服远征 系统维护，请稍候再试
	FAMILY_EXPE_SELECT_NEW_ENERMY		    = 300004324;	//跨服远征    排名变化，重选对手
	//add by youlong
	CITY_LINE_OVERFLOW			= 300006001;//当前线路已经满员
	CAN_NOT_TALK				= 300006002;//等级不够不能聊天	
	NO_SUCH_CHANNEL				= 300006003; // 没有这个频道
	TALK_TOO_QUICK				= 300006004; //说的太快
	FORBIDDEN_TALK				= 300006005;//禁止聊天	
	SCENE_OVER_FLOW 			= 300006006;
	NOT_CITYSCENE				= 300006007;//变线时对应的场景不是主城
	LINE_NOT_EXIST				= 300006008;//变线时输入的线不存在
	LINE_NOT_ZERO				= 300006009;//变线时线输入不能是0
	AT_SAME_LINE				= 300006010;//变线时输入的线数和当前所在线一致，无需变线
	//端午节
	DRAGON_BOAT_MAKE_NUM_LIMIT	= 300006510;//超过制作限制
	DRAGON_BOAT_NOT_FAMILY		= 300006511;//你没有公会，不能打开面板
	DRAGON_BOAT_ENTER_FAMILY_TIME_LIMIT	= 300006512;//加入公会时间太短
	DRAGON_BOAT_CD				= 300006513;//捐赠CD
	//深渊
	SHENYUAN_TIME_LIMIT 		= 300006011;// 深渊次数不够了
	SHENYUAN_LAYER_ERROR		= 300006013;//挑战时发出的层数请求不是玩家当前所在的层数
	SHENYUAN_BUFF_STAR_NOT_ENOUGH = 300006015; // 星数不够了
	NOT_YOUR_FRIEND				= 	300006016;
	SHENYUAN_RANK_LIMIT			=	300006017;//深渊领奖排名不足
	SHENYUAN_RECEIVE_BOX_FAILED	=	300006018;//深渊领取宝箱失败
	SHENYUAN_FRIEND_HELP_LIMIT	=	300006020;//深渊好友帮助次数用完
	SHENYUAN_LAYER_NO_DATA		=	300006021;//深渊当前层没有数据
	SHENYUAN_REACH_TOP_LAYER	=	300006022;//深渊已经到达最高层
	SHENYUAN_NOW_UPDATE			=	300006023;//深渊数据每日零点清零
	SHEN_YUAN_BUY_MYSTERIBOX_TIME_LIMIT	= 300006024;//深渊购买神秘宝箱次数达到上限	
	
		// 运镖系统
	YUNBIAO_SHIP_NOT_FLY		= 300006200;
	YUN_BIAO_PASSED_LOCKED_TIME			= 300006201;//过了运镖锁定的时间
	YUN_BIAO_DAJIE_CD			= 300006202;//运镖的打劫cd
	YUN_BIAO_BEI_DAJIE_CD		= 300006203;//船的被打劫cd
	YUN_BIAO_DAJIE_TIME_LIMIT	= 300006204;//超过打劫次数
	YUN_BIAO_TIME_LIMIT			= 300006205;//超过了运镖次数
	YUN_BIAO_DAJIE_CISHU_LIMIT	= 300006208;//超过了该船被打劫的次数
	YUN_BIAO_BEI_DAJIE_TIME_LIMIT	= 300006209;//被打劫的船在Cd中
	YUN_BIAO_DAJIE_ERR				= 300006210;//不能打劫
	
	//排行系统
	NO_SUCH_NAME_IN_RANK			= 300006031;//排行榜中没有这个姓名对应的记录
	//签到系统
	GET_SIGN_IN_REWARD_FAILED	= 	  300006041;//领取签到奖励失败

	//VIP
	
	VIP_CARD_INVALID				= 300006051;//VIP卡片等级低于玩家VIP等级，无效
	VIP_REWARD_GET_ERROR			= 300006052;//获取VIP奖励失败
	FIRST_CHARGE_REWARD_GET_ERROR	= 300006053;//获取首冲奖励失败
	
	WEB_SAVE_REWARD_GET_ERROR		= 300006060;//收藏奖励领取错误
	CLIENT_DOWNLOAD_GET_ERROR		= 300006061;//微端下载领取错误
	
	//14日活动
	FOURTEEN_DAY_DAY_LIMIT			= 300006062;			//14日活动未到
	FOURTEEN_DAY_REWARD_ALREADY_GET		= 300006063;		//奖励已领取
	FOURTEEN_DAY_SHOP_TIME_LIMIT			= 300006064;		//购买次数限制
	FOURTEEN_DAY_TASK_REWARD_NOT_AVAI  	= 300006066;		//任务未完成
	FOURTEEN_DAY_TASK_REWARD_ALREADY_GET 	= 300006067;		//任务奖励已领取
	FOURTEEN_DAY_CLOSE						= 300006068;		//14日活动关闭
	FOURTEEN_DAY_SHOP_TOP_VIP				= 300006069;//14日已达到最大购买次数
	
	//春节、情人节
	SPRING_BEAT_BOSS_NUM_LIMIT				= 300006071;//攻打次数不足
	SPRING_BOSS_GET_LAST_RANK_ERROR			= 300006072;//你昨日没有攻打过年兽，不能领取阳光普照
	VALENTINE_SEND_FLOWER_NOT_ENOUGH		= 300006073;//情人节送花数量不足9个
	WHITE_VALENTINE_NOT_IN_TIME				= 300006078;//不在白色情人节开放时间
	WHITE_VALENTINE_NOT_YOUR_FRIEND			= 300006079;//不是你的好友
	WHITE_VALENTINE_SHOP_NOT_IN_TIME		= 300006080;//白色情人节特惠商店不在开放时间
	WHITE_VALENTINE_CAN_NOT_BUY				= 300006081;//巧克力不可以再买了
	WHITE_VALENTINE_NOT_ENOUGH				= 300006082;//巧克力不足
	//女神节
	GODDESS_VOTE_NOT_IN_TIME				= 300006076;//不在投票时间
	GODDESS_VOTE_TICKETS_NOT_ENOUGH			= 300006077;//女神节送花数量不足9个
	//红装
	YELLOW_ITEM_ADD_STAR_BY_RED				= 300006074;//橙色装备不能用红色碎片升星
	YELLOW_PIECE_NOT_FOR_EQUIP_THREE_STAR	= 300006075;//三星及以上红色装备不能用橙色碎片升星
	//时装配饰
	FASHION_XILIAN_MAX						= 300006090;//洗练随机到最高值时，则不可再洗炼		
	//end
	

	
	
	//**************************************************************************
	//add by dongming from 0x300007001
	
	HORSE_ALREADY_ACTIVED 					= 300007000;
	
	FRIEND_NO_PLAYER_RECOMMAND  			= 300007001;//
	PLAYER_NAME_SENSITIVE 					= 300007002;//角色名含有非法/敏感字符
	PLAYER_NAME_MORETHANSIX					= 300007003;//角色名多于六个字符
	PLAYER_NAME_LESSTHANTWO					= 300007004;//角色名少于两个字符
	PLAYER_NAME_EXIST						= 300007005;//角色名已经存在
	PLAYER_NAME_VALID						= 300007006;//角色名可用
	FAMILY_BOSS_BUFF_CDLIMIT				= 300007007;//工会Boss冷却时间限制
	FAMILY_BOSS_BUFF_LAYERLIMIT 			= 300007008;//工会Boss层数限制
	FAMILY_LEVEL_LIMIT						= 300007009;
	FAMILY_GET_REWARD_ERR					= 300007010;
	FAMILY_BOSS_BOSS_ALREADY_DEAD			= 300007011;//表示场景中的怪已经死了
	
	FAMILY_BOSS_GULI_TIMES_LIMIT			= 300007012;
	FAMILY_BOSS_GULI_NORAML_CDTIME_LIMIT    = 300007015;
	FAMILY_BOSS_FIGHT_NOT_START				= 300007016;
	FAMILY_BOSS_CAN_NOT_JION_FIGHT			= 300007021;//换公会的时候不能再进入活动
	FAMILY_BOSS_BOSS_HAS_ALREADY_DEAD		= 300007017;
	FAMILY_BOSS_TOTAL_HURT_NOT_ENOUGH		= 300007018;
	FAMILY_BOSS_HURT_REWARD_ALREADY_GET     = 300007019;
	FAMILY_BOSS_NO_REWARD_CAN_GET			= 300007020;
	FAMILY_BOSS_CAN_NOT_KICK_DURING_BOSS    = 300007022;
	FAMILY_BOSS_CAN_NOT_DISMISS_DURING_BOSS = 300007023;
	FAMILY_BOSS_CAN_NOT_GUWU				= 300007024;
	FAMILY_BOSS_FIGHT_END					= 300007025;
	FAMILY_BOSS_PLAYER_RELIVE_CD			= 300007026;
	
	HORSE_ITEM_AND_LEVEL_BOTH_NOT_ENOUGH 	= 300007013;
	HORSE_LEVEL_ALREADY_HIGHEST				= 300007014;
	
	FRIEND_CONGRATULATE_TIMES_LIMIT			= 300007100;
	FRIEND_CONGRATULATED_TIMES_LIMIT		= 300007101;
	FRIEND_DONATE_STAMINA_TIMES_LIMIT	    = 300007102;
	FRIEND_DONATED_STAMINA_TIMES_LIMIT	    = 300007103;//
	FRIEND_SIGNATURE_INVALID_CONTENT		= 300007104;//好友签名内容不合法
	FRIEND_SIGNATURE_LENGTH_LIMIT			= 300007105;//好友签名长度限制
	FRIEND_MAX_NUMBER_LIMIT					= 300007106;//好友最大人数限制
	FRIEND_MAX_NUMBER_ALREADY				= 300007124;//好友人数已经达到了上限
	FRIEND_OTHER_MAX_NUMBER_LIMIT           = 300007123;//对方玩家的好友数量限制
	FRIEND_DAILY_DELETE_NUMBER_LIMIT		= 300007107;//每天删除好友人数限制
	FRIEND_PRIVATE_TALK_INTERVAL_LIMIT		= 300007108;//私聊时间间隔限制
	FRIEND_ONLY_FRIEND_CAN_DONATE			= 300007110;//只有好友间才可以赠送体力
	FRIEND_HAS_ALREADY_DONATE				= 300007111;//表示此好友已经被赠送过了
	TARGETFRIEND_CONGRATULATE_TIMES_LIMIT   = 300007112;//表示目标玩家的被祝贺数满
	FRIEND_NO_PLAYER_TO_DONATE				= 300007113;//表示一键赠送中没有玩家可被赠送
	FRIEND_APPLY_TOO_FREQUENCY				= 300007114;//表示对同一个玩家申请太频繁了
	FRIEND_CANNOT_APPLY_YOURSELF			= 300007115;//表示不能申请自己为好友
	FRIEND_ALREADY_FRIEND					= 300007203;//已经是好友了
	FRIEND_TREND_ALREADY_CONGED				= 300007119;//表示该事件已经被祝贺过了
	FRIEND_APPLY_IN_HEIMINGDAN				= 300007121;//要申请的好友在黑名单中
	FRIEND_APPLY_IN_OTHER_HEIMINGDAN		= 300007122;//自己在要申请的好友黑名单中
	FRIEND_APPLY_ALREADY_IN_APPLYLIST		= 300007126;//已经在对方的申请列表中
	FRIEND_APPLY_ALREADY_IN_SELF_APPLYLIST	= 300007125;//已经在自己的申请列表中
	FRIEND_HEIMING_LENGTHEN_LIMIT			= 300007129;//
	FRIEND_CANNOT_APPLY						= 300007130;//不能申请该好友
	FRIEND_APPLY_LEVEL_LIMIT				= 300007132;//申请好友和批量添加时玩家等级限制
	
	SADDLE_HORSE_NEED_PREVHORSE				= 300007109;//需要前置坐骑
	
	FAMILY_STAGE_FREE_TIMES_LIMIT			= 300007116;//公会副本每日免费次数限制
	FAMILY_STAGE_INVALIDATE_STATE			= 300007117;//选择挑战的节点的状态不对
	FAMILY_STAGE_NOT_FINISH					= 300007118;//章节尚未通关
	FAMILY_STAGE_FIGHTING					= 300007120;//表示别人正在攻打该节点
	FAMILY_STAGE_ALREADY_GOT_TODAY			= 300007127;//当天已领取过
	FAMILY_STAGE_PLAYER_FIGHTING			= 300007128;//表示被踢玩家正在公会副本战斗中
	FAMILY_STAGE_HAVE_PLAYER_FIGHTING		= 300007131;//表示解散公会时有玩家正在公会副本战斗中
	HERO_PRACTICE_DAILYTIMES_LIMIT			= 300007500;//当天最大挑战次数限制
	
	HERO_PRACTICE_OPEN_TIME_LIMIT			= 300007501;//类型开放时间限制
	
	FAMILY_TECH_LEVEL_LIMIT					= 300007502;//公会科技研究等级限制
	FAMILY_TECH_CDTIME_LIMIT				= 300007503;//公会科技CD时间限制
	FAMILY_TECH_MEMBER_LIMIT				= 300007504;//普通会员的学习等级限制
	FAMILY_TECH_CON_NOT_ENOUGH				= 300007505;//个人公会贡献不足
	FAMILY_TECH_FUND_NOT_ENOUGH				= 300007506;//公会资产不足
	
	ACTIVATE_CODE_ALREADY_USED				= 300007507;//该激活码已被使用
	ACTIVATE_CODE_ALREADY_ACTIVATE			= 300007508;//您已激活过该礼包 已领取过
	ACTIVATE_CODE_ALREADY_EXPIRE			= 300007509;//该激活码已过期
	ACTIVATE_CODE_NOT_EXIST					= 300007510;//该激活码不存在
	
	SUPER_SALE_OPEN_TIME_ERR				= 300007511;//限时优惠开服时间限制
	
	VIP_LEVEL_NOT_ENOUGH					= 300007512;//VIP等级不够
	OPEN_FUND_HAS_ALREADY_BUY				= 300007513;//开服基金已经购买
	
	G360_CHECK_CODE_SYSTEM_BUSY				= 300007514;//系统繁忙，请您稍后再来领取特权！
	G360_CHECK_CODE_ONLINE_FIRST			= 300007515;//请先登录安全卫士，领取对应特权，获得礼包领取资格
	G360_CHECK_CODE_ALREADY_GET				= 300007516;//您的安全卫士等级不满足领取条件，请提升卫士等级
	G360_CHECK_CODE_NOT_ONLINE				= 300007517;//特权活动未上线，请等待上线后再来领取
	G360_CHECK_CODE_ALREADY_FINISH			= 300007518;//很遗憾！360卫士特权活动已结束，敬请期待下次活动！
	G360_CHECK_CODE_NOT_CONIFG				= 300007519;//请先登录安全卫士，领取对应特权，分享特权活动到指定社交平台获得分享礼包
	G360_CHECK_CODE_WAIT					= 300007520;//礼包审核中，我们将于您分享特权活动48小时之后给您发送礼包，请耐心等待！
	G360_JIASU_NOT_IN_TIME					= 300007547;//不在活动时间范围内
	G360_JIASU_HAS_ALREADY_GET				= 300007548;//奖励已经领取过
	
	MOBILE_CHECK_GET_CODE_ERR				= 300007521;//获取验证码错误 -- 可以提示系统错误
	MOBILE_CHECK_GET_CODE_MORE_THAN_TEN     = 300007522;//发送量超过10次
	MOBILE_CHECK_ERR						= 300007523;//验证错误 -- 可以提示系统错误
	MOBILE_CHECK_ALREADY_BIND				= 300007524;//用户已经绑定手机
	MOBILE_CHECK_NUM_ALREADY_BIND_OTHER		= 300007525;//手机号码已经被其他账号绑定
	MOBILE_CHECK_CODE_INVALIDE				= 300007526;//无效的手机验证码
	MOBILE_CHECK_GET_CODE_NUM_INVALIDE      = 300007527;//不合法的手机号码
	
	JUE_ROAD_NOT_FINISH						= 300007528;
	JUE_ROAD_TIME_LIMIT						= 300007529;//十分钟限制十次
	JUE_ROAD_BAOXIANG_ALREADY_GET			= 300007533;//该宝箱已经领取了
	JUE_ROAD_STARS_NOT_ENOUGHT				= 300007534;//该宝箱已经领取了
	JUE_ROAD_PRE_NODE_FIRST					= 300007535;//前置节点未通关
	JUE_ROAD_NODE_STATE_ERR					= 300007536;//节点状态错误
	JUE_ROAD_FREE_TIME_LIMIT				= 300007537;//免费次数限制
	
	OPEN_CHALLENGE_TIME_END					= 300007530;//领奖时间已结束
	OPEN_CHALLENGE_HAS_ALREADY_GET          = 300007531;//已经领取过奖励
	OPEN_CHALLENGE_CAN_NOT_GET_REWARD       = 300007532;//还未到领奖时间
	
	XUNLEI_JINZUAN_VIP_INOF_SYSERR			= 300007538;//迅雷金钻系统错误
	
	WORLD_BOSS_FIGHT_END					= 300007539;
	WORLD_BOSS_FIGHT_NOT_START				= 300007540;
	WORLD_BOSS_PLAYER_RELIVE_CD				= 300007541;
	WORLD_BOSS_BOSS_HAS_ALREADY_DEAD		= 300007542;
	WORLD_BOSS_TOTAL_HURT_NOT_ENOUGH		= 300007543;
	WORLD_BOSS_HURT_REWARD_ALREADY_GET     	= 300007544;
	WORLD_BOSS_NO_REWARD_CAN_GET			= 300007545;
	WORLD_BOSS_CALL_NEXT_WAVE				= 300007546;//正在召唤下一波怪中
	
	ZHUAN_PAN_NOT_IN_LOTTERY_TIME			= 300007560;//不在抽奖时间范围内
	ZHUNA_PAN_NOT_IN_ACTIVITY_TIME			= 300007561;//不在活动时间范围内
	
	LUCK_TREE_NOT_IN_LOTTERY_TIME			= 300007562;//不在祈福时间范围内
	LUCK_TREE_NOT_IN_ACTIVITY_TIME			= 300007563;//不在活动时间范围内
	LUCK_TREE_REWARD_HAS_ALREADY_GET		= 300007564;//奖励已经领取过
	LUCK_TREE_LEVEL_LIMIT_50				= 300004565;//50连抽等级限制
	//**************************************************************************
	
	// add by weiwei from 0x300008001
	// scene
	SCENE_NOT_EXIST				= 300008001;   //场景不存在
	CANNOT_ENTER_SCENE			= 300008002;   //不能进入场景
	SCENE_LV_LIMIT				= 300008003;   //场景等级限制
	PLAYER_NOT_IN_SCENE			= 300008004;	//玩家不在场景中
	TARGET_NOT_IN_SCENE			= 300008005;	//目标不在场景中
	SAME_SCENE					= 300008006;    //场景相同
	
	// stage
	
	STAGE_STATUS				= 300008020;   //关卡状态错误
	STAGE_ONE_TIME				= 300008021;   //废弃
	COMMON_STAGE_NOT_PASSED		= 300008022;   //废弃
	PREV_STAGE_NOT_PASSED		= 300008023;   //之前关卡没有通关
	CHECK_FIGHT_RESULT_FAILED	= 300008024;   //战斗结果错误
	STAGE_STAR_ERR				= 300008025;   //关卡星级错误
	STAMINA_NOT_ENOUGH			= 300008026;   //体力不足
	STAGE_FREE_TIME_NOT_ENOUGH  = 300008027;   //次数不足
	NOTIN_CORRECT_SCENE			= 300008028;   //不在正确的场景
	ELITE_STAGE_COUNT_LIMIT		= 300008029;   //精英关卡次数限制
	ALREADY_IN_BTL				= 300008030;   //仍在战斗中
	NOT_IN_BTL					= 300008031;   //没在战斗中
	BTL_RESULT_CHECK_FAILED		= 300008032;   //战斗结果检查错误
	STAGE_NOT_EXIST				= 300008033;   //关卡不存在
	CHAPTER_AWARDED				= 300008034;   //章节奖励已经领取
	CHAPTER_STAR_NOT_ENOUGH     = 300008035;   //章节星级不足
	STAGE_SD_COUNT				= 300008036;   //关卡扫荡次数不足
	STAGE_RESET_COUNT			= 300008037;   //关卡重置次数不足
	NOT_IN_CORRECT_BTL			= 300008038;   //不在正确的战斗中
	STAGE_CANNOT_OPEN_BOX		= 300008039;   //关卡宝箱错误
	// elite invate
	ELITE_INVADE_NOT_EXIST      = 300008050;   //精英入侵不存在
	ELITE_INVADE_FINISHED       = 300008051;   //精英入侵结束
	NOT_IN_TIME			 		= 300008052; //不在活动时间
	LEVEL_NOT_ENOUGH	 		= 300008053; //等级不足
	ABILITY_NOT_ENOUGH   		= 300008054; //战力不足
	
	
	// mail
	MAIL_NOT_EXIST				= 300008100;
	MAIL_TITLE_CONTENT_LEN      = 300008101;
	MAIL_SEND_NAME_ERROR        = 300008102;
	MAIL_MAX_SEND_NUM	        = 300008103;
	
	// task
	TASK_NOT_EXIST				= 300008150;
	TASK_ALREADY_FINISH			= 300008151;
	TASK_NOT_FINISH				= 300008152;
	// activity 
	ACTIVITY_NOT_EXIST			= 300008160;
	ACTIVITY_NOT_FINISH			= 300008161;
	ACTIVITY_ST_ERR				= 300008162;
	ACTIVITY_REWARD_NOT_EXIST   = 300008163;
	ACTIVITY_NOT_INTIME			= 300008164;
	ACTIVITY_ALREADY_FINISH     = 300008165;
	
	//swap action
	SWAP_ACTION_NOT_EXIST       = 300008200;
	SWAP_ACTION_LEVEL_LIMIT     = 300008201;
	SWAP_ACTION_COUNT_LIMIT     = 300008202;
	SWAP_ACTION_LOGIC_ERR		= 300008203;
	
	// GUAJI 
	GUAJI_BOSS_PASSED			= 300008300;
	GUAJI_IN_BTL                = 300008301;
	GUAJI_NANDU_NOT_OPEN		= 300008302;
	GUAJI_NOT_OPEN              = 300008303;
	GUAJI_BOSS_FIGHT_CD			= 300008304;
	GUAJI_NOT_IN_OPENTM			= 300008305;
	GUAJI_PVP_IMMU			    = 300008306;
	GUAJI_NOT_IN_RANK			= 300008307;
	GUAJI_JINGLI_LIMIT          = 300008308;
	GUAJI_PVP_ALREADY_GET_REWARD = 300008309;
	GJPVP_STEAL_NOT_ENOUGH		= 300008310;
	GUAJI_CHANGE_PVPER_CD		= 300008311;
	GUAJI_BAG_IS_FULL			= 300008312;
	GUAJI_BOSS_LV_LIMIT			= 300008313;
	GUAJI_PVP_RANK_NOT_REFRESH  = 300008314;
	
	//team
	TEAM_ENTER_APPLYER			= 300008400;
	TEAM_NOT_EXIST				= 300008401;
	TEAM_FULL                   = 300008402;
	TEAMPLAY_NOT_FOUND			= 300008403;
	TEAM_CROSS_ERR				= 300008404;
	TEAMMEM_ALREADY_IN_TEAM		= 300008405;
	TEAM_NOT_START_YET			= 300008406;
	TEAM_STOP_NOT_ALLOWED		= 300008407;	//不允许停止队伍活动
	TEAM_DISMISS_NOT_ALLOWED	= 300008408;	//不允许解散队伍
	TEAM_KICK_NOT_ALLOWED		= 300008409;	//不允许踢
	TEAM_CREATE_ERR				= 300008410;
	
	
	//国战
	CW_NOT_IN_ABILITY_RANK		= 300008420;  //不在战力榜前15名
	//CW_EXCEED_CANDIDATE_NUM	= 300008421;
	CW_NOT_IN_REGISTER			= 300008422;  //没有报名
	CW_NOT_GENERAL				= 300008423;  //不是将军
	CAMP_KIND_NOT_IN_RANGE		= 300008424;  //阵营类型错误
	CW_VOTE_NOT_ENOUGH			= 300008425;  //票数不足
	CW_RAND_CAMP_ERR			= 300008426;  //随机阵营错误
	CW_MOVE_POS_ERR				= 300008427;  //移动位置错误
	CW_IN_MOVE_CD				= 300008428;  //在移动CD中
	CW_CANNOT_MOVE				= 300008429;  //不能移动
	CW_CANNOT_ENTER_CITY		= 300008430;  //不能进入city
	CW_CANNOT_FIND_AVAI_ENEMY	= 300008431;  //不能找到合适的敌人
	CW_IN_XINGDONG_CD			= 300008432;  //在行动CD中
	CW_CANNOT_CONSTRUCT			= 300008433;  //不能建造云梯
	CW_SKILL_IN_CD				= 300008434;  //技能CD中
	CW_SKILL_CANNOT_USE			= 300008435;  //技能不能使用
	CW_CANNOT_VOTE_OTHER_CAMP   = 300008436;  //不能投票给其他阵营
	CW_XINGDONG_NOT_ENOUGH		= 300008437;  //行动力不足
	CW_NOT_IN_JUNGONG_RANK		= 300008438;  //军功排名不足
	CW_RANK_REWARD_ALREADY_GET	= 300008439;  //军功奖励已经获取
	CW_CASTAL_WUDI				= 300008440;  //城堡处于无敌中
	CW_CROSS_COUNT_ERR			= 300008441;  //该跨服战区服务器不足
	CW_CITY_CAMP_FULL			= 300008442;  //该城某阵营已满
	CW_RANK_REWARD_TM_ERR		= 300008443;
	CW_SELECT_PLAYER_IN_CD		= 300008444;
	CW_CANNOT_ATTACK_BUILDING	= 300008445;  //不能进攻该建筑
	CW_ZULONG_CHECK_FAILED		= 300008446;  //祖龙之印未安放
	CW_CANNOT_CHANGE_TO_INST	= 300008447;  //不能变身
	CW_RAND_TASK_MAX_LIMIT		= 300008448;  //民生民情已完成任务数量已达到上限
	CW_ZHAOJI_TIME_EXPIRED		= 300008449;  //召集令超时
	CW_PLAYER_IN_INST			= 300008450;  //变身中
	CW_CITY_BAOHU				= 300008451;
	
	//拍卖行
	AUCTION_NOT_OPEN        	= 300008500; //拍卖行未开启
	AUCTION_PRICE_ERR			= 300008501; //价格上下限错误
	AUCTION_BAOWU_CANNOT_BE_SELL = 300008502; //宝物不能上架出售
	AUCTION_CANNOT_SELL			= 300008503; //不能售卖
	AUCTION_HAS_BUYER           = 300008504; //已经有玩家竞价该物品
	AUCTION_AUTO_BID			= 300008505; //设置自动竞价错误
	AUCTION_NO_ITEM				= 300008506; //没有该竞拍物品
	AUCTION_REPEAT_BID			= 300008507; //重复竞价
	AUCTION_BUY_SELF			= 300008508; //不能购买自己出售的商品
	AUCTION_ITEM_CANNOT_SELL	= 300008509; //该物品不能售卖
	//AUCTION_SELLCNT_LIMIT		= 300008510; //物品超过每日上架数量限制
	AUCTION_SELLBWCNT_LIMIT     = 300008511;
	AUCTION_SELLITEMCNT_LIMIT   = 300008512;
	AUCTION_BUY_PRICE_ERR		= 300008513;
	
	//秘境探险
	MJTX_CANNOT_GET_REWARD		= 300008550;
	MJTX_POS_CANNOT_ATK			= 300008551;
	MJTX_CANNOT_ENTER_NEXT_LEVEL = 300008552;
	
	//小基金
	FUND_CHARGE_CONDITION_NOT_ENOUGH = 300008600;
	FUND_HAS_BUY					 = 300008601;
	CANNOT_GET_FUND_REWARD			 = 300008602;
	FUND_REWARD_ALREADY_GET			 = 300008603;
	FUND_REWARD_TM_ERR				 = 300008604;
	FUND_BUY_TM_ERR					 = 300008605;
	
	//战宠觉醒玩法
	PET_WAKEUP_PLAY_COUNT_NOT_ENOUGH			= 300008650;
	PET_WAKEUP_PLAY_CHAPTER_REWARD_ALREADY_GET 	= 300008651;
	PET_WAKEUP_PLAY_CANNOT_FIGHT				= 300008652;
	
	//神器养成
	ARTIFACT_PART_JINJIE_NOT_ENOUGH	 = 300008660;
	ARTIFACT_XILIAN_ALREADY_LIMIT  	 = 300008661;
	
	//新基金
	VIP_FINANCE_INFO_ALREADY_GET	= 300008670;
	VIP_FINANCE_INFO_BUY_LIMIT      = 300008671;
	
	//巅峰对决
	WC_TEAM_FIGHT_ERROR				= 300008672;
	WC_REWARD_ALREADY_GET    	    = 300008673;
	WC_REWARD_NOT_IN_RANK			= 300008674;
	WC_DIANZAN_PLAYER_NOT_EXIST	    = 300008675;
	WC_DIANZAN_EXCEED_LIMIT			= 300008676;
	
	
	
	
	
	//英雄养成系统
	HERO_NOT_EXIST 			= 350000001;	//此英雄不存在
	HERO_LEVEL_OVER_PLAYER 	= 350000002;	//英雄不能超过主角等级
	HERO_LEVEL_MAX 			= 350000003;	//英雄达到最大等级
	HERO_NUM_OVER_MAX 		= 350000005;	//英雄达到最大数量
	HERO_NOT_ENOUGH			= 350000006;	//英雄数量不足
	HERO_IS_NULL	 		= 350000007;	//英雄为白板英雄
	HERO_LEVEL_NOT_ENOUGH 	= 350000008;
	HERO_SHENGJIE_MAX		= 350000009;	//英雄升到最高阶
	STATIC_DATA_NOT_EXIST 	= 350000004;	//静态数据不存在
	HERO_SUMMON_TIMES_NOT_ENUOUGH = 350000010; //抽将次数不够
	
	//布阵
	BUZHEN_OVER_MAX_NUM 	= 350000150;	//超过可上阵英雄数量
	BUZHEN_PLAYER_DOWN 		= 350000151; 	//主角不能下阵
	BUZHEN_NOT_SAME 		= 350000152;	//阵上不能有相同的英雄
	BUZHEN_POS_NOT_OPEN		= 350000153;    //阵位没有开启
	BUZHEN_BTL_HERO_NOT_ENOUGH = 350000164; //上阵英雄不足
	//宝物
	BAOWU_NOT_EXISTS 		= 350000154;	//宝物不存在
	BAOWU_MOSHI_NOT_SAME	= 350000155;	//已装备该类型的魔石
	BAOWU_STRENGTH_OVER 	= 350000156;	//强化达到上限
	BAOWU_MOSHI_OPEN_LIMIT  = 350000157;	//超过开孔上限
	BAOWU_MOSHI_NOT_OPEN	= 350000158;	//附魔孔未开放
	BAOWU_KEYIN_MAX_LEVEL 	= 350000159;	//达到最大刻印等级
	BAOWU_QUALITY_LOW		= 350000160;	//宝物品质不足
	BAOWU_OVER_MAX_NUM 		= 350000161;	//宝物达到上限
	BAOWU_IN_BINDING        = 350000162;    //宝物绑定中
	BAOWU_IN_AUCTION		= 350000163;    //宝物拍卖中
	
	// Family
	FAMILY_ABILITY_LIMIT 	= 350000200;	//公会职位限制
	FAMILY_MEMBER_OVER 		= 350000201;	//工会人数已满
	FAMILY_MEMBER_CD_TIME	= 350000202;	//冷却时间内，无法完成此操作
	FAMILY_AUTH_NOT_ENOUGH 	= 350000203;	//权限不足
	FMAILY_BEEN_APPLYED		= 350000204;	//已经申请过该工会
	FAMILY_DONATE_SCORE_NOT = 350000205;	//工会捐献积分不足
	FAMILY_REWARD_RECEIVED  = 350000206;	//奖励已领取
	FAMILY_NOT_EXISTS		= 350000207;	//工会不存在
	FAMILY_NAME_SAME		= 350000208;	//工会名已存在
	FAMILY_QUIT_LIMIT		= 350000209;	//工会超过5人，无法解散
	
	//商店
	SHOP_ITEM_CONDITION_ERR	= 350000301;	//条件不足
	SHOP_REFRESH_ERR		= 350000302;	//刷新出错
	SHOP_REFRESH_TIME_OVER	= 350000303;	//刷新次数达到上限
	MALL_OVER_NUM			= 350000321; 	//超过购买数量
	BUY_TIME_OVER_LIMIT   	= 350000322;	//达到购买上限
	STAMINA_OVER_MAX 		= 350000323;	//超过体力上限
	SHOP_ITEM_NOT_EXISTS 	= 350000324;	//商品不存在
	SHOP_COIN_CONSUME_LIMIT = 300000325;	//货币消耗达上限
	SHOP_NOT_OPEN			= 300000326;	//商店已关闭
	
	//时装
	CLOTHES_SEX_WRONG 		= 350000350;	//无法购买异性时装
	CLOTHES_EXISTS			= 350000351;	//时装已获得
	CLOTHES_NOT_ACTIVE		= 350000352;	//时装未激活
	
	// time price
	GJJINGLI_TIMES_BUY_OVER_MAX      = 350000400;    //购买挂机精力购买次数超过最大值
	
	ZILLI_ERROR		= 350000500;	//
	
	//神器玩法
	MINE_STATUS_LOCK		= 300000328;//当前矿点正在战斗中
	MINE_INVITE_HELPER		= 300000329;//已经有协助者
	MINE_APPLY_OVER			= 300000330;//时间不够申请
	MINE_LOSTED				= 300000331;//矿点丢失
	MINE_INVITE_LIMIT		= 300000332;//协助次数已满
	
	//军团
	CW_LEGION_MEMBER_OVER	= 300000334;//军团人数已满
	CW_LEGION_MEMBER_CD		= 300000335;//cd时间
	CW_LEGION_NAME_EXISTS	= 300000336;//名称已存在
	CW_LEGION_NAME_ERR		= 300000337;//存在非法字符
	CW_LEGION_AGREE_ERR		= 300000338;//该申请以被处理
	CW_LEGION_CITY_FULL		= 350000410;//城池已满
	CW_LEGION_CITY_NOT_FOUND= 350000401;//城池以被接收
	CW_LEGION_ALREADY_IN	= 350000402;//已经加入其他军团
	//宝石迷阵
	JEW_POS_INVALID			= 300000340; //pos0或pos1超出范围
	JEW_POS_NOT_CLOSE		= 300000341;	//pos不相临
	JEW_OUT_OF_ENERGY		= 300000342; //精力不足
	
	//360礼包激活
	V360_GIFT_ACTIVE_CODE_ERROR = 300000343; //激活码错误
	V360_GIFT_ACTIVE_ALREADY_GET = 300000344; //已经领过
	
	//卡牌大师
	POKER_CANNOT_BUY        = 300000345; //卡牌为不可购买
	
	//限时宝藏
	KEYSHOP_SHOP_NOT_OPEN   =300000346;//商店未开启
	KEYSHOP_SHOP_NOT_EXIST  =300000347;//商品不存在
	KEYSHOP_OUT_OF_LIMIT    =300000348;//超出购买限制
	KEYSHOP_SHOP_HAS_OPEN   =300000349;//商店已开启
	
	//改名卡
	PLAYER_NAME_UNLEGAL     = 300000350;//玩家姓名不合法
	FAMILY_NAME_UNLEGAL     = 300000351;//公会姓名不合法
	FAMILY_NAME_CANT_CAHNGE = 300000352;//公会姓名不能更改
	
	//群聊
	GROUP_CHAT_COUNT_LIMIT  = 300000354;//超过人数上限
	GROUP_CHAT_ONLY_ONE     = 300000355;//群聊只能创建一个
	GROUP_CHAT_NOT_CREATER  = 300000356;//必须是群主才能操作
	GROUP_CHAT_NOT_EXIST    = 300000357;//讨论组不存在
	GROUP_CHAT_HAVE_JOIN    = 300000358;//已经在该讨论组
	GROUP_CHAT_NEED_WAIT    = 300000359;//需等待发言
	
	//坐骑占星
	HORSEDIV_POS_NOT_OPEN   = 300000360;//位置没有开启
	HORSEDIV_HAS_ACTIVED    = 300000361;//位置已经被激活
	
	//角色头像
	PLAYER_AVATAR_CAN_NOT_USE = 300000362;//头像无法使用
	PLAYER_AVATAR_CAN_NOT_ACT = 300000363;//头像无法激活
	PLAYER_AVATAR_NEED_NOT_ACT = 300000364;//头像不需要激活
	PLAYER_AVATAR_HAS_ACT = 300000365;//头像已经激活
	
	//一元抢购
	ROBBUY_OUT_OF_LIMIT	= 300000367;//超出购买限制
	
	//结婚系统
	MARRIAGE_PROPOSED = 300000366;//已经向此人求过婚
	MARRIAGE_GOLD_DIAMOND_NOT_ENOUGH = 300000368;//对方金钻不足
	MARRIAGE_DIVORCE_TIME_NOT_ENOUGH = 300000369;//不满足失踪离婚的条件
	MARRIAGE_CANDY_LIMIT = 300000370;//单场婚礼糖果领取上限
	MARRIAGE_DIVORCE_LIMIT = 300000371; //婚礼进行中 无法离婚
	MARRIAGE_PACKET_OVER = 300000372;//红包领完了
	MARRIAGE_STATE_ERROR = 300000376;//当前不是单身
	//玩家雕像
	STATUE_NOT_IN_RANK 				= 300000377; //玩家不在排行榜
	STATUE_WORSHIP_TIMES_LIMIT 		= 300000378; //玩家膜拜次数限制
	ROBBUY_HAVE_NOT_JOIN			= 300000379; //未参与抢购
	SUPER_SALE_REFRESH_TIME_ERR		= 30000390;	//限时优惠刷新次数耗尽
	
	//全服竞技
	WORLD_ARENA_TIME_NOT_ENOUGH     = 300000381; //次数不够
	WORLD_ARENA_LOCKING				= 300000382; //锁定中 
	WORLD_ARENA_NOT_OPEN			= 300000383; //未到开放时间
	

	// 守护女神
	FAMILY_GAUNTLET_PLAYER_FIGHTING = 350000600;	//玩家正在战斗中
	FAMILY_GAUNTLET_PLAYER_DIED		= 350000601;	//玩家死亡
	FAMILY_GAUNTLET_TARGET_FIGHTING = 350000602;	//目标正在战斗中
	FAMILY_GAUNTLET_TARGET_DIED		= 350000603;	//目标死亡
	FAMILY_GAUNTLET_PLAYER_FIGHTCD	= 350000604;	//战斗CD中
	FAMILY_GAUNTLET_NOT_IN_LEVEL_TIME	= 350000605;	//不在调整难度的时间内
	
	//资源大亨
	RICHMAN_REWARD_ERR				= 999909020;	//未达到领取条件
	//英雄进化
	TUPO_LEVLE_LIMIT                = 57000008;     //英雄突破等级不足
	EVOLVE_LEVLE_LIMIT              = 57000025;     //英雄进化等级不足
	FORCE_NODE_NOT_EXIST            = 57000026;     //原力节点不存在，激活失败
	MAX_LEVEL_REACHED               = 30609016;	//已达最高级	
}

//登陆ecececec
message GetPlayerOnlineDataRes{
	optional PlayerInfoNotify playerInfo=1;
	optional EnterScenePlayerNotify sceneNotify=2;	
	optional ShowLineStateRes linesate=3;
	optional SystemSettingsNotify setting=4;
	optional SystemTimeNotify time=5;
	optional FunctionTimesNotify functionTime=6;
	optional PlayerDataNotify playerdata=7;
	//optional SaddleHorseNotify horsenotify = 8;
	//optional FunctionOpenTimeNotify functionOpenTime = 8;
	optional TaskGetCurInfoRes taskInfo = 9;
	optional GetSwapActionsRes saInfos = 10;
	optional CompeteOpenTimeRes cOpenTm = 11;
	optional GetTimesBuyRes gtb = 12;
	optional PTChatPlayerInfoRes ptcpi = 13;
	optional PanelViewRes pvr = 14;
	optional PlayerGetSaddleHorsesRes pgsh = 15;
	optional ClothesBagRes cbr = 16;
	optional ClothesSkillBagRes csbr = 17;
	optional LotteryInfoRes lir = 18;
	optional VipGetFirstChargeRes vgfcr = 19;
	optional GetStageInfosRes sInfos = 20;
	optional CanSignInRes csi = 21;
	optional VipMonthCardRes vmc=22;
	optional uint32 babelHistopStar=23;
	optional uint32 sevenDayCloseStamp = 24;
	optional ServerInfo server = 25;
	optional SuperSaleInfoData supersaleinfo = 26;
	optional OpenFundInfoData openfundinfo = 27;
	optional PriviLevelInfoData privilevelinfo = 28;
	optional Gift360LevelInfoData git360levelinfo = 29;
	optional SougouRewardInfoData sougouinfo = 30;
	optional DuowanNewerCardInfoData duowaninfo = 31;
	optional GetVipInfoRes vipGift=32;
	optional FunctionActionNotify functionAction = 33;
	optional CardInfoNotify cardInfo = 34;  
	optional MobileBindInfData mobilebindinfo = 35;
	optional WeixinCheckInfData weixininfo = 36;
	optional WeiDuanRewardInfo weiduan=37;
	optional uint32 fourteenDayCloseStamp=38;
	optional ActivityDropStaticNotify acdInfo = 39;
	optional OpenChallengeInfo openchageinfo = 40;
	optional ValentineSpringOpen valentineSpring=41;
	optional JueRoadInfoData jueroadinfo = 42;
	optional XunleiJinzuanInfoNotify xunleijinzuan = 43;
	optional LuckTreeInfoRes lucktreeinfo = 44;
	optional MineSweepAllInfoRes mineSweepInfo=45;
	optional FashionListRes fashion=46;
	optional DragonBoatAllInfoRes dragonBoatInfo=47;
	optional uint32 petWakeupPlayStageId = 48;
	optional StaticCwarTimeData cwarTm = 49;
	//需要整合的协议， 相关同学查找一下
	//4061 COMPETE_OPEN_TIME
	//5336 GET_TIMES_BUY
	//4010 NORMAL_BAG
	//2010 P_T_CHAT_PLAYER_INFO
	//5010 PANEL_VIEW
	//7077 PLAYER_GET_SADDLE_HORSES
	//4075 SEVEN_DAY_AVAI_NUM
	//5301 CLOTHES_BAG
	//5304 CLOTHES_SKILL_BAG
	//4000 LOTTERY_INFO
	
	//未添加
	//7048 PLAYER_FRIENDS_INFO
	//5100 BAO_WU_BAG
	//8354 STATIC_ACTIVITYS
	//8350 ACTIVITY_GET_INFOS
}

message StaticCwarTimeData {
	message StaticCwarTimeModel {
		optional uint32 id = 1;
		optional string name = 2;
		optional uint32 startTm = 3;
		optional uint32 endTm = 4;
	}
	repeated StaticCwarTimeModel tms = 1;
}

message AutoAddBuzhenHeroRes{
	required uint32 baseId=1;
}
message FashionListRes{
	repeated FashionList list=1;
	repeated Item items=2;
}

message FashionList{
	optional uint32 id=1;
	optional bool curUseId=2;
	optional uint32 skillNum=3;
}

message LuckTreeInfoData {
	optional LuckTreeMemberInfo member = 1;//玩家自己的相关信息
	optional uint32 currentlevel = 2;//世界树等级
	optional uint32 currentexp = 3;//世界树经验
}
message ValentineSpringOpen{
	message EachModule{
		required uint32 moduleId=1;
		required uint32 openStamp=2;
		required uint32 closeStamp=3;
	}
	repeated EachModule eachModule=1;
	optional uint32 beatBossNum=2;
}

message OpenChallengeInfo {
	required bool hasget = 1;
	required bool canget = 2;
	optional uint32 openstamp = 3;
}
message XunleiJinzuanInfoNotify {
	required uint32 viplevel = 1;
	required bool canget = 2;
}
message MobileBindInfData {
	required bool binded = 1;
	required bool cangetreward = 2;
	required uint32 expiresin = 3;//上次获取的验证码的失效时间 0表示已经失效或没有获取过验证码
}
message WeixinCheckInfData{
	required bool alreadyget = 1;//表示已经领取了奖励
	required bool cangetreward = 2;//是否能领取奖励
}
message FunctionActionInfo {
	required uint32 funcid = 1;			//功能id
	required uint32 starttime = 2;		//时间未知时填0且status也为0
	optional uint32 status = 3;			//0:未开始 1:正在进行 
}
message FunctionActionNotify {
	repeated FunctionActionInfo actionInfos = 1;
}
message DuowanNewerCardInfoData {
	required bool newercard = 1;
}
message SougouRewardInfoData {
	required bool downloadreward = 1;
	required bool inputreward = 2;
}
message PriviLevelInfoData {
	repeated uint32 levels = 1;
}
message Gift360LevelInfoData {
	repeated uint32 levels = 1;
	optional uint32 starttime = 2;
	optional uint32 endtime = 3;
	optional bool hasget = 4;
	optional uint32 weishistarttime = 5;
	optional uint32 weishiendtime = 6;
	optional bool weixingift = 7; //是否领过微信兑换礼包
}
message OpenFundInfoData {
	required bool hasfund = 1;//是否已经购买基金
	required bool canfund = 2;//是否可以购买基金
	required bool candrawreward = 3;//是否可以领取普通奖励
	required bool cangetwelfare = 4;//是否可以领取全民福利
}
message SuperSaleInfoData {
	required bool canget = 1;
	repeated uint32 alreadyget = 2;
	optional bool qipao = 3;
}
message ServerInfo{
	optional uint32 opentime 	= 1;
	optional uint32 dist 		= 2;
	optional string distName 	= 3;
	optional string opName		= 4;
	optional string opId		= 5;
	optional uint32 hfTime      = 6;
}

message SaddleHorseNotify {
	repeated uint32 horseid = 1;
	required uint32 curhorse = 2;
	required uint32 curglory = 3;
	required uint32 star = 4;
	required uint32 exp = 5;
	repeated uint32 gloriesid = 6;
}
message BattleSvrCloseNotify {
	optional uint32 status = 1;
}

message TestReq{
	required uint64 stamp = 1;
}

message TestRes{
	required uint64 stamp = 1;
}

message OnlineSceneNotify {
	optional uint32 sceneId = 1;
	optional uint32 sex = 2;
	optional string name = 3;
}

////////////////team 相关/////////////////////////

message TeamBasicInfo{
	required uint64 id = 1;//room id
	optional uint32 lv = 2;
	optional uint32 count = 3;
	optional string name = 4;
	optional bool pwd = 5;
	optional uint32 kind = 6;
	optional uint32 npcId = 7;
	optional TeamSetting setting = 8;
	optional uint64 leaderId = 9;
	optional uint32 avatarid = 10;
	optional uint32 avatarframeid = 11;
	
	//下面是各功能独有的类别
	//optional uint32 shipquality = 9;//运镖船品质
}
message TeamListReq{
	required uint32 kind = 1;
	optional uint32 startPage = 2;
	optional uint32 endPage = 3;
	optional uint32 pageCount = 4;
}
message TeamListRes{
	required uint32 kind = 1;
	repeated TeamBasicInfo all = 2;
	optional uint32 totalCnt = 3;
}

message TeamCreateReq{
	required uint32 kind = 1;
	optional uint32 nandu = 2;
}
message TeamCreateRes{
	required uint64 id = 1;//room id
	optional TeamBasicInfo baseinfo = 2;
	optional uint32 kind = 3;
}
message TeamCreateNotify{
	required TeamBasicInfo info = 1;
}

message GuajiExtraReward {
	optional Reward reward = 1;
	optional uint32 gjSpeed = 2;
}

message GuajiMemberInfo {
	optional bool isStartFight = 1; //是否开始挂机
	optional Reward extra = 2; //自己的额外奖励
	optional GuajiExtraReward targetExtra = 3; //对他人产生的额外奖励
}

message BgMemberInfo {
	optional uint32 score = 1;
	optional uint32 degree = 2;
	optional uint32 winTimes = 3;
	optional uint32 failTimes = 4;
	optional BG_STATUS status = 5;
}

message TeamInvitedNotify {
	required uint32 kind = 1;
	required uint64 teamId = 2;
	optional BgPlayerInfo bgPlayer = 3;
	optional PlayerBaseInfo player = 4;
}

message TeamMember{
	message WorldArenaTeam{
		optional uint32  score = 1;
	}
	optional PlayerBaseInfo player = 1;
	optional GuajiMemberInfo guajiInfo = 2;
	optional BgBaseInfo bgBaseInfo = 3;
	//optional BgMemberInfo bgPlayerInfo = 3;
	optional WorldArenaTeam world = 4;
}
message TeamMemberState{
	required TeamMember mem = 1;
	required bool ready = 2;
}
message TeamEnterReq{
	required uint32 kind = 1;
	optional uint64 id = 2;
	optional string pwd = 3;
}

message TeamEnterNotify{
	required uint64 teamId = 1;
	required TeamMember mem = 2;
	required uint32 kind = 3;
}

message TeamMemInfoNotify{
	optional TeamInfo info = 1;
}

message TeamGetInfoReq {
	optional uint32 kind = 1;
}

message TeamGetInfoRes {
	optional TeamInfo info = 1;
}

message TeamMemberSynNotify {
	optional PlayerBaseInfo info = 1;
}

message TeamInfo {
	required uint64 id = 1;
	required uint64 leader = 2;
	required bool pwd = 3;
	repeated TeamMemberState all = 4;
	optional string teamname = 5;//其实就是队长的名字
	required uint32 kind = 6;  //队伍类型
	repeated TeamMember applys = 7; //申请者
	optional TeamSetting setting = 8; //team setting
	//下面是各功能独有的类别
	optional uint32 shipquality = 9;//运镖船品质
	
}
message TeamInfoNotify{
	optional TeamInfo info = 1;
	optional uint32 kind = 2;
}

message TeamCountChangeNotify {
	optional uint64 teamId = 1;
	optional uint32 memberCount = 2;
	optional uint32 kind = 3;
}

message TeamAutoReq {
	required uint32 kind = 1;
}

message TeamReadyReq{
	required bool ready = 1;
	required uint32 kind = 2;
}
//[TEAM_READY]
message TeamReadyNotify{
	required uint64 playerId = 1;//player id
	required bool ready = 2;
	required uint32 kind = 3;
}

message TeamKickReq{
	required uint32 kind = 1;
	required uint64 playerId = 2;//player id
}

message TeamKickNotify{
	required uint32 kind = 1;
	required uint64 playerId = 2;//player id
}

message TeamPwdReq{
	required uint32 kind = 1;
	required string pwd = 2;
}
//[TEAM_PWD]
message TeamPwdNotify{
	required bool pwd = 1;
	required uint32 kind = 2;
}

message TeamChangeheroReq{
	required uint64 id = 1;
}
//[TEAM_CHANGEHERO]
message TeamChangeheroNotify{
	required uint64 id = 1;//player id
	required uint32 cfgid = 2;
	required uint32 lv = 3;
	required uint32 kind = 4;
}
message TeamStartReq_Attr {
	required uint32 id = 1;
 	optional uint32 intv = 2;
 	optional string strv = 3;
 	optional bool bolv = 4;
}
message TeamStartReq {
	required uint32 kind = 1;
	repeated TeamStartReq_Attr attrs = 2;
}

message TeamStartNotify {
	required uint32 kind = 1;
}

message TeamBuZhenReq {
	required uint32 kind = 1;
	
}
message TeamBuzhenNotify {
	
}
//关闭面板
message TeamPanelCloseReq{
	required uint32 kind = 1;
}

message TeamLeaveReq {
	required uint32 kind = 1;
}

message TeamLeaveNotify {
	required uint32 kind = 1;
	required uint64 playerId = 2;
	optional uint64 newCaptainId = 3;
}

message TeamSetting {
	optional bool autoagreeall = 1;     	//是否自动批准任何人
	optional uint32 autoagreelevel = 2; 	//自动批准多少级以下的玩家
	optional uint64 autoagreeability = 3;   //自动批准战斗力大于多少的玩家
}

message TeamSettingReq {
	optional uint32 kind = 1;
	optional TeamSetting setting = 2;
}

message TeamReply {
	required uint64 playerId = 1;
	required bool isAgree = 2;
}

message TeamReplyReq {
	required uint32 kind = 1;
	repeated TeamReply reply = 2;
}

message TeamReplyRes {
	repeated uint64 playerId = 1; //对方已加入其他队伍 或者申请已过期 或者队伍已满
	required uint32 kind = 2;
}

message TeamReplyNotify {
	required uint64 teamId = 1;
	required bool isAgree = 2;
}

message TeamDismissReq {
	required uint32 kind = 1;
}

message TeamDismissNotify{
	required uint32 kind = 1;
	required uint64 teamId = 2;
}

message TeamStopReq {
	required uint32 kind = 1;
}
message TeamStopNotify {
	required uint32 kind = 1;
}


message TeamChangeNameReq{
	required uint32 kind = 1;
	required uint64 teamId = 2;
	required string name = 3;
}
//[TEAM_CHANGE_NAME]
message TeamChangeNameNotify{
	required uint32 kind = 1;
	required string name = 2;
}

////////////////team 相关 end/////////////////////////

////////////////战斗 相关/////////////////////////
message BattleActionData{
	required int32 id = 1;
	optional int32 data0 = 2;
	optional int32 data1 = 3;
	optional int32 data2 = 4;
	optional int32 data3 = 5;
}

message BattleManualReq {
	required int32 objid = 1;
}
message BattleTestReq {
}
message BattleTestStartNotify {
	required bool left = 1;
	repeated BattlePlayer player = 2;
}
message BattleTestRes {
	required bool result = 1;//比赛结果
}
message BattleActionNotify{
	repeated BattleActionData datas = 1;
}



////////////////战斗相关/////////////////////////
//////////////////////////////////////////////////

//系统设置一块
enum SETTING_ITEM	{	//system setting
	MUSIC_OPEN = 1;//音乐
	SOUND_OPEN = 2;//音效
	FRIEND_CANADD = 3;//允许被添加好友
	FRIEND_CANMAIL = 4;//允许好友给自己邮件
	NEW_PLAYER_GUIDE_1=5;//新手引导1
	NEW_PLAYER_GUIDE_2=6;//新手引导2
	GAME_QUALITY = 7;//画质
	RESOLUTION_RATIO = 8;//分辨率
	UI_ANIMATION = 9;//界面动画
	PEOPLE_DIAPLAY_AVALIABLE = 10;//同屏人数
	ANTI_ALIAS = 11;//抗锯齿
	DISPLAY_OTHER_PLAYERS = 12;//显示其他玩家
	DYING_FLASH = 13;//濒死泛光
	SCENE_SEPCIAL_EFFECT = 14;//场景特效
	OTHERS_SEPCIAL_EFFECT = 15;//他人特效
	OTHERS_TITLE = 16;//他人称号
	NPC_DISPLAY = 17;//NPC
	SOUND_QUALITY = 18;//音质
	MAIN_VOLUME = 19;//主音量
	BACKGROUND_VOLUME = 20;//背景音乐
	BATTLE_VOLUME = 21;//战斗音效
	SYSTEM_VOLUME = 22;//系统语音
	UI_VOLUME = 23;//界面音效
	DIALOG_VOLUME = 24;//对话语音
	REFUSE_ALL = 25;//一键拒绝
	REFUSE_FRIEND_REQUEST = 26;//拒绝好友请求
	REFUSE_STRANGER_DIALOG = 27;//拒绝好友请求
	REFUSE_GUILT_REQUEST = 28;//拒绝好友请求
	REFUSE_ALL_DIALOG = 29;//拒绝好友请求
	REFUSE_PVP = 30;//拒绝好友请求
	REFUSE_STRANGER_MAIL = 31;//拒绝好友请求
	PAYMENT_HINT_ALL = 32;//消费提示全选
	PAYMENT_HINT1 = 33;//消费提示1
	PAYMENT_HINT2 = 34;//消费提示2
	PAYMENT_HINT3 = 35;//消费提示3
	PAYMENT_HINT4 = 36;//消费提示4
	PAYMENT_HINT5 = 37;//消费提示5
	PAYMENT_HINT6 = 38;//消费提示6
	PAYMENT_HINT7 = 39;//消费提示7
	PAYMENT_HINT8 = 40;//消费提示8
	PAYMENT_HINT9 = 41;//消费提示9
	PAYMENT_HINT10 = 42;//消费提示10
	VERSION_ID	=	43;//版本号
	LOG_1 		=	44;//日志1
	LOG_2		=   45;//日志2
	FIRST_CHARGE_PANEL = 46; //首冲强弹3次
	XINSHOU_TIPS = 47; //新手tips
	ASSIS_BATTLEFIELD = 50;//小助手 战场设置[50,70]ID预留 都为小助手设置 适当加大了字节数限制
	ASSIS_SHENYUAN = 51;//小助手 深渊设置
	ASSIS_MYSTERYSHOP = 52;//小助手 神秘商店
	ASSIS_SETTING = 70;//小助手 左侧需要执行的功能的勾选状态
	GAMELOG_ONLY = 71;
	FAMILY_GAUNTLET = 54;//守护女神设置
	MAX = 100;
}
enum PLAYER_SEX {
	MALE = 1;
	FEMALE = 2;
}
//系统设置 SYSTEM_SETTINGS
//[]
message SystemSettingsReq{
	repeated SystemSettingData all = 1;
}

message SystemSettingData{
	required uint32 id = 1;
	required string s = 2;
}

message SystemSettingsNotify{
	repeated SystemSettingData all = 1;
}

//工会职位
enum FamilyPost{
	APPLY    = 0;  //申请人
	NEWBEE   = 1;  //新兵
	SOLIDER  = 2;  //战士
	CJ_S     = 3;  //初级士官
	ZJ_S     = 4;  //中级士官
	GJ_S     = 5;  //高级士官
	CJ_E     = 6;  //初级精英
	ZJ_E     = 7;  //中级精英
	GJ_E     = 8;  //高级精英
	CJ_C     = 9;  //初级指挥官
	ZJ_C     = 10; //中级指挥官
	GJ_C     = 11; //高级指挥官
	YUANLAO  = 12; //元老
	VICE     = 13; //副盟主
	LEADER   = 14; //盟主
}
enum familyLogType{
	ADD = 1;
	QUIT = 2;
	KICK = 3;
	APPOINT = 4;
	DONATE = 5;
	LEVEL = 6;
}

enum MAIL_KIND {
	SYSTEM = 1;
	USER   = 2;
	FAMILY = 3;
	YUNBIAO = 4;
	FAMILY_STAGE = 5;
	GM = 6;
	ZL = 7;//林志玲暂时
	AUC_BUY_SUC = 8;
	AUC_BUY_FAIL = 9;
	AUC_SELL_SUC = 10;
	OPEN_CHALLENGE = 11;
	WORLD_BOSS = 12;
	ZHUAN_PAN = 13;
	ZILLI_REWARD = 14;
	ZILLI_SCORE_REWARD = 15;
	RICHMAN_RANK = 16;		//资源大亨排行榜奖励发放
}

enum MAIL_STATUS {
	READ   = 1;
	UNREAD = 2;
}

// 心跳处理  请求返回都是这个 HEART_BEAT
//[HEART_BEAT,Res]
message HeartBeat {
	required uint32 v = 1;//发送给客户端  原文返回
	optional string ver = 2;
}

message ResStatus {
	optional uint32 kind = 1;
	optional uint32 modelId = 2;
	optional uint32 count = 3;
}

// 统一处理状态码 PROTOCOL_STATUS
message ProtocolStatusRes {
	optional uint32 cmd = 1;
	optional uint32 errCode = 2;
	optional ResStatus res = 3;
}


// 登陆游戏服务器 LOGIN (3, 2001)
message LoginReq {
	required string token = 1;
	required string account = 2;
	required uint32 district = 3;
	optional uint32 adult = 4;
	optional uint32 gameTime = 5;
	optional uint32 time = 6; 
	optional string browser = 7;
	optional string flashVersion = 8;
	optional string resolution = 9;
	optional string ip = 10;
	optional string qqParam = 11;
	optional uint32 weiduan = 12;
	optional string adInfo = 13;
	optional string regTime = 14;
	required string osInfo	= 15;
	optional uint32 srcdist = 16;

}
message RandomNameReq {
	required uint32 sex = 1;
}
message RandomNameRes {
	repeated string names = 1;
}
message PlayerLevelVipInfoNotify {
	required uint32 plevel = 1;
	required uint32 vlevel = 2;
}
//创角信息前端加载完毕
message ClientLoadFinishRes{
	optional uint32 finish=1;
}

// 创建角色 CREATE_PLAYER
message CreatePlayerReq {
	required string name = 1;
    required uint32 job = 2;
    optional uint32 sex = 3;
    required uint32 fashion = 4;
	optional uint32 adult = 5;
	optional string browser = 7;
	optional string flashVersion = 8;
	optional string resolution = 9;
	optional uint32 weiduan = 10;
	optional uint32 createkind = 11;
	required string osInfo	= 12;
}
//玩家场景展示信息变动通知
message WearChangeNotify{
	required uint32 kind = 1;
	optional uint32 id = 2;
	required uint64 uid = 3;
	optional PetSceneInfo pet = 4;
}

//玩家基本信息
message PlayerInfo {
	required uint64 id = 1;
	optional string name = 2;
    optional uint32 wing = 3;
    optional uint32 suit = 4;
	optional HeroInfo playerHero = 5;
	optional uint32 militaryrank = 6;
	optional uint64 familyId = 7;
	optional string familyName = 8;
	optional uint32 horse = 9;
	optional uint32 arenaRank = 10;
	optional uint32 gmType=11;
	optional uint32 vip=12;
	optional uint32 arenaHistTopRank = 13;
	optional PlayerQQInfo qqInfo = 14;
	optional uint32 showTitleId=15;
	repeated MapKey32Value32 support = 16; 
	optional uint32 haveRedHero = 17;
	repeated uint32 baowu = 18;
	optional uint32 avatarid = 19;
	optional uint32 avatarframeid = 20;
}

//玩家的QQ相关信息
message PlayerQQInfo{
	optional uint32 isBlueVip = 1;
	optional uint32 isBlueyearVip = 2;
	optional uint32 blueVipLevel = 3;
	optional uint32 isYellowVip = 4;
	optional uint32 isYellowyearVip = 5;
	optional uint32 yellowVipLevel = 6;
	optional uint32 isYellowHighvip = 7;
	optional uint32 vipType = 8;  //1 黄钻 2 蓝钻
	optional uint32 isBlueHighvip = 9;
	optional uint32 blueVipValid = 10;
	optional uint32 blueYearVipValid = 11;
	optional uint32 blueHighVipValid = 12;
	optional uint32 qq3366Level = 13;
}

// 玩家信息通知 PLAYER_INFO_NOTIFY
message PlayerInfoNotify{
	optional PlayerInfo player = 1;
}

message ItemReduce {
	optional uint64 id = 1;
	optional uint32 count = 2;
}

message ExpHeroInfo {
	optional uint32 id = 1;
	optional uint32 count = 2;
}

//TODO 到时候统一整理消减一下

message Source{
	required uint32 kind = 1;
	required uint32 count = 2;
}
//玩家数据变化信息（基本信息部分为全量） PLAYER_DATA_NOTIFY
//[]
message PlayerDataNotify {
	message BaseInfo {
		optional uint32 lv = 1;
		optional uint64 exp = 2;
		optional uint64 ability = 3;
		optional uint64 id = 4;
		optional uint32 militaryrank = 5;
		optional uint32 vip=6;
	}
	optional uint32 cmd = 1; // 哪个协议发送的通知类型，方便前端处理显示
	optional BaseInfo info = 2;
	repeated Item add_items = 3;
	repeated HeroInfo add_heroes = 4;
	repeated ItemReduce reduce_items = 5;
	repeated uint64 reduce_heroes = 6;
	repeated uint32 newheroids = 7;
	repeated Source source = 8;
	repeated BaoWu add_baowu = 11;
	repeated uint64 reduce_baowu = 12;
}

//进入场景请求 ENTER_SCENE
//[]
message EnterSceneReq {
	required uint32 sceneId = 1;	
}

message ScenePlayerInfo {
	required PlayerBaseInfo baseInfo = 1;
	optional int32 x = 2;
	optional int32 y = 3;
	optional uint32 kind = 4; // npcid类型 判断从哪张表读取
	optional uint32 hp = 5;
	repeated uint32 buffId = 6;
	optional uint32 maxhp = 7;
	optional uint32 orientation = 8;
	optional uint32 showTitleId=9;
	optional PetSceneInfo pet = 10;
}

//进入场景通知自身场景内玩家信息 ENTER_SCENE_PLAYER_NOTIFY
//[]
message EnterScenePlayerNotify {
	required uint32 sceneId = 1;
	repeated ScenePlayerInfo players = 2;
}

//进出场景通知他人 ENTER_SCENE_OTHER_PLAYER_NOTIFY
//[]
message EnterSceneOtherPlayerNotify {
	required ScenePlayerInfo player = 1;	
}

//玩家离开场景通知 LEAVE_SCENE_NOTIFY
//[]
message LeaveSceneNotify {
	required uint64 playerId = 1;
}

//玩家变线 ChangeCitySceneline 
//[]
message ChangeCityScenelineReq { 
	required uint32 line  = 1;
}

//玩家查看分线状态的需求
//[]
message ShowLineStateRes{
	message LineState{
		required uint32 id = 1;
		required uint32 state = 2;//0 代表空闲，1代表拥挤，2代表满员
	}
	repeated LineState state = 1;
	required uint32 line = 2;	//当前线的状态
}
//查看分线人数需求
//[]
message ShowLineNumberRes{
	required uint32 number = 1;
}

enum SBR_KIND{	//SimpleBattleReport 类型
	SBR_BG = 1;	//
}

message SimpleBattleHero {
	required uint32 npcId = 1;		//NpcId
	required uint32 level = 2;		//英雄等级
	required float maxHp = 3;		//最大血量
	required float initHp = 4;		//初始(战斗前)血量
	required float remainHp = 5;	//战后剩余血量
}

message SimpleBattlePlayer {
	optional uint64 id = 1;
	repeated SimpleBattleHero heroInfos = 2;
}

message SimpleBattleReport {
	required SimpleBattlePlayer self = 1;
	required SimpleBattlePlayer target = 2;
	required SBR_KIND			kind = 3;
}


message BattlePlayer {   //如果添加新字段 需要注意 会影响已存储战报
	optional int32 id = 1;					//唯一ID 战斗内使用
	optional int32 npc_id = 2;				//npcid
	optional int32 sex = 3;					//性别
	optional int32 kind = 4;					//类型
	optional int32 level = 5;					//等级
	optional int32 star_level = 6;			//星级
	optional int32 quality = 7;				//品质
	optional int32 career_id = 8;				//职业id
	optional int32 normal_attack_type = 9;	//普攻类型
	optional int32 normal_attack_id = 10;
	optional int32 rage = 11;
	optional int32 max_rage = 12;
	optional FightProp prop = 13;
	optional int32 skillId1 = 14; 			//技能id
	optional int32 skillId2 = 15;
	optional int32 skillId3 = 16;
	optional int32 skillId4 = 17;
	optional string skill_sort = 18;		//技能顺序
	optional int32 combat_power = 19;			//战斗力
	optional int32 hp_max1 = 20;			    //血量上限 废弃
	optional int32 posId = 21;				//位置ID 0~8
	optional int32 isAttack = 22;  			//是否是攻击方
	optional int32 x = 23;
	optional int32 y = 24;
	optional string buff = 25;
	repeated uint32 avatar = 26; // 主角 0 clothid 1 wingId 2 militaryRank  英雄 0 skin 1 神兵
	optional string name = 27;  //主角名称，非主角不填
	//optional int32 horse_skill_id = 28; //主角坐骑技能
	optional string skills = 28; //技能数组
	optional float leader_attack = 29;
	optional string skillps = 30; //配饰技能
	optional int32 fz_pos = 31; //法阵pos -1 没上阵  0 阵眼
	optional float hp_max = 32; // 之前的hp_max 废弃
}
//关卡战斗开始 STAGE_FIGHT_START
//[]
message StageFightStartReq {
	required uint32 stageId = 1;
}

//关卡战斗开始 STAGE_FIGHT_START
//[]
message StageFightStartRes {
	repeated Reward drops = 1;
	repeated uint32 random = 2;
	repeated BattlePlayer player = 4;
}

message SkillTimePoint {
	required int32 time_point = 1;
	required int32 obj_id = 2;
}

message StagePhaseCheckReq {
	required uint32 play_mode = 1; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 2;
	optional uint32 clientRet = 3;
	optional uint32 damage = 4;
}

message StagePhaseCheckRes {
	required int32 result = 1;
	repeated BattlePlayer player = 2;
	optional uint32 damage = 3;
}

message LvExp {
	required uint64 id = 1;
	required uint32 lv = 2;
	optional uint64 exp = 3;
}

//关卡战斗结束 STAGE_FIGHT_END
//[]
message StageFightEndReq {
	required uint32 stageId = 1;
}

//关卡战斗结束 STAGE_FIGHT_END
//[]
message StageFightEndRes {
	required uint32 stageId = 1;
	optional uint32 star = 2;
	optional LvExp player = 3;
}

message StageInfo {
	optional uint32 stageId = 1;
	optional uint32 star = 2;
	optional uint32 deadline = 3;   //刷新时间
	optional uint32 count = 4;	    //通关次数
	optional uint32 resetCount = 5; //重置次数
	optional bool openBox = 6; 	    //是否开过宝箱
}

message EliteInvadeFightStartReq {
	required uint32 id = 1;
}

message EliteInvadeFightStartRes {
	repeated Reward drops = 1;
	repeated uint32 random = 2;
	repeated BattlePlayer player = 3;
}

message EliteInvadeFightEndReq {
	required uint32 id = 1;
	required uint32 play_mode = 2; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
}

message EliteInvadeFightEndRes {
	required uint32 id = 1;
	optional uint32 result = 2;
	optional uint32 hp = 3;
	optional uint32 maxhp = 4;
	optional LvExp player = 5;
}

message EliteInvade {
	required uint32 id = 1;
	required uint32 hp = 2;
	required uint32 maxhp =3;
	required uint32 stamp = 4;
}

message GetStageInfoReq {
	optional uint32 chapterId = 1;
}

//获得关卡信息 GET_STAGE_INFOS
//[]
message GetStageInfosRes {
	repeated StageInfo infos = 1;
	repeated EliteInvade elites = 2;
}

message EliteInvadeNotify {
	repeated EliteInvade elites = 1;
}

message ChapterInfo {
	optional uint32 id = 1;
	optional uint32 step = 2;
	optional uint64 friend = 3;
}

//获得章节信息 GET_CHAPTER_INFOS
//[]
message GetChapterInfosRes {
	repeated ChapterInfo infos = 1; //已领取奖励章节id 
}

//获得章节奖励请求 GET_CHAPTER_REWARD
//[]
message GetChapterRewardReq {
	required uint32 chapterId = 1;
} 

//关卡扫荡请求 STAGE_SAODANG
//[]
message StageSaoDangReq {
	optional uint32 stageId = 1; //扫荡关卡id
	optional uint32 count = 2;	  //扫荡次数
}

//关卡扫荡请求 STAGE_SAODANG
//[]
message StageSaoDangRes {
	optional uint32 stageId = 1;
	optional LvExp player = 2;
}

//关卡重置请求 STAGE_RESET
//[]
message StageResetReq {
	required uint32 stageId = 1;
}

//关卡领取宝箱 STAGE_OPEN_BOX
//[]
message StageOpenBoxReq {
	required uint32 stageId = 1;
}

message TestDropGroupReq {
	optional uint32 dropModule = 1;
	optional uint32 dropGroupId = 2;
	optional uint32 count = 3;
}

message TestDropGroupRes {
	repeated Reward drops = 1;
}

//========背包系统========

//物品
message Item{
	optional uint64 id = 1;
	optional uint32 itemId = 2;
	optional uint32 count = 3;
	optional bool isEquiped = 4;
	optional uint32 place = 5;
	optional uint32 strengthId = 6;
	optional uint32 jinglianId = 7;
	optional uint32 jinglianExp = 8;
	optional uint64 ability = 9;
	repeated uint32 suit = 10;
	optional uint32 star=11;
	optional uint32 starExp=12;
	optional uint32 sjLevel=13;
	optional uint32 sjExp=14;
	optional uint32 horseStrnLv =15;
	optional uint32 horseStrnExp =16;
	optional uint32 horseTupo =17;
	repeated uint32 suitTupo = 18; //骑装套装专用
	optional uint32 expire = 19;
}

//获取背包信息 NORMAL_BAG
message NormalBagRes{
	repeated Item items = 1;	
}

//获取英雄或主角的当前装备
message EquipBagReq{
	required uint64 id = 1;//主角为0 英雄为英雄id
}

//获取英雄或主角的当前装备
message EquipBagRes{
	repeated Item equips = 1;
}

//卖出背包物品
message BagItemSellReq {
	message SellInfo {
		required uint64 itemId = 1;
		required uint32 count = 2;
	}
	repeated SellInfo info = 1; 
}

message BagItemUseReq {
	message UseInfo {
		required uint64 itemId = 1;
		required uint32 count = 2;
		optional uint32 choice = 3; //自主选择物品
	}
	repeated UseInfo info = 1;
}

message ShowItemReq {
	required uint64 playerId = 1;
	optional uint64 itemId = 2;
	optional uint64 baowuId = 3;
}

message ShowItemRes {
	optional Item item = 1;
	optional BaoWu baowu = 2;
}

//========================
//==========面板英雄 主角============
//面板

message PanelViewRes{
	repeated PanelBaseInfo list = 1;
	repeated HeroInfo Info = 2;
}

message PanelBaseInfo{
	required uint32 level = 1;
	optional uint32 baseId = 2;
	required uint64 id = 3;
	optional uint32 place = 4;
	optional uint64 ability = 5;
	repeated uint32 mengyue = 6;
	optional uint32 position = 7;
	optional uint32 shengjie = 8;
	repeated uint32 tupoItem = 9;
	optional ShenGridPageInfo shengridinfo = 10;
}

//==============英雄养成============

message HeroTestReq{
	required uint32 kind  = 1;
	required uint32 id = 2;
	required uint32 num = 3;
}
//升级
message IdAndNum {
	required uint32 id = 1;
	required uint32 num = 2;
}

message ExpHeroesRes{
	repeated ExpHeroInfo list = 1;
}
message HeroAddExpReq {
	required uint64 hero = 1;	//英雄id
	required uint64 item = 2;
	required uint32 num  = 3;
}

message HeroAddExpRes {
	required uint64 hero = 1;	//英雄id
	required uint32 level = 2;	//当前等级
	required uint64 exp = 3;	//当前经验
}

//突破
//[HERO_TUPO]
message HeroTuPoReq{
	required uint64 hero = 1;		//英雄id
	repeated uint64 cost = 2;		//消耗的英雄id
	required uint32 num = 3;		//白板英雄数量  TODO 改为 required
}
message HeroTuPoItemEquipReq{
	required uint64 hero = 1;		//英雄id
	required uint64 item = 2;		//消耗的道具id
}
//英雄碎片合成
message HeroCombineReq{
	required uint64 item = 1;  //碎片的生成id
}
//英雄培养
message HeroPeiyangReq{
	required uint64 hero = 1;
	required uint32 type = 2;
}
//英雄培养替换
message HeroPeiyangTihuanReq{
	required uint64 hero = 1;
}
//英雄升阶
message HeroShengjieReq{
	required uint64 hero = 1;
}
message HeroShengjieRes{
	required uint64 zhufu = 1;
	required bool	ok = 2;
}
//升阶记录
message HeroShengjieRecordReq{
	required uint32 hero = 1;
	required uint32 level = 2;
	optional uint32 kind = 3;
}
message ShengjieRecord{	
	required string server = 1;
	required string name = 2;
	required uint32 value = 3;	
}
message HeroShengjieRecordRes{
	repeated ShengjieRecord info = 1;
	optional uint32 hero = 2;
	optional uint32 level = 3;
	optional uint32 kind = 4;
}
//英雄进阶天赋
message HeroTalentReq{
	required uint64 id = 1;
	required uint32 tid = 2;
}
////英雄基础信息
message HeroBaseInfo{
	required uint64 id = 1;
	required uint32 baseId = 2;
	required uint32 level = 3;
	required uint64 exp = 4;
	optional BaseProp peiyang = 5;
	optional uint32 sj_level = 6;
	optional uint64 sj_exp = 7;
	repeated uint32 mengyue = 8;
	optional uint64 fightValue = 9;
	optional uint32 strengthLSlv = 10;
	optional uint32 jinglianLSLv = 11;
	repeated uint32 skill = 12;
	optional uint32 place = 13; //阵位
	optional uint32 position = 14;
	optional uint32 baowuStrLs = 15;
	optional uint32 baowuFumLs = 16;
	repeated uint32 tupoItem = 17;
	repeated uint32 talent = 18;
	optional uint32 skin = 19;
	repeated MapKey32Value32 fashionSkill = 20;
	optional uint32 artiJinjieId = 21;

	repeated uint32 activeForceNodeIds = 22; //已激活的原力节点
	optional bool	isartishow = 23;	
}
//英雄信息
message HeroInfo {
	optional HeroBaseInfo baseInfo = 1;
	repeated Item items = 2;
	optional FightProp prop = 3;
	repeated BaoWu baowu = 4;
	optional ShenGridPageInfo shengridinfo = 5;
}

message HeroInfoNotify {
	required HeroInfo info = 1;
}

message HeroAllInfoNotify{
	repeated HeroInfo info = 1;
}

//面板属性
//[HERO_PEIYANG,Res]
message BaseProp {
	optional float hp                       = 1; 
	optional float attack                   = 2; 
	optional float physical_defence         = 3; 
	optional float magic_defence            = 4; 
	optional float agility                  = 5; 
}

//战斗属性
message FightProp{
	optional float hp                       = 1; 
	optional float attack                   = 2; 
	optional float physical_defence         = 3; 
	optional float magic_defence            = 4; 
	optional float agility                  = 5; 
	optional float hit_rating               = 6; 
	optional float dodge_rating             = 7; 
	optional float crit_rating              = 8; 
	optional float resilience_rating        = 9; 
	optional float block_rating             = 10; 
	optional float hp_add                   = 11; 
	optional float attack_add               = 12; 
	optional float physical_defence_add     = 13; 
	optional float magic_defence_add        = 14; 
	optional float agility_add              = 15; 
	optional float defence_add              = 16; 
	optional float rage_add                 = 17; 
	optional float demage_add               = 18; 
	optional float hurt_add                 = 19; 
	optional float physical_hurt_add        = 20; 
	optional float magic_hurt_add           = 21; 
	optional float be_treament_increase_ratio = 22;
	optional float treament                 = 23; 
	optional float hit_ratio                = 24; 
	optional float dodge_ratio              = 25; 
	optional float crit_ratio               = 26; 
	optional float resilience_ratio         = 27; 
	optional float block_ratio              = 28; 
	optional float crit_damage_rating       = 29; 
	optional float crit_damage_ratio        = 30; 
	optional float damage_increase_ratio    = 31; 
	optional float treatment_increase_ratio = 32;
	optional float rage_recovery 			 = 33; 
	optional float hp_recovery 			 = 34;    
	optional float defence_add_extra		 = 35;     
	optional float hp_ori					=36; //法阵专用血量
}


message HeroInfoReq{
	required uint64 id = 1;
}

//============布阵===========
//布阵改变  包括上阵 下阵 替换
message BuZhenChangeReq{
	required uint32 kind = 1;
	optional uint32 from = 2;
	optional uint32 to = 3;
	optional uint64 hero = 4;
}
//打开布阵界面需要的数据
message BuZhenViewRes{
	repeated PanelBaseInfo list = 1;
	repeated HeroInfo info = 2;
	optional BuZhenInfo buZhen = 3;
}

message BuZhenListReq{
	required uint32 position = 1;
	optional uint64 hero = 2;
}

message BuZhenListRes{
	repeated HeroInfo info = 1;
}

//布阵信息
//[BU_ZHEN_CHANGE,res]
message BuZhenInfo{
	repeated BuZhen list = 1;
}
message BuZhen{
	optional uint32 place = 1;
	optional uint64 id = 2;
}

message BuZhenSupportReq{
	required uint32 position = 1;
	optional uint64 hero = 2;
}

message BuZhenSupportRes{
	repeated HeroInfo info = 1;
}

//一个战斗对象
message FightMemberInfo{
	required uint64 id = 1;
	required uint32 baseId = 2;
	optional uint32 level = 3;
	optional FightProp prop = 4;
	optional uint32 skill = 5;
}
//战斗队伍数据
message FightTeamInfo{
	repeated FightMemberInfo team = 1;
}
//==========================================

//==========用户抽将==========

message Rewards {
	repeated Reward rwds = 1;
}

message Reward {
	optional uint32 dropType = 1;			//掉落类型
	optional uint32 dropId = 2;			//掉落id；当dropType为HERO时，该id对应heroId；当dropType为物品时，该id对应itemId
	optional uint64 count = 3;			//数量
	optional uint64 id = 4;				//生成id，唯一
}
//******************************************************************************
//dongming begin
message LuckTreeWorldExpNotify {
	required uint32 level = 1;
	required uint32 exp = 2;
}
message LuckTreeGetRewardReq {
	required uint32 kind = 1;//1:领取个人积分奖励 2:领取世界树奖励
	required uint32 level = 2;//领取奖励的等级
}
message LuckTreeGetRewardRes {
	repeated Reward rewards = 1;
	required uint32 level = 2;
	required uint32 kind = 3;
}
message LuckTreeDajiangRecord {
	required uint64 playerid = 1;
	required uint32 timestamp = 2;
	required uint32 itemid = 3;
	required uint32 level = 4;//表示个人树或是世界树升到了哪一级
	required uint32 kind = 5;//1:玩家获得的大奖 2:玩家幸运树升级 3:世界树升级
	required PlayerBaseInfo baseinfo = 6;
	optional uint32 autoid = 7;
}
message LuckTreeDajiangNotify {
	repeated LuckTreeDajiangRecord records = 1;//所有的
	repeated LuckTreeDajiangRecord newadd = 2;//新增的
}
message LuckTreeBuyReq {
	required uint32 itemid = 1;
	required uint32 count = 2;
}
message LuckTreeBuyRes {
	repeated Reward rewards = 1;
	required LuckTreeBuyItemInfo buyinfo = 2;//只是自己的
}
message LuckTreeCheerReq {//普通转盘
	required uint32 kind = 1;//1-表示单次祝福 2-表示十次祝福
}
message LuckTreeCheerRes {//普通转盘
	repeated Reward rewards = 1;
	required bool issuper = 2;//是否有大奖
	required uint32 itemid = 3;//表示抽中的是那个大奖(单抽)
	repeated uint32 itemids = 4;//表示十连抽中的大奖ID
	optional uint32 score = 5;
	optional uint32 newlevel = 6;//玩家等级
	optional uint32 newexp = 7;//玩家经验
}
message LuckTreeBuyItemInfo {
	required uint32 itemid = 1;
	required uint32 count = 2;
}
message LuckTreeMemberInfo {//玩家自己的相关信息 -- 待扩充
	required uint32 score = 1;//积分
	required uint32 curlevel = 2;//幸运币
	required uint32 curexp = 3;
	repeated LuckTreeBuyItemInfo buyinfo = 4;//购买的相关信息
	repeated uint32 levelw = 5;//个人数已经领取的奖励等级
	repeated uint32 levelp = 6;//世界树已经领取的奖励等级
}
message LuckTreeInfoReq {//界面信息请求
	
}
message LuckTreeInfoRes {//界面信息响应
	optional LuckTreeMemberInfo member = 1;//玩家自己的相关信息
	required uint32 starttime = 2;//活动开始时间
	required uint32 endtime1 = 3;//活动结束时间1 -- 祈福结束
	required uint32 endtime2 = 4;//活动结束时间2 -- 活动结束
	required uint32 currentlevel = 5;//世界树等级
	required uint32 currentexp = 6;//世界树经验
}

message StaticLuckTreeLevelModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 level = 3;
	optional uint32 exp = 4;
	optional uint32	num = 5;
}
message StaticLuckTreeRewardModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 level = 3;
	optional string item = 4;
	optional string isnotice = 5;
	optional uint32	weight = 6;
	optional string	supweight = 7;
	optional string position = 8;
}
message StaticLuckTreeWorldRewardModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 level = 3;
	optional uint32 exp = 4;
	optional string item = 5;
}
message StaticLuckTreeScoreRewardModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 level = 3;
	optional uint32 score = 4;
	optional string item = 5;
}
message StaticLuckTreeShopModel {
	optional uint32 id = 1; //玩法类型对应KIND
	optional uint32 version = 2; //版本号
	optional uint32 kind = 3;
	optional string item = 4;
	optional uint32 limit = 5;
	optional string resets = 6;
	optional string cost = 7;
	optional string kindNameS = 8; //商店页签名称
}
message StaticLuckTreeTimeModel {
	optional uint32 id = 1; //玩法类型对应KIND
	optional uint32 version = 2; //版本号
	optional uint32 start_tm = 3;
	optional uint32 end_tm = 4;
	optional uint32 open_tm = 5;
}
message SundryStaticLuckTreeLevel {
	repeated StaticLuckTreeLevelModel all = 1;
}
message SundryStaticLuckTreeReward {
	repeated StaticLuckTreeRewardModel all = 1;
}
message SundryStaticLuckTreeWorldReward {
	repeated StaticLuckTreeWorldRewardModel all = 1;
}
message SundryStaticLuckTreeScoreReward {
	repeated StaticLuckTreeScoreRewardModel all = 1;
}
message SundryStaticLuckTreeShop {
	repeated StaticLuckTreeShopModel all = 1;
}
message SundryStaticLuckTreeTime {
	repeated StaticLuckTreeTimeModel all = 1;
}

message SundryStaticMineSweepRankReward {
	repeated StaticMineSweepRankRewardModel all = 1;
}

message SundryStaticMineSweepOpen {
	repeated StaticMineSweepOpenModel all = 1;
}

message SundryStaticMineSweepRewardItem {
	repeated StaticMineSweepRewardItemModel all = 1;
}

message SundryStaticMineSweepPrice{
	repeated StaticMineSweepPriceModel all = 1;
}
message SundryStaticMineSweepShop{
	repeated StaticLuckTreeShopModel all = 1;
}
message SundryStaticMineSweepBless{
	repeated StaticMineSweepBlessModel all = 1;
}

/////////////////////////端午节Start////////////////////////////////////////


message SundryStaticDragonBoatOpen {//开放时间表
	repeated StaticMineSweepOpenModel all = 1;
}

message SundryStaticDragonBoatMake{//制作粽子表
	repeated StaticDragonBoatMakeModel all = 1;
}
message SundryStaticDragonBoatPrice{//煮粽材料价格表
	repeated StaticDragonBoatPriceModel all = 1;
}
message SundryStaticDragonBoatGetMaterial {//积分奖励道具表
	repeated StaticDragonBoatGetMaterialModel all = 1;
}

message SundryStaticDragonBoatRankReward {//积分排行表
	repeated StaticMineSweepRankRewardModel all = 1;
}
message SundryStaticDragonBoatShop{//商店表
	repeated StaticLuckTreeShopModel all = 1;
}
/////////////////////////端午节End/////////////////////////////////////////
message ZhuanPanDajiangRecord {
	required uint64 playerid = 1;
	required uint32 timestamp = 2;
	required uint32 itemid = 3;
	required PlayerBaseInfo baseinfo = 4;
}
message ZhuanPanDajiangReq {
	
}
message ZhuanPanDajiangRes {
	repeated ZhuanPanDajiangRecord records = 1;
	repeated ZhuanPanDajiangRecord suprecords = 2;
}
message ZhuanPanRankDataReq {
	
}
message ZhuanPanRankDataRes {
	repeated ZhuanPanScoreMemer ranks = 1;//积分排行信息
	required uint32 rank = 2;//我的排名
	required uint32 score = 3;
}
message ZhuanPanGetStaticReq {//
	repeated uint32 kind = 1;//kind = 0 时拉取所有
}

message ZhuanPanBuyReq {
	required uint32 itemid = 1;
	required uint32 count = 2;
}
message ZhuanPanBuyRes {
	repeated Reward rewards = 1;
	required ZhuanPanBuyItemInfo buyinfo = 2;//只是自己的
}
message ZhuanPanItem {//内容待定
	required Reward reward = 1;  //商品内容
	required uint32 discount = 2;//打折
}
message ZhuanPanCommonReq {//普通转盘
	required uint32 kind = 1;//1-表示单抽 2-表示十连抽
}
message ZhuanPanCommonRes {//普通转盘
	repeated Reward rewards = 1;
	required bool super = 2;//是否有大奖
	required uint32 itemid = 3;//表示抽中的是那个大奖(单抽)
	repeated uint32 itemids = 4;//表示十连抽中的大奖ID
	optional uint32 score = 5;
}
message ZhuanPanSuperReq {//
	required uint32 kind = 1;//1-表示单抽 2-表示十连抽
}
message ZhuanPanSuperRes {//
	repeated Reward rewards = 1;
	required bool super = 2;//是否有大奖
	required uint32 itemid = 3;//表示抽中的是那个大奖(单抽)
	repeated uint32 itemids = 4;//表示十连抽中的大奖ID
	optional uint32 score = 5;
}
message ZhuanPanScoreMemer {//转盘积分排行玩家
	required PlayerBaseInfo baseinfo = 1;//玩家基本信息
	required uint32 score = 2;//积分
	required uint32 rank = 3;//排名
}
message ZhuanPanBuyItemInfo {
	required uint32 itemid = 1;
	required uint32 count = 2;
}
message ZhuanPanMemberInfo {//玩家自己的相关信息 -- 待扩充
	required uint32 score = 1;//积分
	required uint32 lucklybi = 2;//幸运币
	repeated ZhuanPanBuyItemInfo buyinfo = 3;//购买的相关信息
}
message ZhuanPanInfoReq {//界面信息请求
	
}
message ZhuanPanInfoRes {//界面信息响应
	optional ZhuanPanMemberInfo member = 1;//玩家自己的相关信息
	repeated ZhuanPanScoreMemer ranks = 2;//积分排行信息
	required uint32 starttime = 3;//活动开始时间
	required uint32 endtime1 = 4;//活动结束时间1 -- 抽奖结束
	required uint32 endtime2 = 5;//活动结束时间2 -- 活动结束
	required uint32 rank = 6;//我的排名
}
message StaticZhuanPanItemModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 kind = 3;
	optional string item = 4;
	optional uint32	weight = 5;
	optional string	supweight = 6;	
}
message StaticZhuanPanRewardModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 kind = 3;
	optional string rank = 4;
	optional string rewards = 5;
	optional string suprewards = 6; 
}
message StaticZhuanPanShopModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 kind = 3;
	optional string item = 4;
	optional string orires = 5;
	optional string currres = 6;
	optional uint32 limittype = 7;
	optional uint32 limitnum = 8;
	optional string extraa = 9;
	optional string extrab = 10;
}
message StaticZhuanPanCostModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional uint32 kind = 3;
	optional string cost = 4;
	optional string costsup = 5;
}
message StaticZhuanPanTimeModel {
	optional uint32 id = 1; //玩法类型对应KIND
	optional uint32 version = 2; //版本号
	optional uint32 start_tm = 3;
	optional uint32 end_tm = 4;
	optional uint32 open_tm = 5;
}
message SundryStaticZhuanPanItem {
	repeated StaticZhuanPanItemModel all = 1;
}
message SundryStaticZhuanPanCost {
	repeated StaticZhuanPanCostModel all = 1;
}
message SundryStaticZhuanPanReward {
	repeated StaticZhuanPanRewardModel all = 1;
}
message SundryStaticZhuanPanShop {
	repeated StaticZhuanPanShopModel all = 1;
}
message SundryStaticZhuanPanTime {
	repeated StaticZhuanPanTimeModel all = 1;
}
message XunleiJinzuanGetRewardReq {
}
message XunleiJinzuanGetRewardRes {
	repeated Reward rewards = 1; 
	optional uint32 rellevel = 2;//实际领取的VIP等级奖励
}

message OpenChallengeNotify {
	required bool cangetreward = 1;
	optional bool allfinish = 2;
}
message OpenChallengeData {
	required PlayerBaseInfo baseinfo = 1;//对应玩家的基本信息
	required uint64 ability = 2;//玩家的战力(以这个为准)
	required uint32 rank = 3;//(当前玩家的排名)
	required bool ischaoji = 4;
}
message OpenChallengeInfoReq {
	
}
message OpenChallengeInfoRes {
	repeated OpenChallengeData members = 1;//20个玩家
	required OpenChallengeData self = 2;//自身的数据(可以在上面20个玩家中)
	required bool cangetreward = 3;//是否可以领奖
	required bool hasgetreward = 4;//是否领取过
}
message OpenChallengeGetRewardReq {
	
}
message OpenChallengeGetRewardRes {
	repeated Reward rewards = 1; 
}
message ShunWangGetRewardReq {
	required uint32 viplevel = 1;//领奖对应的VIP -- 0表示一键领取
}
message ShunWangGetRewardRes {
	repeated Reward rewards = 1; 
}
message JueRoadNodeInfo {
	required uint32	nodeid = 1;//节点ID
	required uint32 stars = 2;//该节点获取的星数
	required uint32 sort = 3;//该节点在章节中的顺序
	required uint32 dropid = 4;//该节点的掉落ID
	required uint32 state = 5;//该节点的状态
	required uint32 npcgroup = 6; //包含的NPC组
}
message JueRoadChapterInfo {
	required uint32 chapterid = 1;//章节ID
	required uint32 sort = 2;//当前章节已经通关的节点的最大顺序
	required uint32 stars = 3 ; //获取的星数
	repeated uint32 baoxiangs = 4; //表示已经开启的宝箱ID
	repeated JueRoadNodeInfo nodes = 5; //所包含的节点
}

message JueRoadInfoReq {
	
}
message JueRoadInfoRes {
	required uint32 curchapter = 1;//当前章节
	repeated JueRoadChapterInfo infos = 2;//通关章节和当前章节的信息
	required uint32 freetimes = 3;
}
message JueRoadInfoData {
	required uint32 curchapter = 1;//当前章节
	repeated JueRoadChapterInfo infos = 2;//通关章节和当前章节的信息
	required uint32 freetimes = 3;
}
message JueRoadFightStartReq {//觉醒之路战斗
	required uint32 nodeid = 1;//表示点击的节点ID
	required uint32 chapterid = 2;//表示点击节点所在的章节
}
message JueRoadFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
	required uint32 freetime = 3;		//今天剩余的免费次数
	required uint32 nodeid = 4;
}
message JueRoadSaoDangReq {//觉醒之路战斗
	required uint32 nodeid = 1;//表示点击的节点ID
	required uint32 chapterid = 2;//表示点击节点所在的章节
	optional uint32 saodangtimes = 3;//扫荡次数
}
message JueRoadSaoDangRes {
	required uint32 result = 1;
	required uint32 totaltimes = 2;
	repeated Reward rewards = 3;
}
message JueRoadFightEndReq {
	required uint32 nodeid = 1;
	required uint32 chapterid = 2;
	required uint32 playmode = 3; 		//0:手动操作 1:自动操作 2:看战报
	repeated SkillTimePoint stp = 4;
	optional int32 result = 5;			//表示前端计算的结果
	optional bool fightdrop = 6;
}
message JueRoadFightEndRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
	optional uint32 stars = 3;
	optional uint32 totaltimes = 4;
}
message JueRoadGetRewardReq {
	required uint32 chapterid = 1;//
	required uint32 boxnum = 2;//开第几个宝箱
}
message JueRoadGetRewardRes {
	repeated Reward rewards = 1; 
}
message JueRoadRecordReq {
	required uint32 nodeid = 1;
}
message JueRoadRecordRes {
	repeated StageBtlReport zuiqiang = 1;//最强战力排行
	repeated StageBtlReport jixian = 2;//极限战力排行
	optional PlayerBaseInfo shousha = 3;//首杀
	repeated string shoushareportid = 4;//首杀战报ID
}


message ShenGridDingNodeInfo {
	required uint32 id = 1;//顶点ID
	required bool achieve = 2;//是否获得
}
message ShenGridNodeInfo {
	required uint32 id = 1;//节点ID
	required uint32 state = 2;//节点状态
}
message ShenGridPageInfo {
	required uint32 pagenum = 1;//页面顺序
	repeated ShenGridDingNodeInfo dingnodes = 2;//顶点状态
	repeated ShenGridNodeInfo nodesinfo = 3;//节点状态
}

message ShenGridInfoReq {
	
}
message ShenGridInfoRes {
	required ShenGridPageInfo info = 1;
}
message ShenGridClickReq {
	
}
message ShenGridClickRes {
	
}
message ShenGridChooseReq {
	required uint32 nodeid = 1;
	required uint64 heroid = 2;
}
message ShenGridChooseRes {
}
//手机微信认证
message WeixinGetRewardNotify {
	required bool cangetreward = 1;//可以领取奖励了
}
message WeixinGetRewardReq {
	
}
message WeixinGetRewardRes {
	repeated Reward rewards = 1;
}
message MobileCheckGetCodeReq {
	required string mobilenum = 1;//手机号
}
message MobileCheckGetCodeRes {
	required uint32 expiretime = 2;//有效时间
}
message MobileCheckReq {
	required string code = 1;
}
message MobileCheckRes {
	required uint32 statues = 1;
}
message MobileCheckGetRewardReq {
	
}
message MobileCheckGetRewardRes {
	repeated Reward rewards = 1;
}
//多玩新手卡
message DuowanNewerCardReq {
	
}
message DuowanNewerCardRes {
	repeated Reward rewards = 1;
	required uint32 retcode = 2;
}
//搜狗领取奖励
message SougouGetRewardReq {
	
}
message SougouGetRewardRes {
	repeated Reward rewards = 1;
}
message SougouInputGetRewardReq {
	
}
message SougouInputGetRewardRes {
	repeated Reward rewards = 1;
}
//360特权验证
message PrivilegeWeiShiCheckReq {
	required uint32 level = 1;
	optional bool share = 2;
}
message PrivilegeWeiShiCheckRes {
	repeated Reward rewards = 1;
	required int32 status = 2;
	required uint32 level = 3;
}
message PrivilegeWeiShiJiasuReq {
	
}
message PrivilegeWeiShiJiasuRes {
	repeated Reward rewards = 1;
}
message PrivilegeWeiShiJiasuNotify {
	
}
message PrivilegeWeiShiInfoReq {
	
}
message PrivilegeWeiShiInfoRes {
	required Gift360LevelInfoData data = 1;
}
//开服基金
message OpenFundInfoReq {
	
}
message OpenFundInfoRes {
	required bool hasfund = 1;//是否有基金
	repeated uint32 getrewards = 2;//已经领取的奖励
	repeated uint32 getwelfare = 3;//已经领取的福利
	required uint32 allcount = 4;//福利人数
}
message OpenFundBuyFundReq {
	
}
message OpenFundBuyFundRes {
	
}
message OpenFundGetFundRewardReq {
	required uint32 rewardid = 1;
}
message OpenFundGetFundRewardRes {
	repeated uint32 rewardids = 1;
}
message OpenFundGetWelfareReq{
	required uint32 rewardid = 1;
}
message OpenFundGetWelfareRes{
	repeated uint32 rewardids = 1;
}
message OpenFundWelfareNotify{
	required uint32 allcount = 1;
}
//限时优惠
message SuperSaleResetNotify {
	required bool qipao = 1;
}
message SuperSaleRechargeExtraRewardNotify {
	required uint32 youhuizhi = 1;//新的优惠值(为零)
	required uint32 youhuilimit = 2;//新的限制时间(为零)
	required uint32 rechargeid = 3;//充值优惠ID
}
message SuperSaleInfoReq {

}
message SuperSaleItem {
	required uint32 goodid = 1;  //商品ID
	required uint32 kind = 2;    //该商品分属的类型
	required Reward reward = 3;  //商品内容
}
message SuperSaleInfoRes {
	required uint32 currentvalue = 1;//当前拥有的优惠值
	required uint32 maxvalue = 2;//最大优惠值
	repeated SuperSaleItem items = 3;//各种优惠商品
	required uint32 lastresettime = 4;//上一次重置时间
	required uint32 nextresettime = 5;//下一次重置时间
	repeated uint32 alreadybuy = 6;//已经购买的商品ID
	required uint32 allcount = 7; //全名福利的值
	repeated uint32 alreadyget = 8;//已经领取的奖励ID
	required bool canrecharge = 9;//优惠值是否满
	required uint32 limittime = 10;//充值活动截止时间(时间戳)
	required uint32 recharge = 11;//对应充值表中的ID
	optional SuperSaleItem spItem = 12;//特殊商品
	optional uint32 refresh = 13;	//今日手动刷新次数
}
message SuperSaleGetRewardReq {
	required uint32 rewardid = 1;
}
message SuperSaleGetRewardRes {
}
message SuperSaleBuyItemReq {
	required uint32 itemid = 1;
}
message SuperSaleBuyItemRes {
	required uint32 youhuizhi = 1;
	required uint32 finishtime = 2;
	required uint32 rechargeid = 3;
}
message SuperSaleAllCountNotify {
	required uint32 allcount = 1;
}
//激活码
message ActivateCodeReq {
	required string code = 1;//礼包码
}
message ActivateCodeRes {
	repeated Reward rewards = 1;
}

//英雄试炼
message HeroPracticeTypeNodeInfo {
	required uint32 id = 1;
	required uint32 State = 2;
	required uint32 ChallengeTimes = 3;
	required uint32 typeid = 4;
}

message HeroPracticeInfoReq {
	
}
message HeroPracticeInfoRes {
	repeated HeroPracticeTypeNodeInfo infos = 1;
	required uint32 totaltimes = 2;
}

message HeroPracticeEnterNodeReq {
	required uint32 nodeid = 1;
}
message HeroPracticeNanduInfo {
	required uint32 state = 1;
	required uint32 id = 2;
	required uint32 npcgroup = 3;
}
message HeroPracticeEnterNodeRes {
	required uint32 shengyutimes = 1;
	required uint32 nodestate = 2;
	repeated HeroPracticeNanduInfo nanduinfos = 3;
	optional uint32 sort = 4;
}

message HeroPracticeFightStartReq {
	required uint32 nanduid = 1;
	required uint32 typeid = 2;
}
message HeroPracticeFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message HeroPracticeFightEndReq {
	required uint32 nanduid = 1;
	required uint32 typeid = 2;
	required uint32 play_mode = 3;
	repeated SkillTimePoint stp = 4;
	optional bool fightdrop = 5;
}
message HeroPracticeFightEndRes {
	required uint32 result = 1;
	required uint32 totaltimes = 2;
	repeated Reward rewards = 3; 
}
message HeroPracticeSaoDangReq {
	required uint32 nanduid = 1;
	required uint32 typeid = 2;
}
message HeroPracticeSaoDangRes {
	required uint32 result = 1;
	required uint32 totaltimes = 2;
	repeated Reward rewards = 3; 
}
message HeroPracticeTimesNotify {
	required uint32 freetimes = 1;
}
message HeroPracticeResetNotify {//HERO_PRACTICE_RESET_NOTIFY
	repeated HeroPracticeTypeNodeInfo infos = 1;
	required uint32 totaltimes = 2;
}
//玩家移动
message PlayerMoveReq {
	required int32 x = 1;
	required int32 y = 2;
}
message PlayerMoveInfo {//同一场景内玩家移动相关的信息
	required uint64 id = 1;
	required int32 x = 2;
	required int32 y = 3;
}
message PlayerMoveNotify {
	repeated PlayerMoveInfo infos = 1;
}

//坐骑升级
message PlayerMilitaryrankUpgradeReq {

}
message PlayerMilitaryrankInfoReq {
	
}
message PlayerMilitaryrankInfoRes {
	required uint64 totalability = 1;
}
message PlayerMilitaryrankUpgradeRes{
	required bool ok = 1;
	required uint32 level = 2;
	optional uint32 id = 3;
	optional uint64 ability = 4; 
}

//好友系统
message PlayerFriendApplyReq {//前端发起好友申请的数据结构
	required uint64 id = 1;
}
message PlayerFriendApplyRes {//
	required Para content = 1;
}
message PlayerFriendApplyNotify{//后端发送给前端的数据结构
	required GameFriendData data = 1;
}
message PlayerDeleteFriendReq {//前端发送给后端的删除好友数据结构
	required uint64 id = 1;
}
message PlayerDeleteFriendRes {//前端发送给后端的删除好友数据结构
	required uint64 id = 1;
}
message PlayerDeleteFriendNotify{//后端发送给前端的删除好友数据结构
	required GameFriendData data = 1;
	required Para content = 2;
}
message PlayerFriendSearchReq {//用于前端获取本地玩家好友信息的数据结构
	required string name = 1;
}
message PlayerFriendSearchRes {//用于前端获取本地玩家好友信息的数据结构
	required GameFriendData data = 1;
}
message PlayerFriendRecommendReq {//用于前端获取本地玩家好友信息的数据结构
	
}
message PlayerFriendRecommendRes {//用于前端获取本地玩家好友信息的数据结构
	repeated GameFriendData friends = 1;
	required bool hasNext = 2;
}
message PlayerFriendNextReq {
	
}
message PlayerFriendNextRes {//用于前端获取本地玩家好友信息的数据结构
	repeated GameFriendData friends = 1;
	required bool hasNext = 2;
}
message PlayerFriendQieChuoReq {//用于前端获取本地玩家好友信息的数据结构
	
}
message PlayerFriendsInfoReq {//用于前端获取本地玩家好友信息的数据结构
}
message GameFriendData {
	required uint64 id = 1;
	required string name = 2;
	optional string signatue = 3;
	optional uint32 level = 4;
	optional uint32 offtime = 5;
	optional uint32 baseid = 6;
	optional uint64 ability = 7;
	//optional uint64 lastcontacttime = 8;//用于表示最近联系人的最后联系时间 -- 专用于最近联系人
	optional PlayerQQInfo qqInfo = 9;
	optional string account = 10;
	optional uint32 vip = 11;
	optional uint32 avatarid = 12;
	optional uint32 avatarframeid = 13;
}

message PrivateTalk {
	required uint64 id = 1;
	required string name = 2;
	required uint32 time = 3;
	required string content = 4;
}
message ChatList {
	required uint64 playerid = 1;//表示与某个玩家之间的聊天记录
	repeated PrivateTalk contents = 2;
}
message GameChatContent {
	required uint64 id = 1;   
	required string name = 2;
	required uint32 time = 3;
	required PublicTalkNotify content = 4;
}
message RecentContact {
	required uint64 playerid = 1;
	required GameFriendData friendinfo = 2;
	repeated GameChatContent contents = 3;
}

message PlayerFriendsInfoRes {//用于后端本地玩家返回好友信息的数据结构
	repeated GameFriendData friendsinfo = 1;
	repeated GameFriendData recenctcontactinfo = 2;
	repeated GameFriendData gangfriendsinfo = 3;
	repeated GameFriendData crossfriendsinfo = 4;	
	repeated GameFriendData strangerfriendsinfo = 5;
	repeated GameFriendData heimingdaninfo = 6;
	
	repeated GameFriendData applyfriends = 7;
	repeated GameFriendData applyagreefriends = 8;
	repeated GameFriendData applyrefusefriends = 9;
	repeated GameFriendData deletefriends = 10;
	repeated PrivateTalk talk = 11;
	repeated ChatList chatlist = 12;//表示聊天记录
	
	required string signatue = 13;//玩家自己的签名
	
	//赠送体力
	repeated uint64 donateToIds = 14;//今天已赠送过体力的角色ID
	optional uint32 hasGetstaminas = 15;//今天已领取体力次数
	repeated uint64 canGetstaminaIds = 16;//可以领取体力的数组 角色id

	//事件祝贺
	optional uint32 hascongcount = 17;//今天已祝贺次数
	optional uint32 hasbeencongedcount = 18;//今天被祝贺次数
	repeated uint64 canconginfos = 19;//可以祝贺的数组 事件ID
	repeated RecentContact contacts = 20;
}
message CongInfo {
	required uint64 playerid = 1;//表示由谁祝贺
	required uint64 eventid = 2;//表示被祝贺的事件ID
}

message PlayersAllInfoReq {//用于获取所有玩家数据的数据结构 -- 用于测试
	required uint64 id = 1;
}
message PlayerSeeFriendInfoReq {//用于获取所有玩家数据的数据结构 -- 用于测试
	required uint64 id = 1;
}
message PlayerSeeFriendInfoRes {//用于获取所有玩家数据的数据结构 -- 用于测试
	required string name = 1;
	required uint64 id = 2;
	optional uint32 lv = 3;
	optional uint32 offtime = 4;
}
message PlayerApplyAgreeReq {//用于前端发送给后端的好友请求同意数据结构 -- 数据为申请的玩家
	required uint64 id = 1;
}
message PlayerApplyAgreeRes {

}
message PlayerApplyAgreeNotify {//用于后端通知好友请求同意的数据结构 -- 数据为申请的玩家 
	required GameFriendData data = 1;
	optional Para content = 2;
}
message PlayerFriendChatReq {//用于前端发送给后端的好友请求同意数据结构 -- 数据为申请的玩家
	required uint64 id = 1;//表示向谁说的话
	required PublicTalkNotify publictalk = 2;//说的内容
}
message PlayerFriendChatNotify {//用于后端通知好友请求同意的数据结构 -- 数据为申请的玩家
	required string name = 1;
	required uint64 id = 2;
	required string content = 3;
	required uint32 time = 4;
}
message PlayerApplyRefuseReq {//用于后端发送给前端的好友请求拒绝数据结构 -- 数据为被拒玩家
	required uint64 id = 1;
}
message PlayerApplyRefuseNotify {//用于后端通知好友请求拒绝的数据结构 -- 数据为被拒玩家
	required GameFriendData data = 1;
	optional Para content = 2;
}
message PlayerApplyRefusePiLiangReq {
	repeated uint64 targetids = 1;
}
message PlayerApplyRefusePiLiangRes {

}
message PlayerApplyPiLiangReq {
	repeated uint64 targetids = 1;
}
message PlayerApplyPiLiangRes {
	repeated uint64 targetids = 1;
}
message PlayerApplyAgreePiLiangReq {
	repeated uint64 targetids = 1;
}
message PlayerApplyAgreePiLiangRes {
	repeated uint64 targetids = 1;
}
message PlayerOnlineNotify {//好友上线通知
	required GameFriendData data = 1;
	optional Para content = 2;
}
message PlayerOfflineNotify {//好友下线通知
	required GameFriendData data = 1;
	optional Para content = 2;
}
message PlayerAddToHeiMingDanReq{
	required uint64 id = 1;
}
message PlayerAddToHeiMingDanRes{
	required GameFriendData data = 1;
}
message PlayerRemoveHeiMingDanReq{
	required uint64 id = 1;
}
message PlayerRemoveHeiMingDanRes{
	required GameFriendData data = 1;
}
message FriendSignatureReq {
	required string content = 1;
}
message FriendSignatureRes {
	required bool ok = 1;
	required string signatue = 2;
}
message FriendSignatureNotify {
	required string name = 1;//
	required uint64 id = 2;
	required string signatue = 3;	
}

message FriendDonateStaminaReq {//赠送体力
	required uint64 id = 1; 
}
message FriendDonateStaminaRes {//赠送体力
	required bool isdonateok = 1;
	required uint64 targetplayerid = 2;
}
message FriendDonateStaminaAllReq {//一键赠送
}
message FriendDonateStaminaAllRes {//一键赠送返回 -- 都具体赠送给哪些好友了
	repeated uint64 donatedids = 1;//好友ID数组
}
message FriendStaminaGetReq {//领取赠送的体力
	optional uint64 playerid = 1;//表示要领取哪个玩家赠予的体力
}
message FriendStaminaGetRes {//领取赠送的体力
	required bool ok = 1;//表示领取成功
	required uint32 stamina = 2;//表示当天总共被赠予的体力数(包括领取的和未领取的)
}
message FriendStaminaGetAllReq {//领取赠送的所有体力
}
message FriendStaminaGetAllRes {//
	required uint32 staminas = 1;//表示这次领取的体力数
	required uint32 hasGetstaminas = 2;//今天已领取体力次数
	repeated uint64 thistimeids = 3;//表示这次都领取了哪些好友的赠送体力 玩家ID数组
}
message FriendDonateStaminaNotify {//赠送体力
	required string name = 1;//
	required uint64 id = 2;
	required uint32 stamina = 3;
	required uint32 cangetnum = 4;//表示今天可领取的数量
}
message FriendTrendsReq {

}
message FriendTrendNotify {
	required TrendInfo info = 1;
}
message TrendInfo {
	required uint64 id = 1;
	required uint32 kind = 2;
	required uint64 playerid = 3;
	required bool congratulateable = 4;
	required uint32 timestamp = 5;
	repeated Para contents = 6;
	optional bool iscongratulate = 7;
}
message FriendTrendsRes {//好友动态通知
	repeated uint64 congedids = 1;//表示祝贺过的好友动态ID
	repeated TrendInfo infos = 2;//动态信息
	optional uint32 times = 3;//表示玩家当天已经祝贺的次数
}

message FriendCongratulateReq{//好友祝贺请求
	required uint64 id = 1;
	required uint64 playerid = 2;
}
message FriendCongratulateRes{//好友祝贺响应
	required bool iscongok = 1;
	//required uint32 reward = 2;
}
message FriendCongratulateAllReq{//好友祝贺请求
	repeated uint64 ids = 1;
}
message FriendCongratulateAllRes{//一键祝贺响应
}
message FriendCongratulateNotify{//好友祝贺通知
	required uint64 id = 1;//表示谁祝贺了我
	required uint64 eventid = 2;//祝贺的事件的ID
	//required uint32 reward = 3;
}

message FriendStaminaInfo{ //好友体力赠送相关信息
	required uint64 playerid = 1;//赠送人ID
	required uint32 timestamp = 2;//赠送时间戳
}
message FriendStaminaInfoReq{
	
}
message FriendStaminaInfoRes{
	repeated uint64 donatetoids = 1;//表示当天都已经向谁赠送过体力 -- 即使好友重新加入
	required uint32 donatedallcount = 2;
	required uint32 donatedgotcount = 3;
	repeated FriendStaminaInfo donatedallids = 4;
	repeated FriendStaminaInfo donatedids = 5;
}
message FriendDailyInfoClearNotify {
	
}
//坐骑系统
message PlayerActivateSaddleHorseReq{
	required uint32 id = 1;
	optional bool autobuy = 2;
}
message PlayerActivateSaddleHorseRes{
	required bool ok = 1;
}
message PlayerUseSaddleHorseReq{
	required uint32 id = 1;
}
message PlayerUseSaddleHorseRes{
	required bool ok = 1;
}
message PlayerUnuseSaddleHorseReq{
	required uint32 id = 1;
}
message PlayerUnuseSaddleHorseRes{
	required bool ok = 1;
}
message PlayerChangeSaddleHorseReq{
	required uint32 id = 1;
}
message PlayerChangeSaddleHorseRes{
	required bool ok = 1;
}
message PlayerChangeGloryReq{
	required uint32 id = 1;
}
message PlayerChangeGloryRes{
	required bool ok = 1;
}
message PlayerGetSaddleHorsesReq{
	
}

message HorseInfo {
	optional uint32 horseId = 1;
	optional uint32 sjLv = 2;
	optional FightProp prop = 3;
	optional uint64 ability = 4;
	optional uint32 strengthLSlv = 5;
	optional uint32 tupoLSLv = 6;
	repeated Item equips = 7;
}

message PlayerGetSaddleHorsesRes{
	repeated uint32 horseid = 1;
	required uint32 curhorse = 2;
	required uint32 curglory = 3;
	required uint32 star = 4;
	required uint32 exp = 5;
	repeated uint32 gloriesid = 6;
	repeated HorseInfo horse = 7;
	repeated HorseProtectInfo horseProtect = 8;
}
message PlayerGetGloriesReq{

}
message PlayerGetGloriesRes{
	repeated uint32 id = 1;
}
message PlayerGetCurrentSaddleHorseReq{
	
}
message PlayerGetCurrentSaddleHorseRes{
	required uint32 id = 1;
}
message PlayerGetCurrentGloryReq{

}
message PlayerGetCurrentGloryRes{
	required uint32 id = 1;
}

message PlayerSaddleHorseUpgradeReq{
	
}
message PlayerSaddleHorseUpgradeRes{
	
}

message PlayerBossZhaoHuanFreeTimeReq{
}
message PlayerBossZhaoHuanFreeTimeRes{
	required uint32 freeTime = 1;//今天剩余的免费次数
}
message PlayerBossZhaoHuanReq{
	required uint32 id = 1;
}
message PlayerBossZhaoHuanRes{
	required bool ok = 1;
	repeated uint32 random = 2;
	repeated BattlePlayer player = 3;
	required uint32 freeTime = 4;//今天剩余的免费次数
}
message PlayerSaddleHorseYanJiuReq{
	required bool autobuy = 1;
}
message PlayerSaddleHorseYanJiuRes{
	required bool ok = 1;
	required uint32 star = 2;
	required uint32 exp = 3;
	required uint32 baoji = 4;
	required uint32 addexp = 5;
	optional uint32 kind = 6;
}
message PlayerSaddleHorseYanJiuOneKeyReq{
	required bool autobuy = 1;
}
message PlayerSaddleHorseYanJiuOneKeyRes{
	required bool ok = 1;
	required uint32 star = 2;
	required uint32 exp = 3;
	required uint32 baoji = 4;
	required uint32 addexp = 5;
	optional uint32 kind = 6;
}
message PlayerResStageFightEndReq {
	required uint32 id = 1;
	required uint32 play_mode = 2; 		// 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
	optional int32 result = 4;			//表示前端计算的结果
	optional uint32 normal_count = 5;	//普通奖励
	optional uint32 extral_count = 6;	//额外奖励
}
message PlayerResStageFightEndRes {
	required uint32 count = 1;
	optional uint32 star = 2;
	optional uint32 awardid = 3;
}
//******************************************************************************
message WorldBossInfo {
	required uint32 bossid = 1;
	required uint32 npcgroupid = 2;
	required float hp = 3;
	required float maxhp = 4;
	repeated uint32 buffids = 5;
	optional uint32 relivetimestamp = 6;
}
message WorldBossRankData {
	required uint64 playerid = 1;
	required string name = 2;
	required uint32 baseid = 3;
	required uint64 hurt = 4;
	required uint32 rank = 5;//当前名次
	required PlayerBaseInfo baseinfo = 6;
}
message WorldBossStartEventNotify {
	required uint32 kind = 1;//用于标示公告的类型
	required uint32 time = 2;
}
message WorldBossNextWaveNotify {//用于返回新刷出的怪物的信息
	repeated WorldBossInfo infos = 1;
	required uint32 rank = 2;
}
message WorldBossMemberReliveNotify {
	required uint64 playerid = 1;
}
message WorldBossInfoReq {
	
}
message WorldBossInfoRes {
	required uint32 state = 1;//当前工会BOSS活动的状态
	required bool autofight = 2;
	required bool simplereport = 3;
	required uint32 currstarttime = 4;//本周期内活动开始的时间
	required uint32 nextresettime = 5;//下一个周期内活动开始的时间
	required uint32 rank = 6;//表示当前打的是第几批怪
	repeated WorldBossInfo bossinfo = 7;//每个怪的相关信息(每一批有两个或三个不等的怪物)
	repeated WorldBossRankData hurtranks = 8;//伤害排名
	//玩家相关
	required uint64 totalhurt = 9;//玩家当前造成的伤害总值
	required bool isdead = 10;//当前玩家是否死了
	required uint32 lastdeadtime = 11;//距复活需要的时间值
	repeated uint32 buffids = 12;//已获得的BUFF ID
	required uint32 nextstatetimelong = 13;//距下一个状态的时间(这个需要根据状态来判断)
	repeated uint32 rewardids = 14;//表示已领取过的奖励ID
	optional bool hasgetreward = 15;//是否领取过奖励(当能领取奖励时)
	optional uint32 nextstarttime = 16;//下一次开启时间
	optional uint32 ranknum = 17;//自己的排名 0表示没上榜
	optional bool cangetreward = 18;//能否领取奖励 -- 活动没结束或结束后未上榜时不能领取
}
message WorldBossQuickFightStartReq {
	required uint32 bossid = 1;//表示攻打的BOSSID
}
message WorldBossQuickFightStartRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
	required uint64 totalhurt = 3;//玩家的总伤害
	required uint64 curhurt = 4;//本次战斗的伤害
	required BgFightInfo attacker = 5;
	required BgFightInfo target = 6;
	optional uint64 hurttotal = 7;//自己的总伤害
	optional uint32 ranknum = 8;//自己的排名 0表示没上榜
}
message WorldBossTopRankNotify {
	repeated WorldBossRankData rankdata = 1;
	optional uint64 hurttotal = 2;//自己的总伤害
	optional uint32 ranknum = 3;//自己的排名 0表示没上榜
}
message WorldBossInfoNotify {//用于返回复活怪物的信息
	repeated WorldBossInfo infos = 1;
	required uint32 rank = 2;
}
message WorldBossMemberDeadNotify {
	required uint64 playerid = 1;
	optional uint32 relivetimestamp = 2;
}
message WorldBossHurtInfoReq {
	
}
message WorldBossHurtInfoRes {
	repeated WorldBossRankData rank = 1;
	optional uint64 hurttotal = 2;//自己的总伤害
	optional uint32 ranknum = 3;//自己的排名 0表示没上榜
	optional bool cangetreward = 4;//能否领取奖励 -- 活动没结束或结束后未上榜时不能领取
	optional bool hasgetreward = 5;//是否领取过奖励(当能领取奖励时)
}
message WorldBossHurtRewardReq {
	required uint32 id = 1;//若是单个领取则传ID
}
message WorldBossHurtRewardRes {
	repeated uint32 rewardids = 1;
	repeated Reward rewards = 2; 
}
message WorldBossJoinFightStartReq {
	required uint32 bossid = 1;//表示攻打的BOSSID
}
message WorldBossJoinFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
	required uint32 bossid = 3;
	required uint32 result = 4;
	repeated Reward rewards = 5;
	required bool invalidefight = 6;
	required string reportid = 7;
	required uint64 totalhurt = 8;
	optional uint64 curhurt = 9;
	optional uint64 hurttotal = 10;//自己的总伤害
	optional uint32 ranknum = 11;//自己的排名 0表示没上榜
}
message WorldBossModelSetReq {
	required uint32 kind = 1;//表示类型 -- 1:简易战报 2:自动攻击BOSS
	required bool value = 2;
}
message WorldBossModelSetRes {
	required uint32 kind = 1;
	required bool value = 2;
}
//******************************************************************************
//NEW
message FamilyBossSupperRankReq {
	
}
message FamilyBossSupperRankRes {
	repeated FamilyBossSupperRankData datas = 1;//排名数据
}
message FamilyBossSupperRankData {
	required uint32 killbosscount = 1;
	required uint32 totalhurt = 2;
	required uint64 totalablity = 3;//
	required string familyname = 4;//所在公会名称
	repeated Reward rewards = 5;//奖励
	repeated RankMember members = 6;//前五名
	required uint32 currank = 7;//公会BOSS最高层级
	required uint32 rank = 8;//该公会的排名
}
message RankMember {
	required string name = 1;
	required string district = 2;
	required uint64 totalhurt = 3;
	required uint64 playerid = 4;
	required uint32 districtid = 5;
}
message FamilyBossQuickFightStartReq {
	required uint32 bossid = 1;//表示攻打的BOSSID
}
message FamilyBossQuickFightStartRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
	required uint64 totalhurt = 3;//玩家的总伤害
	required uint32 curhurt = 4;//本次战斗的伤害
	required BgFightInfo attacker = 5;
	required BgFightInfo target = 6;
}
message FamilyBossHurtRewardReq {
	required uint32 id = 1;//若是单个领取则传ID
}
message FamilyBossHurtRewardRes {
	repeated uint32 rewardids = 1;
}
message FamilyBossInfoNotify {//用于返回复活怪物的信息
	repeated FamilyBossInfo infos = 1;
	required uint32 rank = 2;
}
message FamilyBossNextWaveNotify {//用于返回新刷出的怪物的信息
	repeated FamilyBossInfo infos = 1;
	required uint32 rank = 2;
}
message FamilyBossRankData {
	required uint64 playerid = 1;
	required string name = 2;
	required uint32 baseid = 3;
	required uint64 hurt = 4;
	required uint32 rank = 5;//当前名次
}
message FamilyBossTopRankNotify {
	repeated FamilyBossRankData rankdata = 1;
}
message FamilyBossStartEventNotify {
	required uint32 kind = 1;//用于标示公告的类型
	required uint32 time = 2;
}
message FamilyBossNextStartTimeNotify {
	required uint32 nextstarttime = 1;
}
message FamilyBossInfoReq {
	
}
message FamilyBossInfo {
	required uint32 bossid = 1;
	required uint32 npcgroupid = 2;
	required uint64 hp = 3;
	required uint64 maxhp = 4;
	repeated uint32 buffids = 5;
	optional uint32 relivetimestamp = 6;
}
message FamilyBossInfoRes {
	required uint32 state = 1;//当前工会BOSS活动的状态
	required bool autofight = 2;
	required bool simplereport = 3;
	required uint32 remaintimes = 4;//鼓舞剩余的次数
	required uint32 currstarttime = 5;//本周期内活动开始的时间
	required uint32 nextstarttime = 6;//下一个周期内活动开始的时间
	required uint32 guwucdovertime = 7;//距鼓舞CD结束需要的时间
	required uint32 nextresettime = 8;//下一个周期开始时间
	required uint32 rank = 9;//表示当前打的是第几批怪
	repeated FamilyBossInfo bossinfo = 10;//每个怪的相关信息(每一批有两个或三个不等的怪物)
	repeated FamilyBossRankData hurtranks = 11;//伤害排名
	//玩家相关
	required uint64 totalhurt = 12;//玩家当前造成的伤害总值
	required bool isdead = 13;//当前玩家是否死了
	required uint32 lastdeadtime = 14;//距复活需要的时间值
	required uint32 normalguwucount = 15;//普通鼓舞的次数
	required uint32 superguwucount = 16;//高级鼓舞的次数
	repeated uint32 buffids = 17;//已获得的BUFF ID
	required uint32 nextstatetimelong = 18;//距下一个状态的时间(这个需要根据状态来判断)
	repeated uint32 rewardids = 19;//表示已领取过的奖励ID
	required bool isnextselect = 20;//下一个周期的开始时间是否选定了
}
message FamilyBossSetNextStartTimeReq {
	required uint32 nextstarttime = 1;
}
message FamilyBossSetNextStartTimeRes {
	
}
message FamilyBossBuyGuliReq {
	required uint32 gulitype = 1;//购买的鼓励类型 1--表示普通鼓励 2--表示高级鼓励
}
message FamilyBossBuyGuliRes {
	required uint32 lastgulitime = 1;//表示上一次鼓励时间点
	required uint32 normalguwucount = 2;//
	required uint32 supperguwucount = 3;//
}
message FamilyBossHurtInfoReq {
	
}
message FamilyBossHurtInfoRes {
	repeated FamilyBossRankData rank = 1;
}
message FamilyBossModelSetReq {
	required uint32 kind = 1;//表示类型 -- 1:简易战报 2:自动攻击BOSS
	required bool value = 2;
}
message FamilyBossModelSetRes {
	required uint32 kind = 1;
	required bool value = 2;
}
message FamilyBossReliveReq {
	optional uint32 buytime = 1;//购买复活
}
message FamilyBossReliveRes {
	
}
message FamilyBossMemberReliveNotify {
	required uint64 playerid = 1;
}
message FamilyBossMemberDeadNotify {
	required uint64 playerid = 1;
	optional uint32 relivetimestamp = 2;
}
message FamilyBossJoinFightStartReq {
	required uint32 bossid = 1;//表示攻打的BOSSID
}
message FamilyBossJoinFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
	required uint32 bossid = 3;
	required uint32 result = 4;
	repeated Reward rewards = 5;
	required bool invalidefight = 6;
	required string reportid = 7;
	required uint64 totalhurt = 8;
}
message FamilyBossJoinFightEndReq {
	required uint32 bossid = 1;//表示当前打的怪的ID
	required uint32 playmode = 2;//0:手动操作 1:自动操作 2:看战报
	repeated SkillTimePoint steps = 3;//
	optional bool fightdrop = 4;//中断战斗
}
message FamilyBossJoinFightEndRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
	required bool invalidefight = 3;
}
message FamilyBossBossReliveNotify {
	required FamilyBossInfo reliveboss = 1;
}
message FamilyBossBossBuffNotify {
	repeated uint32 buffids = 1;
}

//******************************************************************************
// family gauntlet

// 守护女神活动信息
message FamilyGauntletInfo {
	required uint32 state = 1; // 守护女神活动状态
	required uint32 level = 2; // 预选难度
	required uint32 levelMax = 3; // 当前最大难度
	required uint32 startTime = 4; // 活动开启时间
}
message FamilyGauntletInfoReq {
}
message FamilyGauntletInfoRes {
	required FamilyGauntletInfo info = 1;
}
message FamilyGauntletInfoNotify {
	required FamilyGauntletInfo info = 1;
}

// 活动难度
message FamilyGauntletLevelReq {
	required uint32 level = 1;
}
message FamilyGauntletLevelRes {
	required uint32 level = 1;
}

// 刷怪阶段
message FamilyGauntletStage {
	required uint32 id = 1;
	required uint32 stageMax = 2;
	required uint32 time = 3;
	required uint32 monsterNum = 4;
	required uint32 monsterMax = 5;
}
message FamilyGauntletStageNewNotify {
	required FamilyGauntletStage stage = 1;
}
message FamilyGauntletStageSyncNotify {
	required uint32 monsterNum = 1;
}

// 女神雕像
message FamilyGauntletAngel {
	required bool died = 1;			// 死亡
	required int32 hp = 2;			// 血量
	required int32 hpMax = 3;		// 最大血量
}
message FamilyGauntletAngelSyncNotify {
	required FamilyGauntletAngel angel = 1;
}
// 怪物
message FamilyGauntletMonster {
	required uint32 id = 1;				// 怪物Id
	required uint32 itemId = 2;			// 表项Id
	required uint32 objectId = 3;		// 对象Id
	required uint32 line = 4;			// 行进线路
	required bool died = 5;				// 死亡
	required bool pause = 6;			// 暂停
	required bool frozen = 7;			// 冻结
	required int32 hp = 8;				// 血量
	required int32 hpMax = 9;			// 最大血量
	required float time = 10;			// 时间
}
message FamilyGauntletMonsterNewNotify {
	required FamilyGauntletMonster monster = 1;
}
message FamilyGauntletMonsterSyncNotify {
	required uint32 id = 1;				// 怪物Id
	required bool died = 2;				// 死亡
	required bool pause = 3;			// 暂停
	required bool frozen = 4;			// 冻结
	required int32 hp = 5;				// 血量
	required int32 hpMax = 6;			// 最大血量
}
message FamilyGauntletMonsterArrivedNotify {
	required uint32 id = 1;				// 怪物Id
	required uint32 damage = 2;			// 伤害
}
message FamilyGauntletMonsterDiedNotify {
	required uint32 id = 1;				// 怪物Id
}

// Boss
message FamilyGauntletBoss {
	required uint32 id = 1;				// BossId
	required uint32 itemId = 2;			// 表项Id
	required uint32 objectId = 3;		// 对象Id
	required uint32 line = 4;			// 位置
	required bool died = 5;				// 死亡
	required int32 hp = 6;				// 血量
	required int32 hpMax = 7;			// 最大血量
}
message FamilyGauntletBossNewNotify {
	required FamilyGauntletBoss boss = 1;
}
message FamilyGauntletBossSyncNotify {
	required uint32 id = 1;				// BossId
	required bool died = 2;				// 死亡
	required int32 hp = 3;				// 血量
	required int32 hpMax = 4;			// 最大血量
}
message FamilyGauntletBossDiedNotify {
	required uint32 id = 1;				// 怪物Id
}

// 战斗
message FamilyGauntletJoinFightReq {
	required uint32 id = 1;			// 表示攻打的怪物Id
}
message FamilyGauntletJoinFightRes {
	required uint32 result = 1;
	required string reportid = 2;
	repeated Reward rewards = 3;
}
message FamilyGauntletQuickFightReq {
	required uint32 id = 1;			// 表示攻打的怪物Id
}
message FamilyGauntletQuickFightRes {
	required uint32 result = 1;
	required uint32 curhurt = 2;//本次战斗的伤害
	required BgFightInfo attacker = 3;
	required BgFightInfo target = 4;
	repeated Reward rewards = 5;
}

// 活动成员
message FamilyGauntletMember {
	required uint64 playerId = 1;			// 玩家Id
	required bool died = 2;					// 死亡
	required int32 hp = 3;
	required int32 hpMax = 4;
	required uint32 RebornTime = 5;			// 重生时间
}
message FamilyGauntletMemberNewNotify {
	required FamilyGauntletMember member = 1;
}
message FamilyGauntletMemberSyncNotify {
	required FamilyGauntletMember member = 1;
}

// 战斗状态
message FamilyGauntletFight {
	required bool fightable = 1;			// 是否可战斗
	required uint32 fightCD = 2;			// 战斗CD
}
message FamilyGauntletFightSyncNotify {
	required FamilyGauntletFight fight = 1;	// 是战斗状态
}

// 技能
message FamilyGauntletSkill {
	required uint32 skillId = 1;			// 技能Id
	required uint32 useCount = 2;			// 已使用次数
	required uint32 useCountMax = 3;		// 最大使用次数
}
message FamilyGauntletSkillSyncNotify {
	required FamilyGauntletSkill skill = 1;	// 技能
}
// 使用技能
message FamilyGauntletSkillUseReq {
	required uint32 skillId = 1;			// 技能Id
}
message FamilyGauntletSkillUseRes {
}
// 使用了冻结技能
message FamilyGauntletSkillFrozenNotify {
}

// 贡献排行
message FamilyGauntletScore {
	required uint64 playerId = 1;
	required string name = 2;
	required uint32 baseId = 3;
	required uint64 score = 4;
	required uint32 rank = 5;//当前名次
}

message FamilyGauntletRank {
	repeated FamilyGauntletScore scores = 1;
}
message FamilyGauntletRankSyncNotify {
	required FamilyGauntletRank rank = 1;
}

// 活动数据
message FamilyGauntletBattle {
	required uint32 level = 1;
	required uint32 state = 2;
	required uint32 readyTime = 3;
	required FamilyGauntletAngel angel = 4;
	optional FamilyGauntletStage stage = 5;
	repeated FamilyGauntletMember members = 6;
	repeated FamilyGauntletMonster monsters = 7;
	repeated FamilyGauntletBoss bosses = 8;
	required FamilyGauntletRank rank = 9;
}

message FamilyGauntletBattleStateNotify {
	required uint32 state = 1;
	required uint32 readyTime = 2;
}

message FamilyGauntletPlayer {
	required FamilyGauntletFight fight = 1;	// 战斗状态
	repeated FamilyGauntletSkill skills = 2;// 所有技能
}
message FamilyGauntletBattleNotify {
	required FamilyGauntletBattle battle = 1;
	required FamilyGauntletPlayer player = 2;
}

message FamilyGauntletBattleSyncReq {
	
}

message FamilyGauntletBattleSyncRes {
	required uint32 state = 1;
	optional FamilyGauntletBattle battle = 2;
	optional FamilyGauntletPlayer player = 3;
}

// 活动开始结束
message FamilyGauntletBattleStartNotify {
}
message FamilyGauntletBattleEndNotify {
	required bool result = 1;				// 结果(true胜利，false失败)
	required string grade = 2;				// 评分
}

//******************************************************************************
//familystage
message FamilyStageChapterSelectReq{
	required uint32 chapterId = 1;
}
message FamilyStageChapterSelectRes{
	required uint32 mingrichapterid = 1;
}
message FamilyStageGetRewardReq{
	required uint32 position = 1; 
}
message FamilyStageGetRewardRes{
	required GetReward reward = 1;
}
message FamilyStageChapterSelectNotify{
	required uint32 mingrichapterid = 1;
	//待定
}
message FamilyStageGetRewardNotify{
	required string name = 1;
	required uint32 position = 2;
	required uint32 kind = 3;
	required uint32 id = 4;
	required uint32 count = 5;
}
message GetReward {//统一奖励信息
	required string name = 1;
	required uint32 position = 2;
	required uint32 kind = 3;
	required uint32 id = 4;
	required uint32 count = 5;
	optional uint64 playerid = 6;
}
message FamilyStageRewardInfoReq {//请求工会副本奖励信息
	
}
message FamilyStageRewardInfoRes {
	repeated GetReward rewardinfo = 1;
}
message FamilyStageRecordReq {
	required uint32 nodeid = 1;
}
message FamilyStageRecordRes {
	repeated StageBtlReport rank = 1;
	optional StageBtlReport lastfight = 2;
}
message FamilyStageEnterChapterReq {
}
message FamilyStageEnterChapterRes {//返回章节的相关信息
	required FamilyStageChapterInfo chapterinfo = 1;
	optional uint64 hurt = 2;
	optional uint32 freetimes = 3;
	optional uint32 maxrewardcount = 4;
	optional bool hasgotreward = 5;
}
message FamilyStageBuffInfo {
	required uint32 buffid = 1;
	required uint32 position = 2;
}
message FamilyStageNodeInfo {
	required uint32 buffid = 1;
	required uint32 state = 2;
	required uint32 groupid = 3;
	repeated double hps = 4;
	required uint32 chapterid = 5;//所属的章节
	required uint32 nodeid = 6;
	repeated double maxhps = 7;
}
message FamilyStageChapterInfo {
	repeated FamilyStageNodeInfo nodeinfos = 1;
	required uint32 state = 2;
	required uint32 curchapter = 3;
	required uint32 highchapter  = 4;
	required uint32 mingrichapter = 5;
	required uint32 chapterselecttime = 6;
	required uint32 nextresettime = 7;
}
message FamilyStageFightStartReq {//工会副本战斗
	required uint32 nodeid = 1;
}
message FamilyStageFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
	required uint32 freeTime = 3;		//今天剩余的免费次数
	required uint32 nodeid = 4;
	repeated double hps = 5;
	repeated BuffInfo buffs = 6;
}
message FamilyStageFightEndReq {
	required uint32 nodeid = 1;
	required uint32 play_mode = 2; 		//0:手动操作 1:自动操作 2:看战报
	repeated SkillTimePoint stp = 3;
	optional int32 result = 4;			//表示前端计算的结果
	optional bool Fightdrop = 5;
}
message FamilyStageFightEndRes {
	required uint32 result = 1;
	repeated Reward rewards = 2; 
}
message FamilyStageYuKouStartReq {//工会副本余寇
	required uint32 nodeid = 1;
}
message FamilyStageYuKouStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
	required uint32 freeTime = 3;		//今天剩余的免费次数
	repeated BuffInfo buffs = 4;
	repeated double hps = 5;
}
message FamilyStageYuKouEndReq {
	required uint32 play_mode = 1; 		//0:手动操作 1:自动操作 2:看战报
	repeated SkillTimePoint stp = 2;
	optional uint32 nodeid = 3;			//表示前端计算的结果
	optional bool Fightdrop = 4;
}
message FamilyStageYuKouEndRes {
	required uint32 result = 1;
	repeated Reward rewards = 2; 
}
message FamilyStageYuKouSaoDangReq {//工会副本余寇扫荡
	required uint32 nodeid = 1;
}
message FamilyStageYuKouSaoDangRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
}
message FamilyStageHurtRankReq {
	
}
message FamilyStageRank {
	required uint32 times = 1;//今日攻打次数
	required string name = 2;//名字
	required uint64 hurt = 3;//今日伤害
	required uint64 playerid = 4;
	required uint32 baseid = 5;
	optional uint32 playerlevel = 6;
	optional uint32 militaryrank = 7;
}
message FamilyStageHurtRankRes {
	repeated FamilyStageRank rank = 1;
}
message FamilyStageHpsNotify {//
	required uint32 nodeid = 1;//表示是哪个节点血量发生了变化
	repeated double hps = 2;//剩余血量
}
message FamilyStageResetNotify {//公会副本重置通知
	required FamilyStageChapterInfo chapterinfo = 1;
}
message FamilyStageFightStartNotify {
	required uint32 nodeid = 1;
	optional uint32 state = 2;
	optional string name = 3;
}
message FamilyStageFightEndNotify {
	required uint32 nodeid = 1;
	required uint32 state = 2;//表示当前节点战斗结束之后的状态
	repeated double hps = 3;//剩余血量
	optional bool ischapterfinish = 4;
}

message FamilyStageNodeRankReq {
	required uint32 nodeid = 1;
}
message FamilyStageNodeRankRes {
	repeated FamilyStageRank rank = 1;
}

message FamilyStageBuyTimesReq {
	
}
message FamilyStageBuyTimesRes {
	required uint32 todaytimes = 1;
}
message FamilyStageTimesNotify {
	required uint32 freetimes = 1;
}

//******************************************************************************
//familytech
message FamilyTechInfoReq {
	
}
message FamilyTechItem {
	required uint32 itemid = 1;
	required uint32 techtype = 2;
	required uint32 memberlevel = 3;//表示玩家当前的等级
	required uint32 familytechlevel = 4;//表示当前该科技的等级
}
message FamilyTechInfoRes {
	required uint32 highestlevel = 1;//表示公会可提升的等级上限
	required uint32 curreshitem = 2;
	required uint32 curreshlevel = 3;
	required uint32 lastreshtime = 4;
	repeated FamilyTechItem items = 5;
}
message FamilyTechResearchReq {
	required uint32 techtype = 1;//表示要研究的科技类型
}
message FamilyTechResearchRes {
	required uint32 newlevel = 1;
	required uint32 lastresearchtime = 2;
	required uint32 newassets = 3;
}
message FamilyTechStudyReq {
	required uint32 techtype = 1;//表示要学习的科技类型
}
message FamilyTechStudyRes {
	required uint32 newlevel = 1;//新的等级
	required uint32 remaincon = 2;//剩余的个人公会贡献
}
message FamilyTechResearchNotify {
	required uint32 itemtype = 1;
	required uint32 itemlevel = 2;
	required uint32 lastresearchtime = 3;
	required uint32 newassets = 4;
}
//end
//******************************************************************************


// ========= equip ==========

//装备面板信息
message EquipPanelViewRes {
	repeated HeroInfo info = 1;
}

//装备强化 EQUIP_STRENGTH
message EquipStrengthReq {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 count = 3;
}

//装备强化 EQUIP_STRENGTH
//[]
message EquipStrengthRes {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 strnId = 3;   //当前强化等级
	optional uint32 strnCount = 4;  //强化次数
	required uint32 critCount = 5;  //暴击次数
}

//装备精炼 EQUIP_JINGLIAN
//[]
message EquipJinglianReq {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 itemId = 3;	
	required uint32 count = 4;
}

//装备精炼 EQUIP_JINGLIAN
//[]
message EquipJinglianRes {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 Id = 3;   //当前精炼id
	required uint32 exp = 4;  //当前精炼等级
}

//装备升星EQUIP_ADD_STAR
//[]
message EquipAddStarReq{
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 count = 3;
	required bool red=4;
	optional uint32 choice = 5; 
}

message EquipAddStarRes {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
	required uint32 star = 3;   //当前星数
	required uint32 exp = 4;  //当前升星经验
	optional uint32 doubleKill=5;//两倍暴击
	optional uint32 quadraKill=6;//四倍暴击
}

message EquipUpgradeGoldenReq {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
}

message EquipShengJieReq {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
}

message EquipAddStarTupoReq {
	optional uint64 heroId = 1;
	required uint64 equipId = 2;
}

message EquipShengJieRes{
	required uint32 exp = 1;
	required bool ok = 2; //是否升级
}

message BuyGoldInfoRes{
	message BuyLog {
		required uint32 times = 1;
		required uint32 kind = 2;
		required uint32 money = 3;
		required uint32 stamp = 4;
		optional uint32 count = 5;
		optional uint32 critCount = 6;
	}
	required uint32 used = 1; //钻石使用次数
	required uint32 used1    = 2; //金钻使用次数
	required uint32 activeTimes = 3; //活动钻石增加次数
	required uint32 activeTimes1 = 4; //活动金钻增加次数
	required float activeAdds  = 5; //活动钻石加成
	required float activeAdds1  = 6; //活动金钻加成
	required uint32 nextChance = 7; //钻石下次概率
	required uint32 nextChance1 = 8; //金钻下次概率
	repeated BuyLog logs = 9; //log
}

message BuyGoldReq {
	required uint32 kind = 1;  //0钻石 ，1金钻
	optional uint32 count = 2;  //次数 
}

message BuyGoldRes{
	required uint32 getMoney = 1; //获得金币数量
	required uint32 times    = 2; //金币倍率
	required uint32 nextChance = 3; //下次概率
	optional uint32 count = 4; //次数
	optional uint32 critCount = 5; //暴击次数
}

//物品合成 ITEM_HECHENG
//[]
message ItemHechengReq {
	required uint64 itemId = 1; //碎片id
	required uint32 count = 2;  //合成新物品个数
}

//装备更换 EQUIP_CHANGE
//[]
message EquipChangeReq{
	required uint64 hero = 1;	//英雄id
	required uint64 item = 2;	//item 装备的 生成id  0 表示脱装备
	required uint32 place = 3;	//装备位置
}

//坐骑装备更换 EQUIP_CHANGE
message HorseEquipChangeReq{
	required uint32 horse = 1;	//id
	required uint64 item = 2;	//item 装备的 生成id  0 表示脱装备
	required uint32 place = 3;	//装备位置
}

//骑装强化 EQUIP_STRENGTH
message HorseEquipStrengthReq {
	optional uint32 horseId = 1;
	required uint64 equipId = 2;
	required uint32 count = 3;
	required uint64 costItemId = 4; 
}

//骑装强化 EQUIP_STRENGTH
message HorseEquipStrengthRes {
	optional uint32 horseId = 1;
	required uint64 equipId = 2;
	required uint32 strnLev = 3;   //当前强化等级
	optional uint32 strnExp = 4;  //当前强化经验
}

//骑装突破
message HorseEquipTupoReq {
	optional uint32 horseId = 1;
	required uint64 equipId = 2;
	repeated uint64 costItems = 3;
}

message HorseEquipTupoRes {
	required uint32 horseId = 1;
	required uint64 equipId = 2;
	required uint32 tupoLv = 3;
}


//聊天	PUBLICTALK
message PublicTalkReq {
	required uint32 pindao = 1;
	required TalkContent content = 2;
}
//message CrossTalkReq {
//	required uint32 pindao = 1;
//	required TalkContent content = 2;
//	optional uint64 chatRoomId = 3;
//}
message Para{
	optional uint32 intv = 1;
	optional string str = 2;
	optional uint64 bigintv = 3;
	optional PlayerBaseInfo player = 4;
	optional Item item = 5;
	optional BaoWu baowu = 6;
	optional HeroInfo hero = 7;
	repeated Para paras = 8;
}
message PlayerBaseInfo {
	optional uint64 id = 1;
	optional string name = 2;
	optional uint32 vip = 3;
	optional uint32 militaryRank = 4;
	optional uint32 npcId = 5;
	optional uint32 lv = 6;
	optional uint64 ability = 7;
	optional uint32 wing = 8;
	optional uint32 clothes = 9;
	optional uint32 horse = 10;
	optional string familyName = 11;
	optional uint32 dist = 12; //区id
	optional uint32 gmType = 13;
	optional string distName = 14;
	optional string opName = 15;
	optional PlayerQQInfo qqInfo = 16;
	repeated uint32 baowu = 17;
	optional uint64 familyId = 18;
	optional uint32 avatarid = 19;//LGPTODO
	optional uint32 avatarframeid = 20;//LGPTODO
	optional uint64 offline = 21;
	optional uint32 artijinjieid = 22;//LGPTODO神器进阶id
	optional bool   isartishow = 23;//LGPTODO是否显示神器
}

//系统通知
message EventNotify{
	required uint32 kind = 1;
	repeated Para param = 2;
}

//[PUBLIC_TALK]
message PublicTalkNotify {
	required uint64 playerId = 1;
	required string Name = 2; 
	required uint32 pindao = 3;
	required TalkContent content = 4;
	optional uint32 dist = 5;
	optional string opname = 6;
	optional uint32 gm = 7;
}

//[PUBLIC_TALK_MULTI]
message PublicTalkMultiNotify{
	repeated PublicTalkNotify talk = 1;
}

message TalkContent{
	required string content = 1;
	optional bytes extraContent = 2;
}

//私聊	PRIVATETALK
message PrivateTalkReq{
	required TalkContent content = 1;	
	required uint64 otherId = 2;
}
//[PRIVATE_TALK]
message PrivateTalkNotify{
	required uint64 otherId = 1;
		required string name = 2;
	required TalkContent content = 3;	
}

//[P_T_CHAT_PLAYER_INFO]
//[P_T_CHAT_EXTRA_NOTIFY]
message PTChatPlayerInfoRes{
	required string content = 1;	
}

// 消耗统一结构
//[NULL]
message CostRes {
	optional uint32 kind = 1;
	optional uint32 costId = 2;
	optional uint32 count = 3;
	optional uint64 id = 4;	
}

//=======帮会=================
//工会创建
message FamilyCreateReq{
	required string name = 1;
}
//申请加入
message FamilyApplyReq{
	required uint64 id = 1;	
}
message FamilyApplyRes{
	required uint32 ok = 1;
}
//审核  1 通过 2 拒绝 3全部通过 4 全部拒绝
message FamilyApplyOpReq{	
	required uint32 op = 1;
	optional uint64 id = 2;
}

//邀请好友
message FamilyInviteFriendReq{
	repeated uint64 id = 1;
}
message FamilyPostList{
	required uint64 id = 1;
	required FamilyPost post = 2;
}
//任命职位
message FamilyAppointReq{	
	repeated FamilyPostList list = 1;
}
//改变会长
message FamilyChangeLeaderReq{
	required uint64 id = 1;
}

//查看其他工会信息
message FamilyOtherReq{
	required uint64 id = 1;
}
message FamilyOtherRes{
	required FamilyInfo info = 1;
	repeated FamilyMember list = 2;
}

//踢出工会
message FamilyKickReq{
	required uint64 id = 1;
}
//退出工会
message FamilyQuitRes{
	optional uint32 cd = 1;
}
//工会首页面 工会基本信息
//[FAMILY_CREATE,Res]
//[FAMILY_INFO,Res]
message FamilyInfoRes{
	required FamilyInfo info = 1;
	optional FamilyMemberInfoRes member = 2;
}
//工会成员列表
//[FAMILY_MEMBER_LIST]
message FamilyMemberRes{
	repeated FamilyMember list = 1;
}
//申请列表
message FamilyApplyListRes{
	repeated FamilyMember list = 1;
}
//工会信息，兼容内部外部
message FamilyInfo{
	required uint64 id = 1;	
	required string name = 2;	
	required uint32 lv = 3;	
	optional uint32 exp = 4;
	required uint32 count = 5;
	required string leader = 6;
	optional uint32 fund = 7;
	optional string inNotice = 9;
	optional string outNotice = 10;
	optional uint32 rank = 11;
	optional bool 	invite = 12;
	required uint32 max = 13;
	optional uint32 flagIcon = 14;
	optional uint32 flagBase = 15;
	optional uint64 leaderId = 16;
	optional uint64 ability = 17;
	optional bool levelUp = 18;
	optional bool canModifyName = 19;
}

//工会成员信息，兼容工会内部和外部
message FamilyMember{
	required uint64 id = 1;
	required string name = 2;
	required uint32 level = 3;
	optional uint32 post = 4;
	optional uint64 ability = 5;
	optional uint32 con = 6;
	optional uint32 status = 7;
	optional uint32 highPost = 8;
	optional uint32 online = 9;
	optional uint32 activity = 10;
	optional uint32 addTime = 11;
	optional uint32 vip = 12;
}
message FamilyFriendCount{
	required uint64 id = 1;
	required uint32 count = 2;
}
//工会列表
message FamilyListRes{
	repeated FamilyInfo all = 1;
	repeated uint64 apply = 2;
	repeated FamilyFriendCount friend= 3;
}
//工会捐献
message FamilyDonateReq{
	required uint32 kind = 1;
}

//[FAMILY_DONATE_NOTIFY]
//[FAMILY_DONATE,res]
message FamilyDonateRes{
	required uint32 level = 1;
	required uint32 exp = 2;
	required uint32 fund = 3;
	required uint32 score = 4;
}
//修改公告
message FamilyChangeNoticeReq{
	required uint32 kind = 1;
	required string notice = 2;
}
message FamilyChangeNoticeRes{
	required uint32 kind = 1;
	required string notice = 2;
}
//修改旗帜
message FamilyChangeFlagReq{
	required uint32 icon = 1;
	required uint32 base = 2;
}
//工会日志
message FamilyLogRes{
	repeated FamilyLog list = 1;
}
message FamilyLog{
	required uint32 time = 1;
	required uint32 key = 2;
	required string name = 3;
	optional string tname = 4;
	optional uint32 con = 5;
}
//工会申请审核结果通知
message FamilyApplyNotify{
	required uint32 kind = 1;
	required uint64 id = 2;
	optional string name = 3;
}

//工会捐献奖励 kind 宝箱编号 1开始
message FamilyDonateRewardReq{
	required uint32 kind = 1;
}

//设置职位的一般权限 id 职位id  auth  权限id列表
message FamilyPostAuthorityReq{
	required FamilyPost id = 1;
	repeated uint32 auth = 2;	
}

message FamilyAuthority{
	required uint32 post = 1;
	repeated uint32 info = 2;
}
//获取当前职位的权限
message FamilyGetAuthorityRes{
	repeated FamilyAuthority auth = 1;
}
//玩家在工会中的某些数据，第一次打开工会面板需要
message FamilyMemberInfoRes{
	required uint32 post = 1;
	required uint32 highPost = 2;
	required uint32 con = 3;
	required uint32 cd = 4;
	optional uint64 familyId = 5;
	optional string familyName = 6;
	optional bool	donate = 7;
	optional bool 	qianDao = 8;
	repeated uint32 donateReward = 9;
	optional uint32 token = 10;//勇者勋章
}
message FamilyAuthorityNotify{
	repeated FamilyAuthority auth = 1;
}
message FamilyDonateRecord{
	required PlayerBaseInfo player = 1;
	required uint32 kind = 2;
}
message FamilyDonateScoreRes{
	required uint32 score = 1;
	repeated FamilyDonateRecord record = 2;
}
//=============邮件============

//删除邮件 DEL_MAIL_NOTIFY
//[]
message DelMailNotify {
	repeated uint64 mailId = 1;
}

message MailData {
	optional uint64 id = 1;
	optional uint32 iconId = 2;
	optional uint32 flagBase = 3;
	optional uint32 time = 4;
	optional uint32 status = 5;
	optional uint32 kind = 6;
	optional uint64 senderId = 7;
	optional string senderName = 8;
	optional uint64 receiveId = 9;
	optional string receiveName = 10;
	optional string title = 11;
	optional string content = 12;
	optional string familyName = 13;
	repeated Reward reward = 14;
	optional uint32 readTm = 15; 
}

//获取邮件列表 GET_MAIL_LIST
//[]
message GetMailListRes {
	repeated MailData mails = 1;
}


//读取邮件 READ_MAIL
//[]
message ReadMailReq {
	required uint64 id = 1;
}

//读取邮件 READ_MAIL
//[]
message ReadMailRes {
	required MailData mail = 1;
}

//领取奖励 GET_MAIL_REWARD
//[]
message GetMailRewardReq {
	repeated uint64 id = 1;
}

//[]
message GetMailRewardRes {
	repeated uint64 id = 1;
}

//删除邮件 DEL_MAIL
//[]
message DelMailReq {
	required uint64 id = 1;
}

//删除邮件 DEL_MAIL
//[]
message DelMailRes {
	required uint64 id = 1;
}

//发送邮件 SEND_MAIL
//[]
message SendMailReq {
	repeated string receiveName = 1;
	required string title = 2;
	required string content = 3;
	required uint32 kind = 4;
}
//邮件通知 MAIL_NOTIFY
//[]
message MailNotify {
	repeated MailData mail = 1;
}

message GetNewGroupMailReq {
}

message NewGroupMailNotify {
}

//=======宝物=====
//附魔信息
message BaoWuFumo{
	required uint32 id = 1;
	required uint32 place = 2;
}
//宝物信息
message BaoWu{
	required uint64 id = 1;
	optional uint32 level = 2;
	optional uint64 exp = 3;
	required uint32 baseId  = 4;	
	optional FightProp base   = 5;
	optional FightProp random = 6;
	repeated BaoWuFumo fumo   = 7;
	repeated BaoWuBuff buff = 8;
	optional uint32 keyin = 9;
	optional uint64 keyinExp = 10;
	optional uint64 ability = 11;
	optional uint32 statue = 12;
	optional uint32 remould = 13;
	optional float tmpRemouldVal = 14;
	optional uint32 tmpRemouldId = 15;
	repeated MapKey32Valuef32 tmp = 16;
	optional uint32 fuwenkeyin = 17;
	optional uint64 fuwenkeyinExp = 18;	
}
//宝物buff
message BaoWuBuff{
	required uint32 id = 1;
	required float value = 2;
}
//宝物装备
message BaoWuEquipReq{
	required uint64 hero = 1;
	required uint64 item = 2;
	optional uint32 place = 3;
}
//宝物背包
message BaoWuBagRes{
	repeated BaoWu list = 1;
}
//宝物强化
message BaoWuStrengthReq{
	required uint64 hero = 1;
	required uint64 item = 2;
	repeated MapKey64Value32 cost = 3;
	optional uint32 flag = 4;
}
message BaoWuStrengthRes{
	required BaoWu info = 1;
	repeated uint64 cost = 2;
}
message MapKey64Value32{
	required uint64 id = 1;
	required uint32 value = 2;
}
message MapKey32Valuef32{
	required uint32 key = 1;
	required float value = 2;
}
message MapKey32Value64{
	required uint32 key = 1;
	required uint64 value = 2;
}
//宝物刻印
message BaoWuKeyinReq{
	required uint64 hero = 1;
	required uint64 item = 2;
	required uint32 flag = 3;
	optional bool useAddStar = 4;
}
//[BAO_WU_KEYIN]
//[BAO_WU_FUWEN_KEYIN]
message BaoWuKeyinRes{
	required BaoWu info = 1;
	optional uint32 cost = 2;
}
//宝物附魔
message BaoWuFumoReq{
	required uint64 hero = 1;
	required uint64 item = 2;
	required uint64 baoshi = 3;
	required uint32 place = 4;
}
message BaoWuFumoRes{
	required BaoWu info = 1;
}
//宝物附魔开孔
message BaoWuFumoOpenReq{
	required uint64 hero = 1;	//英雄id，背包中为 1
	required uint64 item = 2;	//宝物id
	required uint32 place = 3;	//孔的位置
	optional uint32 kind = 4;	//
}
message BaoWuFumoOpenRes{
	required BaoWu info = 1;
}

//魔石合成
message BaoWuMoShiCombineReq{
	required uint32 id = 1;
	required uint64 material = 2;
	required uint32 num = 3;
}
//魔石转换
message BaoWuMoShiTransferReq {
	required uint64 from = 1;
	required uint32 to = 2;
	required uint32 num  = 3;
}
//魔石一键合成 kind 类型  level 上限等级
message BaoWuMoshiAllReq{
	repeated uint32 kind = 1;
	required uint32 level = 2;
	optional bool confirm = 3;
}
message BaoWuMoshiAllRes{
	repeated Reward reward = 1;
}
message MoshiRecord{
	required PlayerBaseInfo player = 1;
	required uint32 item = 3;
	required uint32 count = 4;
}
//魔石合成记录
message MoShiCombineRecordRes{
	repeated MoshiRecord record = 1;
}

//一键操作  kind 1  一键开孔  2 一键拆除  cost : 1 道具 2 钻石
message BaoWuFumoAllReq{
	required uint64 hero = 1;
	required uint64 item = 2;
	required uint32 kind = 3; 
	optional uint32 cost = 4; 
}
message BaoWuFumoAllRes{
	required BaoWu info = 1;
}

message BaoWuGoldCombineReq{
	required uint64 id = 1;	
	required uint64 hero = 2;
}
message BaoWuGoldCombineRes{
	required BaoWu info = 1;
}

message BaoWuPurifyReq{
	required uint64 id = 1;	
	required uint64 hero = 2;
	required uint32 kind = 3;	
	repeated uint32 lock = 4;
}
message BaoWuPurifyRes{
	required BaoWu info = 1;
}

message BaoWuRemouldReq{
	required uint64 id = 1;	
	required uint64 hero = 2;
	required uint32 kind = 3;  //1 重铸 2 确认
	required uint32 attr = 4;
}
message BaoWuRemouldRes{
	required BaoWu info = 1;
}
//=======深渊关卡==GET_SHEN_YUAN_INFO
message GetShenYuanInfoReq{
	optional bool contiChanllge=1;
}
//[]
message GetShenYuanInfoRes{
	required uint32 canRevive = 1; //玩家复活次数
	required uint32 currentlayer = 2;//玩家当前的层数
	required uint32 nowstar =	3; //玩家当前的星数
	repeated BuffInfo buffid= 4; //玩家的buff信息
	repeated Monster monster = 5;//当前层三个怪物
	required bool tongguan = 6;	//是否能一键通关
	optional uint32 num=7;	//神秘宝箱开启次数
	repeated ShenYuanBuff buff=8;//当前是否有buff
	optional bool box=9;//是否有宝箱
	required uint32 shenyuancoin=10;
	optional uint32 rank =11;
	required uint32 time=12;
	optional bool canGetReward=13;
	optional uint32 lastrank=14;
	optional uint32 topStar=15;//当日最高得星
	repeated Monster monstersForNextLayers=16;//后两层需要显示的怪物组Id, 两次都不是怪物层，则无需显示。顺序按照层数依次赋值
	optional uint32 helptime=17;//好友可帮助次数
	optional uint32 canReachLayer=18;//能够达到的层数
	optional uint32 histTopStar=19;//历史最高得星
	optional uint32 luckValue=20;//深渊幸运值
}
message BuffInfo{
	required uint32 id=1;
	required uint32 count=2;
	required float param=3;
}

message ShenYuanReceiveBoxRes{
	optional uint32 luckValue=1;
	repeated Reward reward=2;
}

message ShenYuanGetMysteriBoxReq{
	required uint32 num=1;
}

message ShenYuanGetMysteriBoxRes{
	repeated Reward reward=1;
	optional uint32 luckValue=2;
	optional uint32 boxOpenNum=3;
}


message ShenYuanBuff {
	required uint32 id = 1;
	required uint32 jiage = 2;
	required bool buy=3;
	required float param=4;
}

message Monster{
	required uint32 id = 1;
	required uint32 position = 2;
	required uint32 multi = 3;
	optional bool locked=4;
}

//使用深渊通关	
//[]
message ShenYuanTongGuanReq{
}

//使用深渊通关	
message ShenYuanTongGuanRes{
	required uint32 star = 1;
	repeated Reward reward=2;
}

message ShenYuanRequestFriendRes{
	message FriendInfo{
		required uint64 id=1;
		required uint64 ability=2;
		required uint32 level=3;
	}
	repeated FriendInfo friend=1;
	required uint32 helptime=2;//帮助次数
}


//深渊战斗开始请求 FIGHT_SHEN_YUAN_START		
//[]
message FightShenYuanStartReq{
	required uint32 positon = 1;//怪物所在的位置
	required uint32 layer = 2; //打的层数
	optional uint64 friend=3;//是否有好友数据
}

//深渊战斗开始请求 FIGHT_SHEN_YUAN_START		
//[]
message FightShenYuanStartRes{
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

//深渊战斗结束	FIGHT_SHEN_YUAN_END				
//[]
message FightShenYuanEndReq{
	required uint32 play_mode = 1; 		// 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 2;
	required uint32 positon = 3;//怪物所在的位置
	required uint32 layer = 4; //打的层数
	optional uint32 cBtlRet = 5;  //测试使用
	optional uint32 cBtlDamage = 6; //测试使用
}

//深渊战斗结束	FIGHT_SHEN_YUAN_END				
//[]
message FightShenYuanEndRes{
	required uint32 star  = 1;// 战斗星数
	required uint32 result = 2;
	required uint32 nowstar=3;//当前的星数
	required uint32 canRevive=4;
	repeated Reward btlReward=5;
	optional uint32 friendHelpNum=6;
	optional uint32 totalstar=7;//战斗星数乘以倍数
}

//购买深渊buff
//[]
message ShenYuanBuyBuffReq{
	required uint32 id = 1;
	required float param=2;
}

//购买深渊buff	
//[]
message ShenYuanBuyBuffRes{
	required uint32 nowstar=1;//当前星数
	repeated BuffInfo buff=2;
}

//深渊排名	SHEN_YUAN_PAI_MING
//[]		
message ShenYuanPaiMingReq{
	
}

//深渊排名	SHEN_YUAN_PAI_MING
//[]
message ShenYuanPaiMingRes{
	repeated PlayerShenYuanInfo playerShenyuanInfos = 1;
	optional uint32 myRank = 2;
}

message PlayerShenYuanInfo {
	optional uint64 uid = 1;
	optional string name = 2;
	optional uint32 rank = 3;
	optional uint32 level = 4;
	optional uint64 ability = 5;
	optional string familyName = 6;
	optional uint32 stcNpcId = 7;
	optional uint32 star=8;
	optional uint32 huizhang=9;
	optional uint32 avatarid = 10;
	optional uint32 avatarframeid = 11;
}



message ShenYuanRankRewardReq{
	
}

message ShenYuanRankRewardRes{
	repeated Reward reward=1;
}

message ShenYuanGetLuckyBoxReq{
	required uint32 groupId=1;
	required uint32 itemId=2;
}
message ShenYuanGetLuckyBoxRes{
	optional uint32 jifen=1;
}

// 抽将详细信息
message LotteryInfoReq{
}

// 抽将
//[LOTTERY,Req]
message LotteryReq{
	required uint32 lotteryId = 1;			//抽奖id
}

// 至尊抽将
message LotterySuperReq {
	required uint32 lotteryId = 1;
}

//[LOTTERY_SUPERRAND]
message LotterySuperRes{
	optional uint32 superTimes = 1;	// 至尊搜寻当天次数
	optional uint32	superDiamond = 2; // 至尊搜寻下次消耗钻石
	repeated Reward rewards = 3;
}
message LotteryListData {
	required string name = 1;
	required uint32 id = 2;
	required uint64 timestamp = 3;
	required uint64 playerId = 4;
}
message LotteryActivity {
	required uint32 discount = 1;
	required uint64 begintime = 2;
	required uint64 endtime = 3;
}
message LotteryInfoRes {
	required uint32 oneTime = 1;
	required uint32 oneCd = 2;
	required uint32 oneFreeTimes = 3;
	
	required uint32 oneCashTime = 4;
	required uint32 oneCashCd = 5;
	required uint32 oneCashFreeTimes = 6;
	
	optional bool isFirstOne = 7;
	optional bool isFirstCashOne = 8;
	optional bool isFirstCashTen = 9;	
	
	optional uint32 superTimes = 10;	// 至尊搜寻当天次数
	optional uint32 superDiamond = 11; // 至尊搜寻下次消耗钻石
	
	optional uint32 CashYuLiang = 12;
	repeated LotteryListData listdata = 13;
	optional uint32 point = 14;//魔力值
	optional LotteryActivity activity = 15;//抽将相关的活动
	optional uint32 quality = 16;
	
	optional bool hasfirst = 17;//是否进行过每日钻石首抽
	optional uint32 commonUsedTimes = 18;
	optional uint32 cashUsedTimes = 19;
}

//抽将
//[LOTTERY,Res]
message LotteryRandRes{
	required uint32 oneTime = 1;
	required uint32 oneCd = 2;
	required uint32 oneFreeTimes = 3;
	
	required uint32 oneCashTime = 4;
	required uint32 oneCashCd = 5;
	required uint32 oneCashFreeTimes = 6;
	
	repeated Reward rewards = 7;		
	
	optional bool isFirstOne = 8;
	optional bool isFirstCashOne = 9;
	optional bool isFirstCashTen = 10;
	
	optional uint32 CashYuLiang  = 11;
	optional uint32 Point = 12;
	optional uint32 quality = 13;//表示下一个整十次抽的英雄颜色
	
	optional bool hasfirst = 14;//是否进行过每日钻石首抽
	optional uint32 commonUsedTimes = 15;
	optional uint32 cashUsedTimes = 16;
}
message LotteryGetRewardReq {
	required uint32 heroid = 1;
}
message LotteryGetRewardRes {
	required bool ok = 1;
	required uint64 heroid = 2;
}

message OpenModuleReq{
	required uint32 moduleId=1;
}

// ===============guaji ===================
enum TMAKIND { //TEAM MEM ATTR kind
	START_FIGHT  = 1;
	EXTRA_REWARD = 2;
	KILLED       = 3;
	AUTOTEAM     = 4;
}

enum TPKIND { //TeamPlayer Kind
	START = 14;
	GUAJI = 15;
	BG	= 16;	//跨服战场
	CTEAM	 = 17; //跨服组队竞技
	WORLD = 18; //世界服组队
	END = 19;
}

message GuajiSaoDangReq {
	optional uint32 count = 1;
}

message GJSaoDangReward {
	repeated Reward rwd = 1;
}

message GuajiSaoDangRes {
	repeated GJSaoDangReward sdRwd = 1;
	optional uint32 rank = 2;
}

message GuajiPvpBeStealNotify {
}

message GuajiReport {
	optional uint32 npcId = 1;
	optional uint32 result = 2;
	optional string reportId = 3;
	optional uint32 turnNum = 4; //战斗回合
	optional uint32 fightCd = 5;
}

message GuajiInfoRes {
	required uint64 teamId = 1;  //队伍id
	required uint32 startTm = 2; 
	required uint32 killed = 3;	 //暂时废弃
	required uint32 rank = 4;    //暂时废弃
	required bool autoTeam = 5;  //是否自动组队
	required bool startFight = 6; //是否开始挂机
	required uint32 curGuajiId = 7; //当前层数
	required uint32 maxPassedGuajiId = 8; //最大通关层数
	required uint32 winCount = 9;   //胜利场数
	required uint32 loseCount = 10; //失败场数
	optional uint32 totalTm = 11;   //时间总计
	repeated GuajiReport reports = 12; //战报
	optional uint32 pvpCount = 13;  //pvp剩余次数
	optional uint32 immuTm = 14;    //免战结束时间
	optional uint32 gjSpeed = 15;  //挂机速度
	optional uint32 stealCount = 16; //当天偷取个数
	optional uint32 nextPvpCountTm = 17; //下次pvpcount获得时间
	optional uint32 todayRank = 18;
	optional uint32 yestodayRank = 19;
	optional bool yestodayRwdIsGet = 20;
	optional uint32 redDropVal = 21;
}

message GuajiChangeNanduReq {
	required uint32 guajiId = 1;
}

message GuajiInfoNotify {
	required uint32 rank = 1;
	required uint32 killed = 2;
	optional GuajiReport report = 3;
	optional uint32 gjSpeed = 4;
}

message GuajiBossFightStartRes {
	repeated Reward drops = 1;
	repeated uint32 random = 2;
	repeated BattlePlayer player = 3;
}

message GuajiBossFightEndReq {
	required bool isEscape = 1; //是否退出战斗
	required uint32 play_mode = 2; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
}

message GuajiBossFightEndRes {
	optional uint32 star = 1;
	optional LvExp player = 2;
}

message GuajiGetBagInfoRes {
	repeated Reward rwd = 1;
}

message GuajiExtraRewardNotify {
	optional uint64 playerId = 1;
	optional Reward rwd = 2;
}

message EventLog {
	optional uint32 kind = 1;
	repeated Para para = 2;
	optional uint32 stamp = 3;
	repeated string reportId = 4;
}

message EventLogs {
	repeated EventLog log = 1;
}

message GuajiLogRes {
	repeated EventLog log = 1;
	repeated EventLog pvpLog = 2;
}

message GuajiSwitchReq {
	required bool isFight = 1;
	required bool isAutoTeam = 2;
}

message GuajiSwitchNotify {
	required uint64 id = 2;
	required bool isStartFight = 1;
}

message GuajiFightStNotify {
	optional bool isFight = 1;
}

message TeamInviteReq {
	repeated uint64 friendIds = 1;
	required uint32 kind = 2;
	required uint64 teamId = 3;
}


message GuajiRewardDispNotify {
	repeated Reward reward = 1;	
}

message GJPvpInfo {
	optional PlayerBaseInfo info = 1;
	optional uint32 probStatus = 2;
	optional uint32 count = 3;
}

message GuajiChangePvperRes {
	repeated GJPvpInfo info = 1;
}

message GuajiPvpFightStartReq {
	required uint64 playerId = 1;
	required uint32 dist = 2;
}

message GuajiPvpFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message GuajiPvpAutoFightReq {
	required uint64 playerId = 1;
	required uint32 dist = 2;
	required uint32 kind = 3; // 1 简易战报
}

message GuajiPvpAutoFightRes {
	optional string reportId = 1;
	repeated Reward reward = 2;
	optional uint32 rank = 3;
	optional uint32 stealCount = 4;
	// for 简易战报
	optional uint32 result = 5;
	optional BgFightInfo attacker = 6;
	optional BgFightInfo target = 7;
}

message GuajiPvpFightEndReq {
	optional uint32 play_mode = 1; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 2;
	optional uint32 cRet = 3; // for 测试
	optional uint32 cDamage = 4;
	optional bool isEscape = 5;
}

message GuajiPvpFightEndRes {
	optional uint32 result = 1; // 1 有奖励  2 对方没有碎片可以抢夺 3 战斗失败
	repeated Reward reward = 2;
	optional uint32 rank = 3;
	optional uint32 stealCount = 4;
}

message GuajiRankPlayer {
	optional uint64 playerId = 1;
	optional string name = 2;
	optional uint32 count = 3; //碎片数量
	optional uint32 rank = 4;
	optional uint32 dist = 5;
	optional uint32 vip = 6;
	optional uint32 militaryRank = 7;
}

message GuajiPvpTodayRankRes {
	repeated GuajiRankPlayer player = 1;
	optional uint32 rank = 2;
}

message GuajiPvpYestodayRankRes {
	repeated GuajiRankPlayer player = 1;
}

message CrossSceneWatchReq {
	required uint32 sceneId = 1;
}

message CrossSceneEnterReq {
	required uint32 sceneId = 1;
}

message CrossSceneLeaveReq {
	required uint32 sceneId = 1;
}

message CrossSceneWatchCloseReq {
	required uint32 sceneId = 1;
}

message CrossSceneWatchRes {
	repeated ScenePlayerInfo player = 1;
}

message CrossSceneEnterNotify {
	required ScenePlayerInfo player = 1;
}

message CrossSceneEnterOtherNotify {
	required uint32 sceneId = 1;
	repeated ScenePlayerInfo player = 2;
}

message CrossSceneLeaveNotify { 
	required uint64 playerId = 1;
}

message GuajiSomeDataNotify {
	optional uint32 pvpCount = 1;
	optional uint32 immuTm = 2;
}

////////////// guaji  end //////////////////

message BattleParam {
	required uint32 player_mode = 1;
	repeated uint32 seed = 2; 
}

//PLAYER_CHANGEGLORY
message BattleResult {
	required uint32 result = 1;//比赛结果
	required uint32 turn_num = 2;		//回合数
	required double damage_sum = 3;//攻击方伤害统计
}

// 战斗服务相关协议
//PLAYER_CHANGEGLORY
//[NULL]
message ITBattleCalcReq {
	required uint64 id = 1; // battleInfo  id
	repeated BattlePlayer player = 2;
	repeated SkillTimePoint time_point = 3;
	required BattleParam param = 4;
	optional bool needReportId = 5;
}
//[NULL]
message ITBattleCalcRes {
	required uint64 id = 1; // battleInfo  id
	repeated BattlePlayer player = 2;  //暂时只set血量
	required BattleResult result = 3;
	optional string reportId = 4;
}
//[NULL]
message ITBattleReportData {
	required string reportId = 1;
	required uint32 kind = 2;   // 玩法类型
	repeated uint32 gParam = 3;  // 玩法参数
	repeated BattlePlayer player = 4;
	repeated SkillTimePoint timePoint = 5;
	required BattleParam param = 6;
	required uint32 stamp = 7; //备用，战报生成时间
	// 战斗过程伤害
}
//[NULL]
message ITBattleReportSaveReq {
	repeated string reportId = 1;
	required uint32 kind = 2;
	repeated uint32 param = 3;
	repeated string delReportId = 4;
	required uint32 status = 5;  // 0 为永久 1 为可删除 
}
//[NULL]
message ITBattleStartReq {
	message PlayerInfo{
		required uint64 id = 1;
		required uint32 dist = 2;
	}
	required uint64 id = 1; // battleInfo  id
	repeated PlayerInfo players = 2; //玩家
	repeated BattlePlayer player = 3;//战斗角色
}
//[NULL]
message ITBattleStopReq {
	required uint64 id = 1; // battleInfo  id
}

//[NULL]
message ITGuajiPvpStealReq {
	required uint64 playerId = 1;
	required uint64 btlInfoId = 2;
	required uint32 itemId = 3;
	required uint32 count = 4;
	optional PlayerBaseInfo stealer = 5; // for log 记录
	optional string reportId = 6;
}

message BattleErrNoti {
	
}

//[NULL]
message ITCrossSceneEnterReq {
	required uint64 playerId = 1;
	required uint32 sceneId = 2;
	required uint32 sceneKind = 3;
	required ScenePlayerInfo info = 4;
}

//[NULL]
message ITGuajiPvpFightStartReq {
	required PlayerBaseInfo self = 1;
	required uint64 target = 2;
	required uint32 targetdist = 3;
	repeated BattlePlayer players = 4;
	required uint32 itemid = 5;
	required uint32 count = 6;

}
//[NULL]
message ITGuajiPvpFightStartRes {
	required uint64 playerId = 1;
	optional uint64 btlInfoId = 2;
	repeated uint32 random = 3;
	repeated BattlePlayer player = 4;
	optional bool isImmu = 5;
}

//[NULL]
message ITGuajiPvpAutoFightReq {
	optional PlayerBaseInfo self = 1;
	optional uint64 target = 2;
	optional uint32 targetdist = 3;
	repeated BattlePlayer players = 4;
	optional uint32 itemid = 5;
	optional uint32 count = 6;
	optional uint32 totalStealCount = 7; //已经偷取的个数
	optional uint32 kind = 8; // 1 for 简易战报
}

//[NULL]
message ITGuajiPvpAutoFightRes {
	optional uint64 playerId = 1;
	optional uint32 stealItemId = 2;
	optional uint32 stealCount = 3; //本次偷取的个数
	//optional uint32 rank = 4; //当前排名
	optional string reportId = 5;
	optional bool isImmu = 6;
	optional uint32 result = 7;
	optional PlayerBaseInfo target = 8;
	optional BgFightInfo atkerbp = 9;
	optional BgFightInfo targetbp = 10;
}

//[NULL]
message ITGuajiPvpGetBattlePlayerReq {
	required uint64 playerId = 1;
	required uint64 btlInfoId = 2;
}
//[NULL]
message ITGuajiPvpGetBattlePlayerRes {
	required uint64 btlInfoId = 1;
	required bool isImmu = 2;
	repeated BattlePlayer players = 3;
	optional PlayerBaseInfo target = 4;
	optional uint64 unloadTargetId = 5;
	optional uint32 unloadTargetDist = 6;
}
//[NULL]
message ITGuajiPvpFightEndReq {
	required uint64 btlInfoId = 1;
	required uint32 play_mode = 2; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
	optional uint32 totalStealCount = 4; //已经偷取的个数
	optional uint32 cRet = 5; // for 测试
	optional uint32 cDamage = 6;
}
//[NULL]
message ITGuajiPvpFightEndRes {
	required uint64 playerId = 1;
	required uint32 result = 2;
	required uint32 stealItemId = 3;
	required uint32 stealCount = 4; //本次偷取的个数
	optional PlayerBaseInfo target = 5;
	//optional uint32 rank = 6; //当前排名
	optional string reportId = 7;
}


// GUAJI PVP FIGHT END 


//=============== 公会Boss战 ====================

message FamilyBossJiesuoReq {
	
}

message FamilyBossAttackReq {
	
}

message FamilyBossJiguanReq {
	
}

message FamilyBossCheerReq {
	
}

message BtlAddBuffNotify {
	required uint32 buffId = 1; 	//buffid 对应battleboss_buff表
	required uint64 playerId = 2;	//buff 目标id
	required uint32 count = 3;		//buff 叠加层数
}

message BtlDelBuffNotify {
	required uint32 buffId = 1;
	required uint64 playerId = 2;
}

message BtlSkillNotify {
	required uint64 playerId = 1;
	required uint32 skillId = 2;
}

message BtlPlayerDeadNotify {
	required uint64 id = 1;
	required int32 x = 2;
	required int32 y = 3;
}

message BtlPlayerReviveNotify {
	required uint64 id = 1;
}

message BtlNpcHpNotify {
	required uint64 npcId = 1;
	required float hp = 2;
}


//======关卡首杀排行榜
message StageBtlGuideReq {
	required uint32 stageId = 1;
}

message StageBtlGuideRes {
	required uint32 stageId = 1;
	optional StageBtlReport shousha = 2;
	repeated StageBtlReport zuiqiang = 3;
	repeated StageBtlReport jixian = 4;
}

message StageBtlReport {
	message BuZhen {
		required uint32 pos = 1;
		required uint32 heroId = 2;
		required uint32 level = 3;
	}
	repeated string reportId = 1;
	required uint64 playerId = 2;
	required uint32 heroId = 3;
	required string name = 4;
	required uint32 level = 5;
	required uint64 zhanli = 6;
	required uint64 time = 7;
	repeated BuZhen buzhen = 8;
	optional uint64 hurt = 9;
}

//================时装系统==================

message ClothesSkillBagRes{
	repeated uint32 id = 1;
	repeated uint32 use = 2;
}

message ClothesWearReq{
	required uint32 id = 1;
	required uint32 kind = 2;
}

message ClothesBagRes{
	repeated Item items = 1;
	optional FightProp prop = 2;
	optional uint64 ability = 3;
}

message ClothesSkillReq{
	required uint32 kind = 1;
	required uint32 skillId = 2;
}
message ClothesActiveReq{
	required uint32 id = 1;
}
message ClothesActiveRes{
	repeated uint32 skill = 1;
	optional FightProp prop = 2;
	optional uint64 ability = 3;
}
//========================运镖==========
// 进入运镖界面
message GetYunBiaoStateRes{
	required uint32 stated = 1;//返回当前界面状态，若是组队则返回0，如是飞龙则返回1
}



message RefreshYunBiaoShipQualityRes{
	required uint32 quality = 1;
	required uint32 count = 2;//还能刷新的次数
}

message YunBiaoLockReq{
	required bool lock = 1;//是否锁定
}

message GetYunBiaoFlyInfoRes{
	required bool locked = 1;	//进入飞行界面时飞艇是否锁定
	required uint64 time = 2;		//飞艇解锁时间
	repeated FlyShips flyships = 3; //返回界面中非仇人的飞艇,如果自己飞船在飞行中的话，则包含自己的飞船
	repeated FlyShips enemyships = 4;//仇人飞船
	required uint64 shipid = 5;//返回自己的飞船的id
	required bool feixingjieshu	= 6;//飞船结束
}




message FlyShips{
	required uint64 id = 1;
	required string name = 2;
	optional uint64 lastbeidajietime = 3;//最近被打劫时间
	required uint64 startTm = 4;//起飞时间
}

// 飞行打劫界面Res
message ShowYunBiaoDaJieInfoReq{
	required uint64 id = 1; 	//要显示的对方船的id
}

message ShowYunBiaoDaJieInfoRes {
	required string name = 1; 		//船长名字
	required uint32 quality = 2; 	//飞船品质
	required string familyName = 3; // 公会名称
	required uint64 lastbeidajietime = 4;  		//最近被打劫时间
	required uint32	level	= 5;	//队长的等级
	// 袭击可得收益
}

// 打劫
message YunBiaoDaJieReq {
	required uint64 shipId = 1; //打劫飞船id
	repeated BuZhen	list = 2;//调整自己的进攻阵容
	required uint32 myid = 3;//自己的飞船id
}

message YunBiaoDaJieRes {
	required uint32 reportId = 1; 	//战报id
	required uint64 time = 2; 		//返回当前打劫的时间
}

//game 端向跨服端发送运镖开始的协议

// game 端向跨服端发送打劫的协议
//[NULL]
message CrossYunBiaoCanDaJieReq{
	required uint64 id = 1;		//打劫者的id
	required uint64 shipid = 2;	//打劫的飞船的id
	required uint32 dist = 3;
	repeated BuZhen buzhen = 4;
}

//[NULL]
message CrossYunBiaoCanDaJieRes{
	required bool ok = 1;	//能否打劫
	required uint64 id = 2;	//打劫者的id
	required uint32 dist = 3;	//打劫者的区
	required uint64 shipid = 4;//打劫者的船
	repeated BuZhen buzhen = 5;
	required uint64 dajieshijian = 6;//打劫时间
}

//[NULL]
message CrossYunBiaoDaJieReq{
	required uint64 shipid = 1;
	required uint64 id = 2;	//打劫者的id
	required uint32 dist = 3;
	repeated BuZhen buzhen = 4;
}

//跨服端向game 端请求运镖成员战斗数据的协议
//[NULL]
message CrossGameFigthtYunBiaoReq{
	required uint64 id = 1;	//打劫者的id
	required uint32 dist = 2;
	required YunBiaoFightPlayerInfo targetdata = 3;	//需要的目标玩家的id
	required uint32 number = 4; //标志现在需要第几个人的数据
	required uint32 playerpos = 5;//主角的位置信息，用于验证数据的一致性	
}
message YunBiaoFightPlayerInfo{
	required uint64 id = 1;
	required uint64 heroid = 2;
}

//跨服端向game 端请求运镖成员战斗数据的协议
//[NULL]
message CrossGameFigthtYunBiaoRes{
	required uint64 id = 1;	//  打劫者的id
	required uint32 dist = 2;	//  打劫者的区
	required BattlePlayer player = 3;//主角战斗数据
	required BattlePlayer hero = 4;	//英雄战斗数据
	required uint32 number = 5;	//返回下一个标识符，供跨服向game继续请求
	required uint64 battleId = 6;//被请求人的id
	required uint32 position = 7;//被请求人的位置信息
}

//==========商店系统======================
//商店购买
message ShopBuyReq {
	required uint32 id = 1;	//商店道具id
	required uint32 num = 2;	//数量
}

message ShopBuyRes {
	required ShopBuyInfo info = 1;
}
//商店刷新 kind 商店id   cost 消耗道具类型  1 钻石 2  道具 
message ShopRefreshReq{
	required uint32 kind = 1;
	required uint32 cost = 2;
}
message ShopRefreshRes{
	required uint32 kind = 1;
	repeated uint32 id  = 2;
	optional uint32 time = 3;
	optional uint32 free = 4;
}

//商店列表获取
message ShopListReq{
	required uint32 kind = 1;
}
//商店道具列表
message ShopListRes{
	required uint32 kind = 1;  //商店类型
	repeated uint32 id = 2;		//可购买的道具
	repeated ShopBuyInfo info = 3; //玩家已购买的数量
	optional uint32 time = 4;	//刷新的次数
	optional uint32 fresh = 5; //刷新的时间
	repeated uint32 freshBuy = 6;//刷新间隔商品的购买记录
	optional uint32 consumeNum = 7;	//货币消耗量
	optional uint32 free = 8; //刷新的免费次数
}


message ShopBuyInfo{
	required uint32 id = 1;
	required uint32 num = 2;
}
//==============商城====================
message mallItem{
	required uint32 id  			= 1; 	//商品id
	required uint32 kind  			= 2;	//类型 1 礼包 2 特价 3 推荐 4 热销 
	optional uint32 position  		= 3;	//位置
	required string items  			= 4;	//道具内容 20:id:count|...
	required string old_price  		= 5;	//旧价格
	required string now_price  		= 6;	//新价格
	optional string num_con  		= 8;	//限购类型和数量  type:num|type:num
	optional string buy_con  		= 9;	//购买条件
	optional string discount  		= 10;	//折扣
	optional uint32 vip  			= 11;	//vip等级
	optional string banner			= 12;	//图片
	optional uint32 endTime 		= 13;	//结束时间
	
}
message specialItem{
	required uint32 id = 1;
	required uint32 price = 2;
}
message MallListRes{
	repeated mallItem libao = 1;
	repeated mallItem tejia = 2;
	repeated mallItem tuijian = 3;
	repeated mallItem rexiao = 4;
	repeated ShopBuyInfo global = 5;
	repeated ShopBuyInfo person = 6;
	optional uint32 gDiamondLimit = 7;
}

message MallBuyReq{
	required uint32 id = 1;
	required uint32 num = 2;
}
message MallBuyRes{
	required ShopBuyInfo global = 1;
	required ShopBuyInfo person = 2;
}

message MallNotify{
	repeated ShopBuyInfo info = 1;
}

// =====================task ==============

message TaskInfo {
	message Progress {
		required uint32 id = 1;
		required uint32 count = 2;
	}
	required uint32 id = 1;
	repeated Progress progress = 2;
	required uint32 status = 3;  // 0 未开启等级限制 1 任务已开启 2 任务已完成 等待领奖 3 已经领奖
	optional uint32 deadTm = 4;
}

message TaskGetCurInfoReq {
	repeated uint32 kinds = 1;
}

message DynamicStaticTaskInfo {
	optional uint32 taskId = 1;
	optional uint32 id = 2;
	optional uint32 count = 3;
}

message TaskGetCurInfoRes {
	repeated TaskInfo info = 1;
	repeated DynamicStaticTaskInfo staticInfo = 2;
}

message TaskFinishReq {
	required uint32 id = 1;
}

message TaskInfoNotify {
	required TaskInfo info = 1;
}

// ========== activity ========
message ActivityProgress {
	optional uint32 kind = 1;
	optional uint64 para1 = 2;
	optional uint64 para2 = 3;
}

message ActivityReward {
	optional uint32 id = 1;
	repeated ActivityProgress progress = 2;
	optional uint32 status = 3;
	optional uint32 swapTimes = 4;
}

message ActivityInfo {
	required uint32 id = 1;
	repeated ActivityReward reward = 2;
	//required uint32 status = 3;  // 0 未开启等级限制 1 任务已开启 2 任务已完成 等待领奖 3 已经领奖
}

message ActivityGetInfosRes {
	repeated ActivityInfo info = 1;
}

message ActivityRewardFinishReq {
	required uint32 aid = 1;
	required uint32 rid = 2;
	optional uint32 count = 3;
	optional uint32 pos = 4;//LGPTODO
}

message ActivityInfoNotify {
	required ActivityInfo info = 1;
}

message ActivityRewardNotify {
	optional uint32 aid = 1;
	optional ActivityReward reward = 2;
}

message StaticActivityReward {
	message Function {
		optional uint32 id = 1;
		optional uint64 para1 = 2;
		optional uint64 para2 = 3;
	}
	required uint32 id = 1;
	optional uint32 startTm = 2;
	optional uint32 endTm = 3;
	repeated Function function = 4;
	optional uint32 relation = 5;
	optional string reward_condition = 6;
	optional string reward = 7;
	optional string pay = 8;
	optional string discount = 9;
	optional uint32 kind = 10;
	optional uint32 swapTimes = 11;
	optional string reward2 = 12;//LGPTODO
	optional string reward3 = 13;//LGPTODO
	optional string rewardsign = 14;
	optional string link_url = 15;
}

message StaticActivity {
	required uint32 id = 1;
	optional string name = 2;
	optional uint32 minlv = 3;
	optional uint32 maxlv = 4;
	optional uint32 minvip = 5;
	optional uint32 maxvip = 6;
	optional uint32 starttm = 7;
	optional uint32 endtm = 8;
	optional uint32 award_starttm = 9;
	optional uint32 award_endtm = 10;
	optional string pictures = 11;
	optional string notice = 12;
	repeated StaticActivityReward ar = 13;
	optional string act_link = 14;
	optional uint32 notice_position = 15;
	optional uint32 order = 16;
	optional uint32 notice_starttm = 17;
	optional uint32 notice_endtm = 18;
	optional string activitygroupid =19;
	optional string title_pic = 20;
}
message StaticActivitysRes {
	repeated StaticActivity acs = 1;
}

message ActivityHotUpdateNotify {
	
}

//=================查看他人信息==============
message ViewOtherPlayerReq{
	required uint64 id = 1;
	optional uint32 dist = 2;
	optional uint32 vDist = 3;
	optional uint64 vId = 4;
}

message ViewOtherPlayerRes{
	required uint64 id = 1;
	required string name = 2;
	repeated uint32 fashion = 3;
	required uint64 ability = 4;
	optional uint32 military = 5;
	optional uint32 horse = 6;
	optional uint32 glory = 7;
	required HeroInfo role = 8;
	repeated HeroInfo heroes = 9;
	optional uint32 fashionCount = 10;
	optional uint32 horseCount = 11;
	optional uint32 dist = 12;
	optional PlayerQQInfo qqInfo = 13;
	optional PetInfo pet = 14;
}

//[NULL]
message ITViewOtherPlayerReq {
	required uint64 viewerId = 1;
	required uint32 viewerDist = 2;
	required uint64 targetId = 3;
	optional uint32 targetDist = 4;
}
//[NULL]
message ITViewOtherPlayerRes {
	required uint64 viewerId = 1;
	required uint32 viewerDist = 2;
	optional ViewOtherPlayerRes res = 3;
}

enum SELECT_ENEMY {
	KIND_MJTX = 1;
}

//[NULL]
message ITSelectEnemyByAbilityReq {
	optional uint64 playerId = 1;
	optional uint32 kind = 2;
	optional uint64 lowAbility = 3;
	optional uint64 highAbility = 4;
	optional uint32 count = 5;
}

//[NULL]
message ITSelectEnemyByAbilityRes {
	optional uint64 playerId = 1;
	optional uint32 kind = 2;
	repeated EnemyPlayer players = 3;
}

//<====================竞技场====================>
//请求竞技场面板信息

enum ARENA_REWARD_STATUS{
	REWARD_NOT_AVAILABLE 	= 1;
	REWARD_AVAILABLE		= 2;
	REWARD_ALREADY_GET		= 3;
}

message ArenaInfoRes{
	optional uint32 rank 				= 1;
	optional int32 	residualTimes 		= 2;
	optional uint32 scores 				= 3;
	optional uint32 arenaCoin 			= 4;
	optional uint32 cdStamp 			= 5;
	optional bool	isCdRed 			= 6;
	repeated ArenaPlayer arenaPlayers 	= 7;
	optional uint32 histTopRank 		= 8;
	optional uint32 buyTimesDiamond 	= 9;
	optional uint32 buyTimesCount 		= 10;
	optional uint32 yesterdayRank 		= 11;
	//	optional bool	canGetRankReward 	= 12;
	optional uint32 rankRefreshTime 	= 13;	 //排名结算时间
	optional uint32 playerRefreshTime 	= 14;  	 //玩家数值刷新时间
	optional string manifesto 			= 15;
	optional bool	canGetScoreReward 	= 16;		
	optional ARENA_REWARD_STATUS rankRewardStatus 	= 17;	//排名奖励状态
	repeated ArenaReport reports		= 18;	//战报
}

message ArenaPlayer{
	optional PlayerBaseInfo playerInfo = 1;
	optional uint32 rank = 2;
	optional string manifesto = 3;
}

//请求战报
message ArenaReportInfoRes{
	repeated ArenaReport reports = 1;
}

message ArenaReport{
	optional bool isAttacker = 1;
	optional bool isWin = 2;
	optional uint32 rank = 3;
	optional bool isNew = 4;
	optional uint32 createTime = 5;
	optional string reportId = 6;
	optional PlayerBaseInfo player = 7;
	optional bool isRankChange = 8;
}

//请求挑战信息
message ArenaChallengeReq{
	required uint64 id = 1;
	required uint32 rank = 2;
	optional uint32 kind = 3; // 1 简易战报
}

message ArenaChallengeRes{
	required bool isWin = 1;			//挑战结果
	repeated Reward drops = 2;			//掉落
	optional uint32 scores = 3;			//累计积分
	optional uint32 cdStamp = 4;		//Cd时间戳
	optional bool isCdRed = 5;			//Cd是否显示为红色
	optional int32 residualTimes = 6;	//剩余挑战次数
	optional bool canPass = 7;			//能否跳过
	optional uint32 histTopRank = 8;	//历史最高排位
	required string reportId = 9;		//战报Id
	//for简易战报
	optional BgFightInfo attacker = 11;
	optional BgFightInfo target = 12;
}

//多次挑战信息
message ArenaMultiChallengeReq{
	required uint64 id = 1;
	required uint32 rank = 2;
	required int32 times = 3;
}

message ArenaMultiChallengeRes{
	repeated ArenaMultiChallengeResult results = 1;	//结果
	optional uint32 scores = 2;						//累积积分
	optional uint32 cdStamp = 3;					//Cd时间戳
	optional bool	isCdRed = 4;					//Cd是否显示为红色
	optional int32  residualTimes = 5;				//剩余挑战次数
}

message ArenaMultiChallengeResult{
	required bool isWin = 1;
	repeated Reward drops = 2;
}

message ArenaClearCdDiamondRes{
	optional uint32 diamond = 1;
}

message ArenaBuyTimesRes{
	optional int32 	residualTimes = 1;
	optional uint32 nextDiamondCost = 2;
	optional uint32 buyTimesCount = 3;
}

message ArenaSetManifestoReq{
	required string manifesto = 1;
}

message ArenaChangeEnemyRes{
	repeated ArenaPlayer arenaPlayers = 1;
}

message ArenaGetRankRewardRes{
	repeated Reward rewards = 1;
	optional bool	canGetRankReward = 2;
}

message ArenaGetRankListRes{
	repeated PlayerArenaInfo playerArenaInfos = 1;
	optional uint32 myArenaRank = 2;
	optional uint32 myYesterdayRank = 3;
}

message PlayerArenaInfo {
	optional uint64 uid = 1;
	optional string name = 2;
	optional uint32 rank = 3;
	optional uint32 level = 4;
	optional uint64 ability = 5;
	optional string familyName = 6;
	optional uint32 stcNpcId = 7;
	optional uint32 yesterdayRank = 8;
	optional uint32 militaryRank = 9;
	optional uint32 dist = 10;
	optional uint32 avatarid = 11;
	optional uint32 avatarframeid = 12;
}

message ArenaReportNotify {
	optional ArenaReport report = 1;
}


//================回收系统=====================
message RecycleHeroDecomposeReq{
	repeated uint64 id = 1;
	required bool confirm = 2;
	required uint32 kind = 3;
}
message RecycleHeroDecomposeRes{
	repeated Reward res = 1;	
}

message RecycleEquipDecomposeReq{
	repeated uint64 id = 1;
	required bool confirm = 2;
	optional bool crit=3;
}
message RecycleEquipDecomposeRes{
	repeated Reward res = 1;
	optional Item goldBase =2; //金装胚子
}

message RecycleHorseEquipDecomposeReq{
	repeated uint64 id = 1;
	required bool confirm = 2;
}
message RecycleHorseEquipDecomposeRes{
	repeated Reward res = 1;
}

message RecycleBaowuDecomposeReq{
	repeated uint64 id = 1;
	required bool confirm = 2;
	required uint32 kind = 3;
}
message RecycleBaowuDecomposeRes{
	repeated Reward res = 1;
	repeated BaoWu info = 2;
}
message RecyclePetDecomposeReq{
	repeated uint32 id = 1;
	required bool confirm = 2;
	required uint32 kind = 3;
}
message RecyclePetDecomposeRes{
	repeated Reward res = 1;	
}
message RecyclePlayerRebornReq{
	required bool confirm = 1;
}
message RecyclePlayerRebornRes{
	repeated Reward res = 1;
}
//================次数购买======================
message TimesBuyReq{
	required uint32 kind = 1;
	required uint32 time = 2;
	optional uint32 typenodeid = 3;
	optional uint32 nanduid = 4;
}
message GetTimesBuyRes{
	message times{		
		required uint32 kind = 1;
		required uint32 time = 2;
	}
	repeated times info = 1;
}


message SwapActionInfo {
	required uint32 id = 1;
	optional uint32 count = 2;
}

message GetSwapActionsReq {
	repeated uint32 ids = 1;
}
message GetSwapActionsRes {
	repeated SwapActionInfo info = 1;
}

message SwapActionReq {
	required uint32 id = 1;
	optional uint32 count = 2;
}
//===============排行榜========================
message AbilityRankReq{
	required uint32 page =1;	//当前请求的是第几页的数据	
}


message AbilityRankRes {
	required uint32 myRank =1;
	required uint64 myAbility=2;
	repeated AbilityRankData ability=3;	
	required uint32 page=4;	//总共有多少页数据需要显示
}
message AbilityRankData{
	required uint32 rank=1;
	required string name=2;
	optional string familyName=3;
	required uint64 ability=4;
	required uint32 level=5;
	required uint64 id=6;	
	optional uint64 familId=7;
	optional PlayerQQInfo qqInfo=8;
	
}
message LevelRankReq{
	required uint32 page=1;//当前请求的是第几页的数据	
}

message LevelRankRes{
	required uint32 myRank =1;
	required uint32 myLevel=2;
	repeated LevelRankData level=3;
	required uint32 page=4;	//总共有多少页数据需要显示

}
message LevelRankData{
	required uint32 rank=1;
	required string name=2;
	optional string familyName=3;
	required uint64 ability=4;
	required uint32 level=5;
	required uint64 id=6;
	optional uint64 familId=7;
	optional PlayerQQInfo qqInfo=8;
}
message FamilyRankReq{
	required uint32 page=1;//当前请求的是第几页的数据	
}

message FamilyRankRes{
	optional string myFamilyName =1;
	optional uint32 myFamilyRank=2;
	repeated FamilyRankData family=3;
	required uint32 page=4;	//总共有多少页数据需要显示
}
message FamilyRankData{	
	required uint32 rank=1;
	required string name=2;
	required uint32 level=3;
	required uint32 number=4;
	required uint64 leaderId=5;
	required string leaderName=6;
	optional uint64 familId=7;
	optional PlayerQQInfo qqInfo=8;
}

message AreaRankReq{
	required uint32 page=1;
}

message AreaRankRes{
	required uint32 myAreaRank=1;
	repeated AreaRankData area=2;
	required uint32 page=3;	//总共有多少页数据需要显示
}
message AreaRankData{
	required uint32 rank=1;
	required string name=2;
	optional string family=3;
	required uint64 ability=4;
	required uint32 level=5;
	required uint64 id=6;
	optional uint64 familId=7;
	optional PlayerQQInfo qqInfo=8;
}

message StageStarRankReq{
	required uint32 page=1;
}

message StageStarRankRes{
	repeated StageStarRankData rank = 1;
	required uint32 mystar = 2;
	required uint32 myrank = 3;
	required uint32 page=4;	//总共有多少页数据需要显示
}
message StageStarRankData{
	required uint32 rank = 1;
	required uint32 star = 2;
	required string name = 3;
	required uint32 level = 4;
	optional string familyName=5;
	required uint64 id=6;
	optional uint64 familId=7;
	optional PlayerQQInfo qqInfo=8;
}

message RankSearchNameReq{
	required string name=1;
	required uint32 rank_id=2;
}

message RankSearchNameRes{
	optional uint32 rank=1;	//总排名
	optional uint32 page=2;//总页数
	repeated AbilityRankData ability=3;
	repeated FamilyRankData family=4;
	repeated LevelRankData level=5;
	repeated AreaRankData area=6;
	required RankExtraData extra=7;
	repeated StageStarRankData stage=8;
}


message RankExtraData{
	required uint32 myRank=1;
	optional uint32 myLevel=2;
	optional string myFamilyName=3;
	optional uint32 mystar=4;
	optional uint64 myAbility=5;
}

//==========系统时间==========
message SystemTimeNotify{
	optional uint32 timeStamp = 1;
}

//==========争霸赛==========

enum COMP_STATUS{
	GROUP_NOT_START 	= 0;	//小组赛未开始
	GROUP_16			= 1;	//小组16强赛
	GROUP_8				= 2;	//小组8强
	GROUP_4				= 3;	//小组4强
	GROUP_2				= 4;	//小组决赛
	GROUP_END			= 5;	//小组赛终了
	FINALS_NOT_START	= 10;	//巅峰之战未开赛
	FINALS_SEMI			= 11;	//巅峰之战半决赛
	FINALS				= 12;	//巅峰之战决赛
	FINALS_END			= 13;	//巅峰赛终了
	REWARD_PERIOD	    = 14;	//领奖阶段
}

enum COMP_TIME_KIND{
	MATCH				= 1;	//下一场比赛
	ROUND				= 2;	//下一轮比赛
	FINALS_OPEN			= 3;	//决赛开启时间
	NEXT_OPEN			= 4;	//下次开启争霸赛
	REWARD_OVER			= 5;	//领奖结束时间
}

enum COMP_REWARD_STATUS{
	NOT_AVAILABLE		= 0;	//不可领取
	GET_AVAILABLE		= 1;	//可领取
	ALREADY_GET			= 2;	//已领取
}

enum COMP_GAMBLE_STATUS{
	AVAILABLE			= 0;	//可下注
	COUNT_LIMIT			= 1;	//下注次数已满
	TIME_LIMIT			= 2;	//下注时间已过
	ALREADY_GAMBLE		= 3;	//已下注过
}

message CompeteInfoRes{
	optional COMP_TIME_KIND timeKind		= 1;
	optional uint32 nextStartTime			= 2;
	optional COMP_STATUS curStatus			= 3;
	optional COMP_STATUS nextAvaiStatus		= 4;
	optional bool isPlayerIn				= 5;
	optional int32 playerGStageIndex		= 6;
	optional int32 playerDisplayIndex		= 7;
	optional int32 playerRank				= 8;
	optional COMP_REWARD_STATUS rankRewardStatus = 9;
	optional bool canGetGambleReward 		= 10;
}

message CompeteGroupStageInfoReq{
	required int32 gStageIndex = 1;
}

message CompeteGroupStageInfoRes{
	repeated CompeteStageDisplayInfo stages = 1;
	optional int32 winnerDisplayIndex 		= 2;
}

message CompeteStageDisplayInfo{
	optional int32 frontStageIndex 	= 1;
	optional int32 winnerIndex		= 2;
}

message CompeteStatusTimeNotify{
	optional COMP_TIME_KIND timeKind 	= 1;
	optional uint32 nextStartTime		= 2;
	optional COMP_STATUS curStatus		= 3;
	optional COMP_STATUS nextAvaiStatus = 4;
}

message CompetePlayerDisplayReq{
	required int32 gStageIndex = 1;
}
message CompetePlayerDisplayRes{
	repeated CompetePlayerDisplayInfo playerInfos 	= 1;
	optional int32 gStageIndex						= 2;
}

message CompetePlayerDisplayInfo{
	optional PlayerBaseInfo baseInfo 	= 1;
	optional int32 	displayIndex 		= 2;
//	optional uint64 id 				= 1;
//	optional string name 			= 2;
//	optional uint32 stcNpcId		= 3;
//	optional uint32 wingId			= 4;
//	optional uint32 clothesId		= 5;
//	optional uint32 horseId			= 6;
//	optional bool	vip				= 8;
}

message CompeteStageInfoReq{
	optional int32 gStageIndex 		= 1;
	optional int32 frontStageIndex	= 2;
}

message CompeteStageInfoRes{
	repeated CompeteStagePlayerInfo	playerInfos = 1;
	repeated CompeteStageReport		reports		= 2;
	optional COMP_GAMBLE_STATUS		gambleStatus = 3;
	optional int32					gambleIndex = 4;
}

message CompeteStagePlayerInfo{
	optional PlayerBaseInfo baseInfo	= 1;
	optional uint32 winTime				= 2;
	optional int32 posIndex 			= 3;
//	optional uint64 id				= 1;
//	optional string name			= 2;
//	optional uint32	stcNpcId 		= 3;
//	optional uint32 wingId			= 4;
//	optional uint32 clothesId		= 5;
//	optional uint32 horseId			= 6;
//	optional uint64 ability			= 7;
//	optional int32  posIndex		= 9;
}

message CompeteStageReport{
	optional uint32 roundCount = 1;
	optional int32  winnerPos  = 2;
	optional string reportId   = 3;
	optional uint32 createTime = 4;
}

message CompeteGambleInfoRes {
	repeated CompeteGambleInfo gambleInfos = 1;
}

message CompeteGambleInfo{
	optional int32 gStageIndex 			= 1;
	optional int32 frontStageIndex 		= 2;
	optional COMP_STATUS status 		= 3;
	optional uint64 playerId 			= 4;
	optional string playerName 			= 5;
	optional uint32 gambleDiamond 		= 6;
	optional COMP_REWARD_STATUS rewardStatus = 7;
	optional uint32 rewardDiamond		= 8;
}

message CompeteGambleReq{
	optional int32 	gStageIndex		 	= 1;		//该字段仅供小组赛使用: 属于xx组
	optional int32  frontStageIndex		= 2;		//前端显示的stageIndex
	optional int32 	posIndex			= 3;		//位置
}

message CompeteGambleRewardReq{
	optional int32 gStageIndex 			= 1;
	optional int32 frontStageIndex		= 2;
}

message CompeteGambleRewardRes{
	optional bool canGetGambleReward = 1;
}

message CompetePlayerRankInfoRes{
	repeated CompetePlayerRankInfo rankInfos = 1;
}

message CompetePlayerRankInfo{
	optional int32 num = 1;	
	optional int32 rank = 2;
	optional uint32 createTime = 3;
}

message CompeteOpenTimeRes{
	optional uint32 openTime = 1;
}

message FunctionOpenTimeNotify{
	repeated FunctionOpenTimeInfo openTimeInfos = 1;
}
message FunctionOpenTimeInfo{
	required uint32 funcId	= 1;
	required uint32 time	= 2;
}

message FunctionTimesNotify{
	repeated FunctionTimesInfo timesInfos = 1;
}

message FunctionTimesInfo{
	required uint32 funcId 	= 1;		//功能id
	required uint32 times	= 2;		//功能剩余次数
}

//==========签到信息=======
message GetSignInInfoRes{
	repeated uint32 ids =1;//当前轮的签到次数
	required uint32	turn=2; //当前轮数
	required bool signIn=3;//当日是否签到
	optional uint32 nowOrder=4;
	repeated uint32 awards = 5; //新加奖励
}

message CanSignInRes{
	required bool signIn=1;
}

message SignInRes{
	required bool success=1;//是否成功领奖
}

message SignInAwardReq{
	required uint32 id=1;
}


//<==========七日目标==========>
enum SD_STATUS {
	SD_AVAILABLE	 	= 1;
	SD_NOT_AVAILABLE 	= 2;
	SD_ALREADY_GET		= 3;
}
enum SD_KIND {
	SD_LOGIN		= 1;
	SD_SHOP			= 2;
	SD_TASK			= 3;
}
message SevenDayInfoReq{
	required uint32 day = 1;
}
message SevenDayInfoRes{
	repeated SevenDayLoginInfo loginInfos 	= 1;
	repeated SevenDayShopInfo shopInfo		= 2;
	repeated SevenDayTaskInfo taskInfos		= 3;
	required uint32 day						= 4;
	repeated SevenDayAvaiInfo avaiInfos 	= 5;
}

message SevenDayBigTaskBuyReq{
	required uint32 day = 1;
}

message FourteenInfoReq{
	required uint32 day = 1;
}

message FourteenDayLoginInfo{
	required bool status 	= 1;
	required uint32 day			= 2;
}

message FourteenDayTaskInfo{
	required uint32 status 	= 1;
	required uint32 id			= 2;
	required uint32 value 		= 3;
}
message FourteenDayAvailInfo{
	required uint32 day = 1;
	required uint32 num	= 2;
}

//登录信息
message SevenDayLoginInfo{
	required SD_STATUS status 	= 1;
	required uint32 day			= 2;
}
//购买信息
message SevenDayShopInfo{
	required SD_STATUS status 	= 1;
	required uint32	buyCount 	= 2;
	required uint32	limitNum	= 3;
	optional uint32 myBuyCount 	= 4;
}
//任务信息
message SevenDayTaskInfo{
	required SD_STATUS status 	= 1;
	required uint32 id			= 2;
	required uint32 titleId		= 3;
	required uint32 value 		= 4;
	optional uint32 buy 		= 5;
}
//可领奖活动日
message SevenDayAvaiInfo{
	required uint32 day = 1;
	required uint32 num	= 2;
}

message SevenDayGetRewardReq{
	required SD_KIND kind 		= 1;
	required uint32 day			= 2;
	optional uint32 id			= 3;
	optional uint32 buyCount	= 4;	//购买量
	optional uint32 buyKind	= 5;	//购买商量
}
//时间戳
message SevenDayTimeStampRes{
	required uint32 startStamp 		= 1;
	required uint32 endStamp 		= 2;
	required uint32 rewardEndStamp 	= 3;
}

message SevenDayShopSellOutNotify{
	required uint32 day 		= 1;
	required uint32 buyCount 	= 2;
	required uint32 limitNum 	= 3;
	optional uint32 kind 		= 4;
}

message SevenDayAvaiNumRes {
	required uint32 num	= 1;
}

//<==========跨服战场==========>
enum BG_STATUS{
	BG_NOT_REG	= 1;
	BG_WAIT		= 2;
	BG_IN_BTL	= 3;
}
//界面基本信息
message BgInfoRes{
	required uint32 degree 		= 1;
	required uint32 score 		= 2;
	required uint32 residualDay = 3;
	required bool   open 		= 4;
	required BG_STATUS status 	= 5;
	optional uint32 eloScore	= 6;
	optional uint32 openDay		= 7;	//开服第x天
	optional uint32 winTimes 	= 8;
	optional uint32 failTimes 	= 9;
	optional uint32 lastMonthLocalRank = 10;
	optional uint32 lastMonthCrossRank = 11;
	optional uint32 penaltyStamp = 12;
	optional uint32 todayWinTimes = 13;
}
message BgBaseInfo{
	required uint32 degree	 	= 1;
	required uint32 score 		= 2;
	required uint32 winTimes 	= 3;
	required uint32 failTimes 	= 4;
	required BG_STATUS status 	= 5;
}
//玩家战场信息
message BgPlayerInfo{
	required PlayerBaseInfo baseInfo	= 1;
	required BgBaseInfo bgBaseInfo 		= 2;
	//	required uint32 degree				= 2;
	//	required uint32 score				= 3;
	//	required uint32 winTimes 			= 4;
	//	required uint32 failTimes			= 5;
	//	optional uint32 position			= 6;	
}
//玩家队伍信息
message BgTeamInfoRes{
	repeated BgPlayerInfo playerInfos = 1;
	optional uint64 leaderId = 2;
	optional uint64 teamId = 3;
}
//新加入玩家(组队) 战场信息
message BgTeamNewMemNotify {
	required BgPlayerInfo playerInfo = 1;
}
//玩家队伍信息
message BgTeamMemInfoNotify{
	repeated BgPlayerInfo playerInfos = 1;
	optional uint64 leaderId = 2;
	optional uint64 teamId = 3;
}
message BgRegNotify{
	required uint32 regStamp = 1;
	required BG_STATUS status = 2;
}
message BgLeaveNotify{
	required uint64 playerId = 1;
}
message BgBtlLeaveNotify{
	required uint64 playerId = 1;
}
message BgEnterReq{
	required bool accept = 1;
}
message BgCheckRes{
	required bool inBg = 1;
}
message BgTeamDismissNotify{
	required uint64 teamId = 1;
}
message BgFriendsListRes{
	repeated BgPlayerInfo playerInfos = 1;
}
message BgFamilyMemberListRes{
	repeated BgPlayerInfo playerInfos = 1;
}
message BgFightReq{
	required uint64 id = 1;
}
message BgFightNotify{
	required BgFightInfo attacker 	= 1;
	required BgFightInfo target		= 2;
	required uint64	winnerId		= 3;
}
message BgFightInfo{
	required uint64 playerId = 1;
	repeated BattlePlayer initPlayer = 2;
	repeated BattlePlayer resultPlayer = 3;
}
message BgFightNpcReq {
	required uint32 id	= 1;
}
message BgFightNpcRes {
	required BgFightInfo attacker 	= 1;
	required BgFightInfo target		= 2;
	optional bool isWin				= 3;
	optional uint64 npcAbility		= 4;
}
message BgFightNpcNotify {
	required uint64 id				= 1;	//攻击者
	optional uint32 npcResId 		= 2;	//被攻击Npc
	optional bool isWin				= 3;	//是否胜利
	optional uint32 teamKillNpcNum 	= 4;	//队伍杀死Npc次数
	optional uint32 teamSide		= 5;	//队伍
	optional uint32 hpPercent		= 6;	//剩余血量
}
message BgGatherReq{
	required uint32 id = 1;
}
message BgGatherPlayerInfo {
	required uint64 playerId = 1;
	required uint32 yield	 = 2;
	optional uint32 flagTimeOutStamp = 3;
}
message BgGatherTeamInfo {
	required uint32 side = 1;
	required uint32 totalNum = 2;
}
message BgGatherNotify{
	required uint32 id 						= 1;
	repeated BgGatherPlayerInfo gatherInfo	= 2;
	repeated BgGatherTeamInfo teamInfo		= 3;
	required uint32 resStatus 				= 4;
	required uint32 residualNum 			= 5;
}
message BgGatherStatusNotify {
	required uint64 id	= 1;
	required uint32 resId = 2;
}
message BgResStatusNotify{
	required uint32 id = 1;
	required uint32 resStatus = 2;
	required uint32 residualNum = 3;
	optional uint32 npcGroupId = 4;
}
message BgStageReportInfo{
	required PlayerBaseInfo baseInfo 	= 1;
	optional uint32 gatherNum			= 2;
	optional uint32 gatherHonor		 	= 3;
	optional uint32 killNum				= 4;
	optional uint32 killHonor			= 5;
	optional uint32 assistNum			= 6;
	optional uint32 assistHonor			= 7;
	optional uint32 score				= 8;
	optional uint32 side				= 9;
	optional uint32 resultHonor			= 10;
}
message BgStageGetReportRes{
	repeated BgStageReportInfo reportInfos 	= 1;
	optional uint32 myInitHonor			= 2;
	optional uint32 myInitScore			= 3;
	optional bool end 					= 4;
}

message CrossSceneMoveReq{
	required uint32 id = 1;
	required int32 x = 2;
	required int32 y = 3;
}

message CrossSceneMoveNotify {
	required uint32 id = 1;
	repeated PlayerMoveInfo infos = 2;
}

message BgStagePlayerInfo {
	required BgPlayerInfo playerInfo = 1;
	required int32 x = 2;
	required int32 y = 3;
	required uint32 side = 4;
	required uint32 status = 5;
	required uint32 hpPercent = 6;
	optional uint32 defenseStamp = 7;
	optional uint32 conDeathNum = 8;
	optional uint32 noviceBuffLayer = 9;
}
message BgStageEnterNotify {
	repeated BgStagePlayerInfo playerInfos = 1;
}
message BgStageNewEnterNotify {
	required BgStagePlayerInfo playerInfo = 1;
}

message BgStageResInfo {
	required uint32 id 			= 1;
	required uint32 status 		= 2;
	required uint32 residualNum = 3;
	optional uint32 runOutStamp = 4;
	optional uint64 owner		= 5;	//战旗专用字段 拿旗帜者
	optional uint32 rebornStamp = 6;
	optional uint32 flagTimeOutStamp = 7;
	optional uint32 residualTotalNum = 8;	
	optional uint32 npcGroupId		= 9;
}
message BgCryTeamInfo {
	required uint32 side = 1;
	required uint32 playerNum = 2;
	required uint32 resNum = 3;
	required uint32 killNum = 4;
}
message BgFireTeamInfo {
	required uint32 side = 1;
	required uint32 playerNum = 2;
	required uint32 resNum = 3;
	required uint32 killNum = 4;
	optional uint32 killNpcNum = 5;
}
message BgStageMyInfo {
	optional uint32 killNum 	= 1;
	optional uint32 assistNum 	= 2;
	optional uint32 gatherNum 	= 3;
	optional uint32 honor		= 4;
	optional uint32 gatherHonor = 5;
	optional uint32 killNpcNum  = 6;
}
message BgCryStageInfoNotify {
	required uint32 startStamp 			= 1;	
	repeated BgCryTeamInfo teamInfos 	= 2;
	repeated BgStageResInfo resInfos 	= 3;
	optional BgStageMyInfo myInfo		= 4;
}
message BgFireStageInfoNotify {
	required uint32 startStamp			= 1;
	repeated BgFireTeamInfo teamInfos 	= 2;
	repeated BgStageResInfo resInfos	= 3;
	optional BgStageMyInfo myInfo		= 4;
	optional uint32			leftNpcNum  = 5;
}

message BgStageEndNotify {
	optional uint32 winnerSide = 1;
	repeated BgStageReportInfo reportInfos 	= 2;
	optional uint32 myInitHonor			= 3;
	optional uint32 myInitScore			= 4;
}

message BgDeadNotify {
	required uint64 playerId = 1;
	required int32 x = 2;
	required int32 y = 3;
	repeated uint64 assistPlayerId = 4;
}

message BgRebornNotify {
	required uint64 playrId = 1;
	required int32 x = 2;
	required int32 y = 3;
}

message BgPlayerStatusNotify {
	required uint64 playerId = 1;
	required uint32 status = 2;
	required int32 x = 3;
	required int32 y = 4;
	optional uint64 killerId = 5;
	repeated uint64 assistPlayerId = 6;
	optional uint32 killerHpPercent = 7;	
	optional uint32 killerConKillNum = 8;
	optional bool firstKill	= 9;
	optional uint32 defenseStamp = 10;
	optional uint32 conDeathNum	= 11;
	optional uint32 flagTimeOutStamp = 12;
	optional uint32 flagRebornStamp = 13;
}

message BgSceneMoveReq {
	required int32 x = 1;
	required int32 y = 2;
}
message BgSceneMoveNotify{
	required uint64 id = 1;
	required int32 x = 2;
	required int32 y = 3;
	required bool legal = 4;
}
message BgStageLeaveNotify {
	required uint64 id = 1;
}

message BgGetTitleRewardReq {
	required uint32 id = 1;
}

message BgGetTitleRewardInfoRes {
	repeated uint32 ids = 1;
}
message BgGetRankInfoReq {
	required uint32 kind = 1;	//1:本服 2:跨服
	required uint32 page = 2;	//页数
}
message BgGetRankInfoRes{
	required uint32 kind = 1;
	repeated BgRankInfo infos = 2;
	optional uint32 myLocalRank = 3;
	optional uint32 myCrossRank = 4;
	optional bool rankClose = 5;
	optional uint32 rankLen = 6;
	optional PlayerBaseInfo lastMonthWinner = 7;	//上月赢家
}
message BgRankInfo {
	required PlayerBaseInfo baseInfo 	= 1;
	required uint32 winTimes 			= 2;
	required uint32 totalTimes 			= 3;
	required uint32 score 				= 4;
	required uint32 rank				= 5;
	optional uint32 crossRank			= 6;
}

message BgStartNotify {
	required uint32 startStamp = 1;
}

message BgPlaceFlagNotify {
	required uint32 flagId 		= 1;
	required uint64 playerId	= 2;
	required uint32 teamSide	= 3;
	required uint32 totalNum	= 4;
	optional uint32 rebornFlagId = 5;
	optional uint32 rebornStamp	= 6;
}

message CardInfoNotify {
	repeated CardInfo infos = 1;
}

message CardInfo {
	optional uint32 itemId 			= 1;	//卡片的id 后端在使用后须保存
	optional uint32 residualTimes 	= 2;	//剩余次数
	optional uint32 endStamp 		= 3;	//结束时间戳
}

//[NULL]
message ITBgEnterReq{
	required uint64 playerId	 	= 1;
	required bool accept 			= 2;
	repeated BattlePlayer btlPlayer = 3;
	optional uint32 initHonor		= 4;
	optional uint32 noviceBuffLayer = 5;
}
//[NULL]
message ITBgEnterRes{
	required uint64 playerId 	= 1;
	required bool accept 		= 2;
	required uint64 stageTeamId = 3;
}
//[NULL]
message ITBgBtlProtoReq{
	required uint64 playerId 	= 1;
}
//[NULL]
message ITBgBtlProtoRes{
	required uint64 playerId 		= 1;
	repeated BattlePlayer btlPlayer = 2;
}
//[NULL]
message ITBgGetCrossRankReq {
	required bool isMonthReward = 1;
}
//[NULL]
message ITBgGetCrossRankRes {
	repeated BgRankInfo infos 				= 1;
	required bool isMonthReward 			= 2;
	optional PlayerBaseInfo lastMonthWinner = 3;	//上一届冠军
}
//[NULL]
message ITBgGetNpcInfoReq {
	required uint64 stageId		= 1;
	optional uint32 npcGroupId 	= 2;
}
//[NULL]
message ITBgGetNpcInfoRes {
	required uint64 stageId		= 1;
	repeated BattlePlayer bps	= 2;
}

// ======================= cross =========================
//[NULL]
message ClientOnlineNotify {
	required PlayerBaseInfo info = 1;
	optional uint64 topAbility = 2;
}
//[NULL]
message ClientOfflineNotify {
	required uint64 id = 1; 
}

//[NULL]
message ITSynPlayerBaseInfoNotify {
	required PlayerBaseInfo info = 1;
}
//[NULL]
message ITGuajiPvpAddRobotNotify {
	repeated PlayerBaseInfo infos = 1;
	optional uint32 openStamp = 2;
}
//[NULL]
message ITCrossArenaRobotNotify {
	repeated PlayerBaseInfo infos = 1;
}

//========================= cross end====================


//================vip===============================

message GetVipInfoRes{
	optional uint32 dimond=1;
	repeated bool rewardGot=2;
}

message GetVipRewardInfoReq{
	required uint32 num=1;//领取哪个Vip豪礼
}

message GetVipRewardInfoRes{
	optional bool success=1;
}

message GetChargeInfoRes{
	message rewardInfo{
		optional uint32 canGet=2;//0代表不可领取，1代表可领取，2代表已经领取
		optional uint32 id=1;
	}
	repeated rewardInfo getReward=1; 
}

message VipReceiveChargeRewardReq{
	required uint32 num=1;
}

message VipReceiveChargeRewardRes{
	required bool success=1;
}

message VipGetFirstChargeRes{
	required bool firstCharge=1;
	optional bool reward=2;
	optional bool canGetClientReward=3;//能否领取
	optional bool canGetWebSaveReward=4;//能否领取微端收藏奖励
}

message VipMonthCardRes{
	optional int32 bigCard=1;
	optional int32 smallCard=2;
	optional int32 primeCard=3;
}

message VipGetFirstChargeRewardRes{
	required bool state=1;
}

message GuajiPvpGmReq {
	optional uint32 pos = 1;
	optional uint32 num = 2;
	optional PlayerBaseInfo self = 3;
	repeated BattlePlayer players = 4;
	optional uint32 itemid = 5;
	optional uint32 count = 6;
	optional uint32 totalStealCount = 7;
}

//========================国战======================
enum CITY_KIND {
	CK_BEGIN = 0;
	SHENDIAN = 1; //元素神殿
	ZHUCHENG = 2; //主城
	YAOSAI = 3;   //要塞
	CHENGCHI = 4; //城池
	GUANQIA = 5;  //关卡
	WORLD_TREE = 6; //世界之树
	CK_END = 8;
}

enum CITY_MOVE {
	NORMAL = 1;
	SKILL = 2;
}

enum CW_RANK_KIND {
	JG = 1;
	TODAY_JG = 2;
	GC = 3;
	TODAY_GC = 4;
	KILL = 5;
	TODAY_KILL = 6;
	LEGION_JG = 7;
	LEGION_GC = 8;
	LEGION_KILL = 9;
	CAMP_JG = 10;
	CAMP_GC = 11;
	CAMP_KILL = 12;
	CITY_KILL = 13;
}

enum CW_DEAD_KIND {
	NONE_KIND       = 0;
	NORMAL_KILL 	= 1;
	USE_SKILL 		= 2;
	JIANTA 			= 3;
	DILEI 			= 4;
	KULOU_ZHADAN 	= 5;
	PAOTA			= 6;
}

enum CW_ATK_KIND {
	JIANTA_ATK  = 1;
	NORMAL_ATK	= 2;
	DILEI_ATK = 3;
	KULOU_ATK = 4;
	HUOQIU_ATK = 5;
	ROBOT_ATK = 6;
	SHENMITA_ATK = 7;
	PAOTA_ATK = 8;
	SHENMITA_ADD_HP = 9;
}

// 个人玩家国战信息
message CwPlayerInfoRes {
	optional bool isRegister = 1;
	optional uint32 camp = 2;
	optional uint32 phase = 3;
}

message CwCandidateInfo {
	optional PlayerBaseInfo info = 1;
	optional uint32 voteCount = 2;
}
// 本服报名列表
message CwCandidateListRes {
	repeated CwCandidateInfo players = 1;
}

message CwVoteGeneralReq {
	required uint64 id = 1;
	required uint32 count = 2;
}

message CwVoteMarshalReq {
	required uint64 id = 1;
	required uint32 count = 2;
}

//[NULL]
message ITCwVoteMarshalReq {
	required uint64 playerId = 1;
	required uint64 marshalId = 2;
	required uint32 count = 3;
}
//[NULL]
message ITCwVoteMarshalRes {
	required uint64 playerId = 1;
	required uint32 count = 2;
}

// 本服将军
message CwShowGeneralRes {
	optional PlayerBaseInfo info = 1;
}
// 抽签阵营
message CwRandCampRes {
	required uint32 camp = 1;
}
// 跨服阵营列表
message CwCampListReq {
	optional uint32 kind = 1; //0 代表 全部  1 风 2 水 3 火 4 中立
}

message CwCampGeneralInfo {
	optional PlayerBaseInfo info = 1;
	optional uint32 voteCount = 2;
	optional uint32 camp = 3;
}

message CwCampListRes {
	repeated CwLegionInfo info = 1;
	repeated MapKey32Value64 ability = 2;
	repeated MapKey32Value32 count = 3;
}

message CwShowMarshalReq {
	optional uint32 kind = 1; //  1 风 2 水 3 火 4 中立
}

// 跨服元帅信息
message CwShowMarshalRes {
	optional PlayerBaseInfo info = 1;
}

message CwCity {
	optional uint32 id = 1;
	optional uint32 camp = 2; //1-3 阵营 4 中立
	optional bool isFight = 3; // 1 初始 2 交战
	optional bool isFull = 4;
	optional uint32 surroundStat = 5; // 0 没有围攻 1 四面楚歌 2 背水一战
	optional uint64 legionId = 6;
	optional string legionName = 7;
	optional uint32 baohuTm = 8;
}

message CwCityMapRes {
	repeated CwCity city = 1;
	optional uint32 curCity = 2;
	optional uint32 camp = 3;
	optional uint32 xingdong = 4;
	optional uint32 jungong = 5;
	optional uint32 position = 6; //0 普通 1 将军 2 元帅
	optional uint32 fightCdStamp = 7;
	optional uint32 fromPos = 8;
	optional uint32 toPos = 9;
	optional uint32 endTm = 10;
	optional uint32 moveCost = 11;
	optional uint32 daytimeJg = 12;
	optional uint32 daytimeGx = 13;
}

message CwCityStatNotify {
	repeated CwCity city = 1;
}

message CwCityMoveReq {
	repeated uint32 pos = 1;
}

message CwCityMoveRes {
	optional uint32 pos = 1;
	optional uint32 xingdong = 2;
}
	
message CwEnterCityReq {
	optional uint32 cityId = 1;
}

message CwInnerCityPlayerInfo {
	optional uint64 playerId = 1;
	optional string name = 2;
	optional uint32 dist = 3;
	optional string opName = 4;
	optional uint32 militaryRank = 5;
	optional uint32 camp = 6;
	optional uint32 position = 7;
	optional uint32 npcId = 8;
	optional uint32 instHp = 9;
	optional uint32 instKind = 10;
	optional uint64 legionId = 11;
	optional string legionName = 12;
	optional uint32 maxHp = 13;
}

message CwGridInfo {
	optional uint32 x = 1;
	optional uint32 y = 2;
	optional uint32 camp = 3;
	optional CwInnerCityPlayerInfo player = 4; //如果该字段为nil 表示该格子有多个玩家
	optional uint32 npcNum = 5;
	optional uint32 constructVal = 6;  //类云梯均使用该字段
	optional uint32 tm = 7;			   //用于地洞 地雷等时间类型
	optional uint32 instkind = 8; 	   //各种器械类型 非静态表 动态类型 直接使用器械itemid 作为类型
	optional uint32 npcId = 9;
	optional uint32 playerCount = 10;
}

message CwInnerCityGridInfoNotify {
	repeated CwGridInfo info = 1;
}

message CwInnerCityEnterDidongReq {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityEnterDidongRes {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityCampAbilityInfo {
	optional uint32 camp = 1;
	optional uint32 playerCount = 2;
	optional uint64 ability = 3;
}

message CwSkillInfo {
	optional uint32 id = 1;
	optional uint32 cdStamp = 2;
}

message CwGetSkillInfoRes {
	repeated CwSkillInfo skillInfo = 11;
}

message CwPlayerBaseValNotify {
	optional uint32 shiqi = 1;
	optional uint32 pilao = 2;
	optional uint32 xingdong = 3;
	optional uint32 fightCdStamp = 4;
	optional uint32 daytimeJg = 5;
	optional uint32 daytimeGx = 6;
}

message CwEnterCityRes {
	repeated CwGridInfo grid = 1;
	repeated CwInnerCityCampAbilityInfo abilitys = 2;
	optional CwInnerCityPlayerInfo info = 3;
	optional uint32 xingdong = 4;
	optional uint32 shiqi = 5;
	optional uint32 pilao = 6;
	optional uint32 x = 7;
	optional uint32 y = 8;
	optional uint32 cdStamp = 9;
	optional CwRank rankInfo = 10;
	optional uint32 restRobotCount = 11;
}
	
message CwKillMasterNotify {
	optional uint32 camp = 1;
	optional uint32 position = 2;  // 2 元帅 1 将军
	optional PlayerBaseInfo info = 3;
	optional PlayerBaseInfo target = 4;
	optional uint32 targetPosition = 5; //2 元帅 1 将军
	optional uint32 targetCamp = 6;
}

message CwWarPhaseStatusNotify {
	optional bool isStart = 1;
	optional uint32 phase = 2;
}

message CwInnerCityCampAbilityNotify {
	repeated CwInnerCityCampAbilityInfo abilitys = 1;
}

message CwInnerCityAutoFightReq {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityAutoFightNotify {
	optional uint32 result = 1;
	repeated Reward reward = 2;
	optional BgFightInfo attacker = 3;
	optional BgFightInfo target = 4;
	optional PlayerBaseInfo targetBaseInfo = 5;
	optional uint32 cdStamp = 6;
	optional uint32 shiqi = 7;
	optional uint32 pilao = 8;
	optional PlayerBaseInfo selfBaseInfo = 9;
}

message CwInnerCityConstructBuildingReq {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityConstructBuildingRes {
	optional uint32 xingdong = 1;
	optional uint32 cdStamp = 2;
}

message CwInnerCityMoveReq {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityMoveRes {
	optional uint32 errCode = 1;
	optional uint32 xingdong = 2;
}

message CwInnerCityMoveNotify {
	optional CwInnerCityPlayerInfo info = 1;
	optional uint32 x = 2;
	optional uint32 y = 3;
	optional uint32 kind = 4; // 0 普通移动 1 技能闪现
	optional CwGridInfo srcGrid = 5;
	optional uint32 deadKind = 6;
}

message CwInnerCityUseSkillReq {
	optional uint32 skillId = 1;
	repeated uint32 params = 2;
}

message CwInnerCityUseSkillRes {
	optional uint32 skillId = 1;
	repeated uint32 params = 2;
	optional uint32 cdStamp = 3;
}

message CwInnerCityUseSkillNotify {
	optional uint32 x = 1;
	optional uint32 y = 2;
	optional uint32 skillId = 3;
	repeated uint32 params = 4;
}

message CwLeaveCityNotify {
	optional uint64 id = 1;
}

//[NULL]
message ITCwInnerCityGetNpcReq {
	repeated uint32 npcId = 1;
}

message CwNpcBps {
	optional uint32 npcId = 1;
	repeated BattlePlayer bps = 2;
	optional uint64 ability = 3;
}
//[NULL]
message ITCwInnerCityGetNpcRes {
	repeated CwNpcBps npcs = 1;
}

message CwInnerCityAttackBuildingReq {
	optional uint32 x = 1;
	optional uint32 y = 2;
}

message CwInnerCityAttackBuildingRes {
	optional uint32 xingdong = 1;
	optional uint32 cdStamp = 2;
}
	
message CwCityKillRankReq {
	optional uint32 cityId = 1;
}

message CwRank {
	optional uint32 kind = 1;
	repeated CwRankInfo info = 2;
}

message CwRankInfo {
	optional uint64 id = 1;
	optional uint32 dist = 2;
	optional string name = 3;
	optional uint32 militaryRank = 4;
	optional uint32 count = 5;
	optional string opName = 6;
	optional uint32 lv = 7;
	optional uint32 camp = 8;
}

message CwRankNotify {
	optional CwRank rank = 1;
}

message CwRankReq {
	optional uint32 kind = 1;
	optional uint32 startRank = 2;
	optional uint32 endRank = 3;
	optional uint32 cityId = 4;
}

message CwRankRes {
	optional CwRank rank = 1;
	optional bool isGetReward = 2;
	optional uint32 selfRank = 3;
	optional uint32 selfCount = 4;
}

message CwGetRankRewardReq {
	optional uint32 kind = 1;
}

message CwGetRankRewardRes {
	repeated Reward reward = 1;
}

message CwarBpInfo {
	optional uint64 id = 1;
	repeated BattlePlayer bp = 2;
}

message CwarBpInfos {
	repeated CwarBpInfo bps = 1;
}

//[NULL]
message ITCwWarPhaseBpNotify {
	repeated CwarBpInfo info = 1;
}

message CwPhaseNotify {
	optional uint32 phase = 1;
}

//[NULL]
message ITCwMarshalNotify {
	optional PlayerBaseInfo info = 1;
}

message JiesuanPlayerInfo {
	optional uint64 id = 1;
	optional uint32 dist = 2;
	optional string name = 3;
	optional uint32 militaryRank = 4;
	optional uint32 jungong = 5;
	optional uint32 killCount = 6;
	optional uint32 camp = 7;
	optional string opName = 8;
	optional uint32 rank = 9;
}

message JiesuanCampInfo {
	optional uint32 jungong = 1;
	optional uint32 chengchi = 2;
	optional uint32 killCount = 3;
	repeated JiesuanPlayerInfo info = 4;
	optional uint32 camp = 5;
}

message CwJiesuanPanelRes {
	repeated JiesuanCampInfo info = 1;
	optional JiesuanPlayerInfo self = 2;
	optional uint32 winCamp = 3;
}

message CwHonorHallReq {
	required uint32 caNum	= 1;	//届数
}
message CwHonorHallRes {
	message CityInfo {
		optional uint32 cityId = 1;
		optional uint32 camp = 2;
	}
	optional uint32 caNum						= 1;	//届数
	optional CwHonorPlayerInfo infos 			= 2;	//玩家信息
	optional uint32 startStamp					= 3;	//开始时间
	optional uint32 latestCaNum					= 4;	//最新届数
	repeated CityInfo city = 5;	
}
message CwHonorPlayerInfo {
	required PlayerBaseInfo baseInfo 	= 1;	//基础信息
	optional uint32 		rank		= 2;	//排名
	optional uint32         camp        = 3;
	optional string			legionName  = 4;
}

message CwGetDailyCityInfoRes {
	optional bool isGet = 1;
	optional uint32 highestCityCount = 2;
}

message CwGetDailyCityRewardRes {
	repeated Reward reward = 1;
}

//[NULL]
message ITCrossEventNotify {
	optional uint32 id = 1;
	repeated Para params = 2;
}

message CwTaskFightReq {
	optional uint32 taskId = 1;
}

message CwTaskFightRes {
	optional uint32 taskId = 1;
	optional string reportId = 2;
		// for 简易战报
	optional uint32 result = 3;
	optional BgFightInfo attacker = 4;
	optional BgFightInfo target = 5;
}

message CrossSimpleItem {
	optional uint32 itemId = 1;
	optional uint32 count = 2;
}

message CwGetJtProductsRes {
	repeated CrossSimpleItem jtItem = 1;
}

message CwJtProductsNotify {
	repeated CrossSimpleItem jtItem = 2;
}

message CwChangeToInstReq {
	optional uint32 instId = 1;
	optional uint32 x = 2;
	optional uint32 y = 3;
}

message CwAtkNotify {
	optional uint32 kind = 1;
	optional uint32 selfX = 2;
	optional uint32 selfY = 3;
	optional uint32 targetX = 4;
	optional uint32 targetY = 5;
	optional uint32 killCount = 6;
}

message CwInstDeadNotify {
	optional uint32 kind = 1;
	optional uint32 x = 2;
	optional uint32 y = 3;
}

message CwGetMsmqTaskInfoRes {
	optional uint32 nextTm = 1;
	optional uint32 count = 2;
}

message CwZhaojiNotify {
	optional uint32 cityId = 1;
	optional PlayerBaseInfo info = 2;
	optional uint32 position = 3;   // 2 元帅 1 将军
}

message CwApplyZhaojiReq {
	optional uint64 id = 1;
}

message CwRobotNotify {
	repeated uint32 cityId = 1;
}

message CwShengenNotify {
	repeated uint32 cityId = 1;	
}

message CwMarshalNotify {
	message MarshalInfo {
		optional uint64 id = 1;
		optional uint64 legionId = 2;
		optional uint32 camp = 3;
	}
	repeated MarshalInfo info = 1;
}

message CwEventLogNotify {
	repeated uint32 robotAtkCitys = 1;
	repeated uint32 robotNextAtkCitys = 2;
	optional uint32 robotNextAtkTm = 3;
}


//========= 拍卖行  auction ==========

enum AUCTION {
	BUY_SUC = 1;
	SELL_SUC = 2;
	BUY_FAIL = 3;
	SELL_FAIL = 4;
	UNSELL = 5;
	BUY_ERR = 6;
} 

message GetAuctionListReq {
	optional uint32 kind = 1;
}

message AuctionItem {
	message Item {
		optional uint32 id = 1;
		optional uint32 count = 2;
	}
	optional uint64 id = 1;
	optional uint64 playerId = 2;
	optional string name = 3;
	optional uint32 dist = 4;
	optional string opName = 5;
	optional string distName = 6;
	optional uint32 endTm = 7;
	optional uint32 originPrice = 8;
	optional uint32 curPrice = 9;
	optional BaoWu baowu = 10;
	optional Item item = 11;
	optional uint32 myPrice = 12;
	optional bool myIsAutoBuy = 13;
	optional uint32 myCurPrice = 14;
	optional uint32 oncePrice = 15;
}

message GetAuctionListRes {
	repeated AuctionItem items = 1;
}

message AuctionSellItemReq {
	required uint32 tmKind = 1; // 1 开始表示 define字段表示的拍卖时间档位
	required uint32 sellKind = 2; // 1 宝物  2 道具
	required uint32 price = 3;
	optional uint64 id = 4;
	optional uint32 count = 5;
	optional uint32 oncePrice = 6;
}

message AuctionSellItemRes {
	optional AuctionItem item = 1;
}

message AuctionUnsellItemReq {
	required uint64 id = 1;
}

message AuctionUnsellItemRes {
	required uint64 id = 1;
	optional uint64 bwid = 2;
}

message AuctionBuyItemReq {
	required uint64 id = 1;
	required bool isAutoBuy = 2;
	required uint32 priceSetting = 3;
}

message AuctionBuyItemRes {
	optional AuctionItem item = 1;
	optional bool isOncePriceSuc = 2;
}

message AuctionMyListStatNotify {
	optional uint32 kind = 1; // 1 我的买单  2 我的卖单
}

message AuctionMyOrderRes {
	repeated AuctionItem items = 1;
}

message AuctionMySellsRes {
	repeated AuctionItem items = 2;
}

message AuctionSetAutoBidReq {
	required uint64 auctionId = 1;
	required uint32 price = 2;
}

message BaoWuStatNotify {
	optional uint64 id = 1;
	optional uint32 status = 2;
}

// ============== IT拍卖行 =============

//[NULL]
message ITAuctionSetAutoBidReq {
	required uint64 playerId = 1;
	required uint64 auctionId = 2;
	required uint32 price = 3;
}

//[NULL]
message ITAuctionSetAutoBidRes {
	required uint64 playerId = 1;
	optional uint32 price = 2;
}

//[NULL]
message ITAuctionSellReq {
	message Item {
		required uint32 itemid = 1;
		required uint32 count = 2;
	}
	required uint64 playerId = 1;
	optional BaoWu baowu = 2;
	optional string baowuData = 3;
	optional Item item = 4;
	optional uint32 endtm = 5;
	optional uint32 price = 6;
	optional uint32 oncePrice = 7;
}
//[NULL]
message ITAuctionSellRes {
	required bool ret = 1;
	optional uint64 playerId = 2;
	optional uint32 price = 3;
	optional uint64 baowuId = 4;
	optional uint32 itemId = 5;
	optional uint32 count = 6;
	optional AuctionItem item = 7;
}
//[NULL]
message ITAuctionUnsellReq {
	required uint64 playerId = 1;
	required uint64 auctionId = 2;
}
//[NULL]
message ITAuctionUnsellRes {
	required bool ret = 1;
	optional uint64 playerId = 2;
	optional uint32 price = 3;
}
//[NULL]
message ITAuctionBuyItemReq {
	required uint64 playerId = 1;
	required uint64 auctionId = 2;
	required bool isAutoBuy = 3;
	required uint32 price = 4;
	optional uint32 lv = 5;
	optional uint32 vip = 6;
}
//[NULL]
message ITAuctionBuyItemRes {
	required uint32 ret = 1;  		// 0 成功 1 拍卖没开放 2 没有该物品 3 价格错误 4 重复竞价 5 自己出售商品不可购买
	optional uint64 playerId = 2;
	optional uint32 price = 3;
}
//[NULL]
message ITAuctionGetItemNotify {
	message Item {
		optional uint32 itemid = 1;
		optional uint32 count = 2;
	}
	required uint64 playerId = 1;
	optional uint32 diamond = 2;
	optional BaoWu baowu = 3;
	optional string baowuData = 4;
	optional Item item = 5;
	required uint32 status = 6;
	optional uint32 taxDiamond = 7;
	optional string bidedBuyer = 8;
	optional uint64 auctionId = 9;
}

//[NULL]
message ITAuctionMailRemindNotify {
	optional uint64 playerId = 1;
	optional uint32 itemId = 2;
}

//[NULL]
message ITAuctionLiupaiReq {
	optional uint32 dist = 1;
	optional uint64 playerId = 2;
	optional uint64 auctionId = 3;
}
//[NULL]
message ITAuctionRobotReq {
	optional bool open = 1;
}
//[NULL]
message ITAuctionStatReq {
	optional bool open = 1;
}
//[NULL]
message ITAuctionRobotNotify {
	optional uint32 kind = 1; // 1 宝物 2 物品
	optional uint32 count = 2;
}

//[NULL]
message ITAuctionBidReq {
	optional uint64 bidPlayer = 1;
	optional uint64 bidBw = 2;
	optional uint64 unbidPlayer = 3;
	optional uint64 unbidBw = 4;
}

//================腾讯接口=====================

//QQ_ADDGOODS
message QqAddgoodsReq{
	required uint32 id = 1;
}
message QqAddgoodsRes{
	required string token = 1;
	required string url_params = 2;
}
//QQ Get token
message QqGetTokenReq{
	required uint32 token = 1;
}
message QqGetTokenRes{
	required string token = 1;
	required string mid = 2;
}
//新手
message QqNewGiftReq{
	required uint32 kind = 1;
}
//每日礼包
message QqDayNormalGiftReq{
	required uint32 kind = 1;
}

message QqDayHighGiftReq{
	required uint32 kind = 1;
}
//升级礼包
message QqLevelGiftReq{
	required uint32 kind = 1;
	required uint32 level = 2;
}
message QqLoginGiftReq{
	required uint32 kind = 1;
	required uint32 day = 2;
}


message QqGiftInfoRes{
	required bool blueNewVip 	= 1;
	optional bool yellowNewVip 	= 2;
	optional bool blueDayVip 	= 3;
	optional bool yellowDayVip 	= 4;
	optional bool blueHighVip 	= 5;
	optional bool yellowHighVip = 6;
	repeated BoolMap blueLevelVip = 7;
	repeated BoolMap yellowLevelVip = 8;
	optional bool dayGift 		= 9;
	optional bool newGift 		= 10;
	repeated BoolMap levelGift 	= 11;
	repeated BoolMap loginGift 	= 12;
	optional uint32 loginCount 	= 13;
	optional bool cmgrDay 		= 14; //安全管家每日礼包领奖状态
	optional bool cmgrNew 		= 15; //安全管家新手礼包领奖状态
	optional bool isCmgr		= 16; //安全管家是否登录
	optional bool isHuaYang 	= 17;
	optional bool huayangNew	= 18;
	optional bool tgpWeekGift   = 19; //tgp平台每周礼包
}
message BoolMap{
	required uint32 key = 1;
	required bool value = 2;
}

//微端奖励
message WeiDuanGetRewardReq{
	required uint32 kind=1;
	required uint32 platId=2;
	optional uint32 qqtype=3;
}
message WeiDuanGetRewardRes{
}

message WeiDuanRewardInfo{
	message EachReward{
		required uint32 kind=1;
		required bool have=2;
		optional uint32 qqtype=3;
	}
	repeated EachReward rewardInfo=1;// QQ 微端(1、代表微端登陆2、代表设置微端开机自启动3、代表开机自启动)
}




//==========跨服个人竞技==========
message CrossArenaInfoRes {
	optional uint32 residualTimes 					= 1;	//剩余挑战次数
	optional uint32 layer							= 2;	//所在层
	repeated CrossArenaEnemyInfo enemies			= 3;	//本层敌人
	repeated CrossArenaBoxStatus boxes				= 4;	//宝箱状态
	optional uint32 score							= 5;	//玩家积分
	optional uint32 status							= 6;	//0:未开启 1:海选 2:决赛
	optional uint32 openStamp						= 7;	//开启活动时间戳
	optional uint32 endStamp						= 8;	//活动结束时间戳
	repeated CrossArenaFinalEnemyInfo finalEnemies 	= 9;	//决赛	对手信息	
	optional uint32 finalRank						= 10;	//决赛	个人排名
	optional bool 	nextLayer						= 11;	//海选	是否到下一层
	optional uint32 finishedLayer					= 12;	//海选	完成层数
	optional bool isOpen							= 13;	//海选/决赛 是否开启
	optional uint32 residualCheerTimes				= 14;	//决赛	剩余助威次数
	optional uint32 rewardStamp						= 15;	//决赛	发奖时间
}
message CrossArenaUpdateFinalEnemyRes {
	repeated CrossArenaFinalEnemyInfo finalEnemies = 1;	//决赛对手
}
message CrossArenaEnemyInfo {
	required PlayerBaseInfo baseInfo	= 1;	//基础信息
	optional uint32	leftHp	 			= 2;	//剩余血量
	optional uint32	score	 			= 3;	//战斗可获取积分
	optional uint32 status				= 4;	//敌方状态 0:死亡 1:活着
	optional uint32 coin				= 5;	//战斗可获取货币
}
message CrossArenaFinalEnemyInfo {
	required PlayerBaseInfo baseInfo 			= 1;	//基础信息
	optional uint32 rank 						= 2;	//排名
	repeated CrossArenaCheerInfo cheerInfos 	= 3;	//助威信息
}
message CrossArenaCheerInfo {
	optional uint32 cheerId	= 1;	//助威id
	optional uint32 level	= 2;	//助威等级
	optional uint32 exp		= 3;	//助威经验
}
message CrossArenaBoxStatus {
	required uint32 layer 	= 1;	//层数
	required uint32 status 	= 2;	//状态 0:不可领取 1:可领取 2:已领取
}
message CrossArenaFightReq {
	required uint64 playerId = 1;
	optional uint32 choice	 = 2;	//0: 正常 1: 简易战报
}
message CrossArenaFightRes {
	optional uint32 result		= 1;	//战斗结果
	repeated Reward rewards 	= 2;	//奖励
	optional uint32 score		= 3;	//增加积分
	required string reportId 	= 4;	//战报
	optional uint32 leftHp		= 5;	//剩余血量
	optional uint32 residualTimes = 6;	//剩余挑战次数
	optional uint32 finishedLayer = 7;	//通关层数
	optional uint32 coin 		= 8;	//增加货币
	//for 简易战报
	optional BgFightInfo self	= 9;	
	optional BgFightInfo target	= 10;
}
message CrossArenaChangeEnemyRes {
	repeated CrossArenaEnemyInfo enemies	= 1;	//本层敌人
}
message CrossArenaBoxStatusNotif {
	repeated CrossArenaBoxStatus boxes	= 1;	
}
message CrossArenaRankInfoReq {
	required uint32 page 		= 1;
	required uint32 numEachPage = 2;
	optional uint32 choice		= 3;	//1: 海选排名 2:决赛排名 3:决赛本服排名
}
message CrossArenaRankInfoRes {
	repeated CrossArenaRankInfo infos 	= 1;
	required uint32 rankLen				= 2;
	optional uint32 myScore				= 3;
	optional uint32 myRank				= 4;
	optional uint32 myMassFightTimes	= 5;
	optional uint32 myFinalFightTimes	= 6;
	optional uint32 myWinTimes			= 7;
	optional uint32 myFailTimes			= 8;
}
message CrossArenaRankInfo {
	required PlayerBaseInfo info 	= 1;
	optional uint32 score			= 2;
	required uint32 rank			= 3;
	optional uint32 winTimes		= 4;
	optional uint32 failTimes		= 5;
	optional uint32 massFightTimes	= 6;
}
message CrossArenaSomeDataNotify {
	optional uint32 residualTimes 		= 1;	//海选 剩余挑战次数
	optional uint32 finalResidualTimes 	= 2;	//决赛 剩余挑战次数
	optional uint32 cheerResidualTimes  = 3;	//决赛 剩余助威次数
}
message CrossArenaGetLayerBoxReq {
	required uint32 layer = 1;
}
message CrossArenaCheerReq {
	required uint32 cheerId = 1;
}
message CrossArenaCheerRes {
	repeated CrossArenaCheerInfo cheerInfos = 1;	//助威信息
	required uint32 myCheerExp				= 2;	//个人助威经验
	optional uint32 residualTimes			= 3;	//剩余次数
}
message CrossArenaCheerInfoRes {
	repeated CrossArenaCheerInfo cheerInfos = 1;	//助威信息
	required uint32 myCheerExp				= 2;	//个人助威经验
	optional uint32 residualTimes			= 3;	//剩余次数
}
message CrossArenaHonorHallReq {
	required uint32 caNum	= 1;	//届数
}
message CrossArenaHonorHallRes {
	required uint32 caNum						= 1;	//届数
	repeated CrossArenaHonorPlayerInfo infos 	= 2;	//玩家信息
	optional uint32 startStamp					= 3;	//开始时间
	optional uint32 latestCaNum					= 4;	//最新届数	
}
message CrossArenaHonorPlayerInfo {
	required PlayerBaseInfo baseInfo 	= 1;	//基础信息
	optional uint32 		rank		= 2;	//排名
}
message CrossArenaFinalFightReq {
	required uint64 id 		= 1;
	required uint32 rank 	= 2;
}
message CrossArenaFinalFightRes {
	required string reportId 		= 1;	//任务id
	optional bool	isWin			= 2;	//战斗结果
	optional uint32 rank			= 3;	//排名
	optional uint32 residualTimes 	= 4;	//剩余挑战次数
}
message CrossArenaGetReportReq {
	required uint32 choice = 1;	// 1:海选个人战报 2:决赛个人战报 3:决赛跨服战报
}
message CrossArenaGetReportRes {
	repeated CrossArenaReportInfo infos = 1;	//战报
}
message CrossArenaReportInfo {
	optional string atkName		= 1;	//攻击方	名字
	optional string atkOpName	= 2;	//攻击方	运营商
	optional string atkDistName	= 3;	//攻击方	区名
	optional uint32 atkRank		= 4;	//攻击方 战斗后排名
	optional string defName		= 5;	//防守方	名字
	optional string defOpName	= 6;	//防守方	运营商
	optional string defDistName	= 7;	//防守方 区名
	optional uint32 defRank		= 8;	//防守方 战斗后排名
	optional bool	isAtkWin	= 9;	//true: 攻击方胜利 false: 防守方胜利
	optional bool	isRankChange = 10;	//排名是否变换	
	optional string reportId	= 11;	//战报id
	optional uint64 atkId		= 12;	//进攻方 id
	optional uint64 defId		= 13;	//防守方 id
	optional uint32 stamp		= 14;	//战报时间戳
	optional uint32 addScore	= 15;	//获得积分
	optional uint32 atkDist 	= 16;	//进攻方 Dist
	optional uint32 defDist 	= 17;	//防守方 Dist
}
message CrossArenaDistCheerReq {
	required uint32 dist	= 1;	//区
}
message CrossArenaDistCheerRes {
	repeated CrossArenaCheerInfo cheerInfos = 2;
}

//[NULL]
message ITCrossArenaFinalFightRankNotify {
	required PlayerBaseInfo attacker = 1;	//攻击者
	required PlayerBaseInfo defender = 2;	//防御者
	optional uint32 newRank			 = 3;	//排名
}

//[NULL]
message ITCrossArenaMassLayerNotify {
	required PlayerBaseInfo player = 1;	//攻击者
}

//[NULL]
message ITCrossArenaCheerReq {
	required uint32 cheerId 	= 1;
	required uint32 startStamp	= 2;
	required uint64 playerId	= 3;
}

//[NULL]
message ITCrossArenaFightReq {
	required uint64 playerId		= 1;
	required uint64 enemyId			= 2;
	repeated BattlePlayer self		= 3;
	optional uint32 choice			= 4;
}
//[NULL]
message ITCrossArenaFinalFightReq {
	required uint64 playerId		= 1;
	required uint64 enemyId			= 2;
	required uint32 enemyRank		= 3;
	repeated BattlePlayer self		= 4;
}
//[NULL]
message ITCrossArenaFinalFightRes {
	required uint64 playerId	= 1;	//攻击者id
	optional string defName		= 2;	//被攻击者	名字
	optional string	defDistName	= 3;	//被攻击者	区名
	optional string defOpName	= 4;	//被攻击者 	运营商名
	optional bool isWin			= 5;	//是否胜利
	optional bool isRankChange	= 6;	//排名是否改变
	optional uint32	rank		= 7;	//战斗后排名
	optional string reportId	= 8;	//战报id
	optional uint32 finalFightTimes = 9;	//战斗次数
	optional uint64 btlId		= 10;	//战斗id
	optional uint64 defId		= 11;	//被攻击者	id
	optional uint32 defDist 	= 12;	//被攻击者	区
}
//[NULL]
message ITCrossArenaFinalFightNotify {
	required uint64 playerId	= 1;	//玩家id
	optional string atkName		= 2;	//攻击者	名字
	optional string atkDistName	= 3;	//攻击者	区名
	optional string atkOpName	= 4;	//攻击者 运营商名
	optional bool	isWin		= 5;	//是否胜利
	optional bool	isRankChange = 6;	//排名是否变化
	optional uint32	rank		= 7;	//战斗后排名
	optional string reportId	= 8;	//战报id
	optional uint64 btlId		= 9;	//战斗id
	optional uint64 atkId		= 10;	//攻击者	id
	optional uint32 atkDist		= 11;	//攻击者	区
}
//[NULL]
message ITCrossArenaFinalFightBpReq {
	required uint64 btlId		= 1;
	required uint64 enemyId		= 2;
}
//[NULL]
message ITCrossArenaFinalFightBpRes {
	required uint64 btlId			= 1;
	repeated BattlePlayer target 	= 2;
}
//[NULL]
message ITCrossArenaFightRes {
	required uint64 playerId		= 1;
	optional string enemyDistName	= 2;
	optional string enemyName		= 3;
	optional string enemyOpName		= 4;
	optional bool	isWin			= 5;
	required uint32 result 			= 6;
	required string reportId 		= 7;
	required uint32 score			= 8;
	required uint32 leftHp			= 9;
	optional uint32 finishedLayer 	= 10;
	optional uint32 addCoin			= 11;
	optional uint32 massFightTimes 	= 12;
	optional uint64 btlId			= 13;
	optional uint32 addScore		= 14;
	optional uint64 enemyId			= 15;
	optional uint32 enemyDist 		= 16;
	optional BgFightInfo self		= 17;
	optional BgFightInfo target		= 18;
}
//[NULL]
message ITCrossArenaBattlePlayerReq {
	required uint64 enemyId		= 1;
	required uint64 attackerId 	= 2;
}
//[NULL]
message ITCrossArenaBattlePlayerRes {
	required uint64 enemyId			= 1;
	required uint64 attackerId		= 2;
	repeated BattlePlayer player 	= 3;
}
//[NULL]
message ITCrossArenaBattlePlayerLoadFailedNotify {
	required uint64 enemyId		= 1;
	required uint64 attackerId 	= 2;
}
//[NULL]
message ITCrossArenaFinalBattlePlayerLoadFailedNotify {
	required uint64 btlId	= 1;
}
//[NULL]
message ITCrossArenaAvaiPlayerInfoNotify {
	repeated ITCrossArenaAvaiPlayerInfo infos = 1;
}
//[NULL]
message ITCrossArenaAvaiPlayerInfo {
	required PlayerBaseInfo baseInfo 	= 1;
	required uint32 score				= 2;
	optional uint32 massFightTimes		= 3;
	optional uint32 finalFightTimes		= 4;
}

message ActiveTitleReq{
	required uint32 id=1;
}

message ActiveTitleRes{
	repeated TitleContentInfo title=1;
}
message TitleContentInfo{
	required uint32 id=1;
	required uint64 endTm=2;
	optional uint64 fightProp=3;
}


message TitleChangeNotify{
	required uint64 id=2;
	required uint32 showTitleId=3;
}

message TitlePanelRes{
	repeated TitleContentInfo title=1;
}

message WearTitleReq{
	required uint32 showTitleId=1;
}

message WearTitleRes{
	
}

message FourteenDayNotify{
	
}

message FourteenDayGetRewardReq{
	required uint32 kind 	= 1;
	required uint32 day		= 2;
	optional uint32 id		= 3;
	optional uint32 count	= 4;
}

message FourteenInfoRes{
	repeated FourteenDayLoginInfo loginInfos 	= 1;
	repeated FourteenDayTaskInfo taskInfos		= 2;
	required uint32 day						= 3;
	repeated FourteenDayShopBuyTimesRes shopInfo	= 4;//购买次数
	repeated FourteenDayAvailInfo availInfos=5;
	optional bool clickSuperShop=6;
}

message FourteenDayShopBuyTimesRes{
	optional uint32 buyTime=1;
	optional uint32 id=2;	
}


//////情人节活动
message ValentineSendFlowerReq{ //献花
	required uint32 heroId=1;
	required uint32 num=2;
}

//情人节特惠
message ValentineShopReq{
	required uint32 id=1;
	required uint32 num=2;
}

message ValentineShopInfoRes{
	message Shop{
		required uint32 id=1;
		required uint32 num=2;
	}
	repeated Shop shop=1;
}

//白色情人节特惠
message WhiteValentineShopReq{
	required uint32 id=1;
	required uint32 num=2;
	optional uint32 kind=3;
}

message WhiteValentineShopInfoReq{
	optional uint32 kind=1;
}


message WhiteValentineShopInfoRes{
	message Shop{
		required uint32 id=1;
		required uint32 num=2;
	}
	repeated Shop shop=1;
	optional uint32 kind=2;
}


//元宵特惠
message LanternShopReq{
	required uint32 id=1;
	required uint32 num=2;
}

message LanternShopInfoRes{
	message Shop{
		required uint32 id=1;
		required uint32 num=2;
	}
	repeated Shop shop=1;
}

//母亲节赠送
message MotherDaySendReq{
	required uint32 num=1;
}
//白色情人节活动

message WhiteValentineSendChocolateReq{
	required uint64 id=1;
	required uint32 num=2;
	optional uint32 kind=3;//不传值视作白色情人节，传1 视作鲜花节
}
message WhiteValentineStunnerReq{
	optional uint32 kind=1;
}
message WhiteValentineStunnerRes{
	message StunnerInfo{
		required PlayerBaseInfo info=1;
		required uint32 popularity=2;
	}
	repeated StunnerInfo info=1;
	optional uint32 kind=2;//传1 视作鲜花节
}
message WhiteValentineReceiveMessageReq{
	optional uint32 kind=1;
}
message WhiteValentineReceiveMessageRes{
	message ReceiveInfo{
		required uint64 id=1;
		required uint64 stamp=2;
		required uint32 num=3;
	}
	repeated ReceiveInfo receive=1;
	optional uint32 kind=2;
}


//女神节活动
message GoddessVotePanelRes{
	message GoddessTicket{
		required uint32 id=1;
		required uint32 tickets=2;
	}
	repeated GoddessTicket tickets=1;
	required uint32 myTickets=2;
	required uint32 myScore=3; 
}

message GoddessVoteReq{
	required uint32 goddessId=1;
	required uint32 ticketNum=2;
}

message GoddessVoteRes{
	required uint32 goddessId=1;
	required uint32 ticketNum=2;
	required uint32 myScore=3;
}

message GoddessScorePanelRes{
	repeated uint32 scoreId=1;
	required uint32 myScore=2;
}

message GoddessGetScoreRewardReq{
	required uint32 id=1;
}

message GoddessShowPanelRes{
	required uint32 goddessId=1;
}

//春节活动 

//打开春节登陆面板
message SpringLoginInfoRes{
	repeated bool loginInfos=1;
}


//打开春节登陆面板
message SpringWelcomeGodInfoRes{
	required uint32 wishValue=1;
}
//消耗幸运值领取奖励
message SpringGetGodRewardRes{
	required uint32 wishValue=1;	
}
//全民福利面板
message SpringWelfareInfoRes{
	message GetRewadInfo{
		required uint32 id=1;
		required bool get =2;
	}
	repeated GetRewadInfo getRew=1;
	required uint32 total=2;
}
//放鞭炮
message SpringFireCrackerReq{
	required uint32 num=1;
}

message SpringFireCrackerRes{
	required uint32 wishValue=1;
}
//领取全民福利请求
message SpringGetWelfareRewardReq{
	required uint32 id=1;
}
//领取登陆奖励
message SpringLoginReq{
	required uint32 day=1;
}
//攻打年兽
message SpringFightBossStartRes{
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message SpringFightBossEndReq{
	required uint32 id =1;
	required uint32 play_mode = 2; 		// 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
	
}

message SpringFightBossEndRes{
	required uint32 star  = 1;// 战斗星数
	required uint32 result = 2;
	repeated Reward reward=3;
}


message SpringBeatBossLastRankRes{//昨日排行界面
	required uint32 myLastRank=1;
	optional bool haveGetReward=2; 
}

message SpringGetBeatBossRankRewardRes{
	repeated Reward reward =1;
}

message SpringBeatBossRankListRes{//实时排行界面 
	message Rank{
		optional uint64 uid = 1;
		optional string name = 2;
		optional uint32 rank = 3;
		optional uint32 level = 4;
		optional uint64 ability = 5;
		optional string familyName = 6;
		optional uint32 stcNpcId = 7;
		optional uint32 huizhang=8;
		optional uint32 damage =9;
	}
	repeated Rank rankList=1;
	required uint32 myRank=2;
}



message SpringBeatBossNumRes{//攻打年兽的次数
	required uint32 num=1;
}
//  ======= 节日额外掉落==========

message ActivityDropStaticInfo {
	message DropInfo {
		optional uint32 dropId = 1;
		optional uint32 starttm = 2;
		optional uint32 endtm = 3;
	}
	optional uint32 moduleId = 1;
	repeated DropInfo info = 2;
}

message ActivityDropStaticNotify {
	repeated ActivityDropStaticInfo info = 1;
}

message PlayerPvpReq {
	optional uint64 playerId = 1;
}

message PlayerPvpRes {
	repeated BattlePlayer self = 1;
	repeated BattlePlayer target = 2;
	repeated uint32 seeds = 3;
}

//qq好友邀请
message QqDayInviteInfoRes {
	optional uint32 group 		= 1; //群邀请 0未完成 1可领 2 已领
	optional uint32 friend 		= 2; //好友邀请 0未完成 1可领 2 已领
	optional uint32 multi 		= 3; //多次邀请次数
	optional uint32 multiReward = 4; //多次邀请领奖次数
	optional uint32 invite 		= 5; //邀请成功次数
	optional uint32 inviteReward = 6; //邀请成功领奖次数
	optional uint32 level 		= 7; //好友等级数量
	optional uint32 levelReward = 8; //好友等级领奖次数
}
//发送邀请成功后 后端记录  
message QqDayInviteSuccessReq{
	required uint32 friend = 1;
	optional uint32 group = 2;	
}
//领奖 1 群单次 2 好友单次  3 好友多次 4 好友进入 5 好友等级
message QqDayInviteRewardReq {
	required uint32 kind = 1;
}
message QqDayInviteRewardRes {
	optional uint32 kind = 1;
	optional uint32 count = 2;
}

//qq征战新服
message QqRegisterNewServerReq{
	required uint32 id = 1;
}


/////////////////////////////
//QQ 登录需要的登录信息
message QQLoginExtra{
	required string pf = 1;
	required string pfkey = 2;
	required string platform = 3;
	required string openkey = 4;
	optional string invited = 5; //邀请这个玩家的人
	optional string opsid = 6; 
}
/////////////////////////////

//==========跨服远征==========
message FamilyExpeInfoRes {
	required uint32 status 					= 1;	//0:未开启 1:等待会长开启 2:正在进行中 3:公会未入选
	optional uint32 openStamp 				= 2;
	optional uint32 residualTimes			= 3;
	optional FamilyExpeFamilyInfo self		= 4;
	optional FamilyExpeFamilyInfo target 	= 5;
	repeated FamilyExpeEnemyInfo enemyInfos = 6;
	optional bool	isOpen					= 7;
	optional uint32 result 					= 8;	//0: 没在进行 1、输了 2: 赢了 3:正在进行中
	optional uint32 NextFightStamp          = 9;	//正在进行中，则发当日截止时间戳，已经成功或者失败，则发冷却时间结束的时间戳
	optional FamilyExpeTaskNotify task      = 10;
	optional uint32 rewardStamp =11;//发奖开始时间
}

message FamilyExpeTaskNotify{
	optional uint32 taskId                  = 1;	//任务Id
	optional uint32 taskState               = 2;	//任务状态,0:未领取；1：未完成；2：完成 3:失败
	optional uint32 taskFinishNum 			= 3;	//任务完成个数
	optional uint32 taskToalNum             = 4;    //任务总要求
	optional uint32 endStamp               = 5;		//该任务结束时间戳
}

message FamilyExpeLastChampionRes{
	optional uint32 distId=1;//冠军公会id
	optional string opName=2;//冠军公会运营商名称
	optional string familyName=3;//冠军公会公会名
	optional string distName=4;//冠军公会区名称
	optional uint32 myRank=5;//个人排名
	optional uint32 myFamilyRank=6;//我的公会排名
	optional uint32 reputations=7;//我的公会声望
	optional uint32 winTimes=8;//我的公会胜场
	optional uint32 myCon=9;//我的贡献
	optional uint32 myRankInFamily=10;//公会内排名
}

message FamilyExpeFamilyInfo {
	required uint64 familyId		= 1;	//公会id
	optional string familyName		= 2;	//公会名
	optional uint32 familyDist		= 3;	//公会dist
	optional string familyOpName 	= 4;	//公会运营商名
	optional uint32 avaiNum			= 5;	//可用玩家人数
	optional uint32 totalNum		= 6;	//玩家总人数
	optional int32 reputation		= 7;	//声望
	optional uint64 ability			= 8;	//战力
	optional int32 winReputation	= 9;	//胜利声望
	optional int32 failReputation	= 10;	//失败声望
	repeated uint64 avaiUids		= 11;	//玩家ids
	optional uint32 residualTimes	= 12;	//剩余挑战次数
	optional uint32 rank			= 13;	//名次
	optional uint32 flagBase		= 14;
	optional uint32 flagIcon		= 15;
	optional uint32 familyLv		= 16;
	optional uint32 strength		= 17;	//1: 强 2: 相当 3: 弱
	optional uint32 winTimes		= 18;	//胜利次数
	repeated ITFamilyExpeBattlePlayers bps		= 19;	//所有防守玩家的战力数据
	optional PlayerBaseInfo leader  = 20;
	optional string distName =21;//公会所在区名称
}

//[NULL]
message ITFamilyExpeBattlePlayers{
	optional PlayerBaseInfo player=1;
	repeated BattlePlayer bps =2;
}

message FamilyExpeEnemyInfo {
	required PlayerBaseInfo baseInfo 	= 1;
	optional uint32 hpPercent 			= 2;
	optional uint32 con					= 3;	//贡献
	optional uint32 coin				= 4;	//纹章
	optional uint32 fightCount			= 5;	//攻打次数
	optional string firstKillerName		= 6;
}
message FamilyExpeStartReq {
	required uint64 familyId = 1;	//攻打的公会id
}
message FamilyExpeStartNotify {
	optional FamilyExpeTaskNotify task=1;
	
}
message FamilyExpeChallengeInfoReq{
	optional bool refresh=1;
}
message FamilyExpeChallengeInfoRes {
	optional FamilyExpeFamilyInfo selfFamily 	= 1;
	repeated FamilyExpeFamilyInfo enemyFamilies = 2;
}
message FamilyExpeFightReq {
	required uint64 enemyId	= 1;
	optional uint32 kind = 2; // 1 简易战报	
}

message FamilyExpeFightRes {
	required uint32 btlResult	= 1;
	optional uint32 con			= 2;
	optional uint32 coin		= 3;
	required string reportId	= 4;
	optional uint32 hpPercent =5;
	//for简易战报
	optional BgFightInfo attacker = 6;
	optional BgFightInfo target = 7;
}
message FamilyExpeFightStartReq {
	required uint64 enemyId	= 1;
}
message FamilyExpeFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer bps = 2;
}
message FamilyExpeFightEndReq {
	optional bool isEscaped 	= 1;
	optional uint32 play_mode 	= 2;
	repeated SkillTimePoint stp = 3;
}
message FamilyExpeFightEndRes {
	required uint32 btlResult	= 1;
	optional uint32 con			= 2;
	optional uint32 coin		= 3;	
}

message FamilyExpeEndNotify {
	optional uint32 state=1;//0：输；1：胜
}
message FamilyExpeGetConRankReq {
	required uint32 page		= 1;
	required uint32 pageSize	= 2;
	optional uint32 choice		= 3;
}
message FamilyExpeGetConRankRes {
	optional uint32 rankLen					 = 1;
	repeated FamilyExpeConRankInfo rankInfos = 2;
	optional uint32 myCon=3;
	optional uint32 myRank=4;
}
message FamilyExpeConRankInfo {
	required PlayerBaseInfo baseInfo	= 1;
	optional uint32 con					= 2;
	optional uint32 fightTimes			= 3;
	optional uint32 winTimes			= 4;
	optional uint32 rank				= 5;
	optional uint32 post				= 6;
	optional uint32 highPost			= 7;
	optional string familyName			= 8;
	optional uint32 familyRank			= 9;
}
//[NULL]
message ITFamilyExpeFightReq {
	required uint64 playerId	= 1;
	required uint64 enemyId		= 2;
	required uint64 familyId	= 3;
	repeated BattlePlayer bps	= 4;
	optional uint32 killCount	= 5;
	optional uint32 con         = 6;
	optional bool IsFighter     = 7;
	optional bool simpleBtl =8;
}
//[NULL]
message ITFamilyExpeFightRes {
	required uint64 playerId	= 1;
	required uint32 btlResult	= 2;
	optional uint32 expeCon		= 3;
	optional uint32 coin		= 4;
	optional string reportId	= 5;
	optional string enemyName	= 6;
	optional string enemyOpName = 7;
	optional uint32 enemyDist	= 8;
	optional uint32 damage		= 9;
	optional uint64 enermyId	= 10;	
	optional uint64 btlId	= 11;
	optional bool firstKill =12;
	optional uint64 enermyAbility=13;
	optional uint32 enermyTotalNum=14;
	optional bool oneDead =15;
	optional uint32 familyStatus=16;
	//for简易战报
	optional BgFightInfo attacker = 17;
	optional BgFightInfo target = 18;
	optional bool simpleBtl =19;
}
//[NULL]
message ITFamilyExpeFightStartReq {
	required uint64 playerId	= 1;
	required uint64 enemyId		= 2;
	required uint64 familyId	= 3;
	repeated BattlePlayer bps	= 4;
	optional uint32 killCount	= 5;
}
//[NULL]
message ITFamilyExpeFightStartRes {
	required uint64 playerId	= 1;
	required uint64 familyId	= 2;
	required uint64 btlId		= 3;
	repeated uint32 random		= 4;
	repeated BattlePlayer bps	= 5;
}
//[NULL]
message ITFamilyExpeFightEndReq {
	required uint64 familyId	= 1;
	required uint64 playerId	= 2;
	optional bool	isEscaped	= 3;
	optional uint32 play_mode	= 4;
	repeated SkillTimePoint stp = 5;
	required uint64 btlId		= 6;
}
//[NULL]
message ITFamilyExpeFightEndRes {
	required uint64 playerId	= 1;
	required uint32 btlResult	= 2;
	optional uint32 expeCon		= 3;
	optional uint32 coin		= 4;
}

//[NULL]
message ITFamilyExpeAvaiFamilyInfoNotify {
	repeated FamilyExpeFamilyInfo infos = 1;
}
//[NULL]
message ITFamilyExpeChallengeInfoReq {
	required FamilyExpeFamilyInfo selfFamily = 1;
	required uint64 playerId				 = 2;
	optional bool inCd=3;
	optional bool refresh =4;
	optional bool canAtk=5;
}
//[NULL]
message ITFamilyExpeGetEnemyReq {
	required uint64 atkFamilyId = 1;	//进攻方公会id
	required uint64 defFamilyId = 2;	//防守方公会id
	repeated uint64 defUids		= 3;	//防守方玩家ids	
}
//[NULL]
message ITFamilyExpeGetEnemyRes {
	required uint64 atkFamilyId = 1;		//进攻方公会id
	required uint64 defFamilyId = 2;		//防守方公会id
	repeated ITFamilyExpeDefPlayerInfo defInfos = 3;	//防守方玩家信息
}
//[NULL]
message ITFamilyExpeDefPlayerInfo {
	required PlayerBaseInfo baseInfo = 1;
	repeated BattlePlayer bps		 = 2;
}
//[NULL]
message ITFamilyExpeInfoReq {
	optional PlayerBaseInfo baseInfo=1;
	required uint64 familyId	= 2;
	optional uint32 avaiNum		= 3;
	optional uint32 totalNum	= 4;
	optional uint32 residualTimes = 5;//个人挑战次数
	repeated ITFamilyExpeKillRecord killRecords = 6;
	optional uint32 cdStamp     = 7;
	optional uint32 familyResidualTimes=8;
	optional uint64 ability 	 = 9;//公会可参战总战力
	optional FamilyExpeTaskNotify task =10;	
	optional uint32 familyLv		= 11;
	optional uint32 flagBase		= 12;
	optional uint32 flagIcon		= 13;
	optional PlayerBaseInfo leader  = 14;
	optional uint32 myCon=15;//个人总贡献
}
//[NULL]
message ITFamilyExpeKillRecord {
	optional uint64 id		= 1;
	optional uint32 count 	= 2;
}
//跨服远征排行
message FamilyExpeCrossRankReq{
	required uint32 page=1; 
}
//[NULL]
message ITFamilyExpeChampionFamilyInfo{
	repeated PlayerBaseInfo players=1;
	optional PlayerBaseInfo leader=2;
	optional uint32 distId=3;
	optional string distName=4;
	optional string opName=5;
	optional string familyName=6;
}


message FamilyExpeCrossRankRes{
	repeated FamilyExpeCrossRankInfo info=1;
	optional uint32 totalNum=2;
}
message FamilyExpeCrossRankInfo{
	optional uint32 rank =1;
	optional string familyName=2;
	optional uint32 familyDist=3;
	optional uint64 familyAbility=4;
	optional uint32 winTimes=5;
	optional uint32 reputation=6;
	optional PlayerBaseInfo leader=7;
	optional string distName=8;
	optional string opName=9;
}
message FamilyExpeSingleRankReq{
	required uint32 page=1;
}

message FamilyExpeSingleRankRes{
	repeated FamilyExpeSingleRankInfo info=1;
	optional uint32 totalNum=2;
}

message FamilyExpeSingleRankInfo{
	optional uint32 rank=1;
	optional uint32 con=2;
	optional uint32 familyRank=3;
	optional PlayerBaseInfo info=4;
}
message FamilyExpeFamilyPlayerRankReq{
	required uint32 page=1;
}
message FamilyExpeFamilyPlayerRankRes{
	repeated FamilyExpeFamilyPlayerRankInfo info=1;
	optional uint32 totalNum=2;
}

message FamilyExpeFamilyPlayerRankInfo{
	optional uint32 rank=1;
	optional uint32 post=2;
	optional uint32 con=3;
	optional uint32 winTimes=4;
	optional uint32 challengeNum=5;
	optional PlayerBaseInfo info=6;
	optional uint32 highPost=7;
}
message FamilyExpeBattleInfoRes{
	repeated FamilyExpeBattleResult result=1;
}
message FamilyExpeBattleResult{
	optional string distName=1;
	optional string opName=2;
	optional uint32 lv=3;
	optional bool result=4;
	optional uint32 con =5;
	optional uint32 flagIcon=6;
	optional string familyName=7;
	optional uint32 flagBase=8;
	optional uint32 distId=9;
	optional uint32 stamp=10;
	
}
message FamilyExpeChampionThroneReq {
	required uint32 caNum	= 1;	//届数
}
message FamilyExpeChampionThroneRes{
	required uint32 caNum						= 1;	//届数
	repeated PlayerBaseInfo infos 				= 2;	//玩家信息
	optional PlayerBaseInfo leader				= 3;
	optional uint32 startStamp					= 4;	//开始时间
	optional uint32 latestCaNum					= 5;	//最新届数	
}
message FamilyExpeBattleReportRes{
	repeated FamilyExpeBattleReportInfo info=1;	
}
message FamilyExpeBattleReportInfo{
	required string atkName=1;
	optional string defName		= 2;	//防守方	名字
	optional string defOpName	= 3;	//防守方	运营商
	optional uint32 defDistId  =5;
	required uint32 coin=6;
	required uint32 con =7;	
	optional bool	isAtkWin	= 9;	//true: 攻击方胜利 false: 防守方胜利
	optional uint32 stamp=10;
	optional string reportId =11;
	required uint32 damage=12;
}

message FamilyExpeDataNotify {
	optional uint32 singleTimes 		= 1;	//个人公会挑战次数
}

//======= 团购 ========

enum OP_STATIC {
	TUAN_GOU = 1;
	TUAN_GOU_REWARD = 2;
	TUAN_GOU_TM = 3;
	ZHUAN_PAN_ITEM = 4;
	ZHUAN_PAN_COST = 5;
	ZHUAN_PAN_REWARD = 6;
	ZHUAN_PAN_SHOP = 7;
	ZHUAN_PAN_TIME = 8;
	LUCK_TREE_LEVEL = 9;
	LUCK_TREE_REWARD = 10;
	LUCK_TREE_WORLD_REWARD = 11;
	LUCK_TREE_SCORE = 12;
	LUCK_TREE_SHOP = 13;
	LUCK_TREE_TIME = 14;
	MINE_SWEEP_REWARD_ITEM = 15;
	MINE_SWEEP_RANK_REWARD = 16;
	MINE_SWEEP_PRICE = 17;
	MINE_SWEEP_OPEN = 18;
	FUND = 19;
	MINE_SWEEP_SHOP = 20;
	ZILLI = 21;
	DRAGON_BOAT_OPEN = 22;
	DRAGON_BOAT_PRICE = 23;
	DRAGON_BOAT_GET_MATERIAL = 24;
	DRAGON_BOAT_RANK_REWARD = 25;
	DRAGON_BOAT_SHOP = 26;	
	DRAGON_BOAT_MAKE = 27;
	GM_SHOP = 28;
	TOWER = 29;
	ZHUANPAN_CROSS = 30;
	BEJEWELED = 31;
	POKER = 32;
	KEYSHOP = 33;
	ROBBUY = 34;
	SHOPCAR = 35;
	SPECIFY_PUT = 36;
	MINE_SWEEP_BLESS = 37;
	ANIVERSARY = 38;
	ZHENYING = 39;
	RICHMAN_TIME			= 117;	//
	RICHMAN_CONFIG			= 118;	//
	RICHMAN_REWARD			= 119;	//
	RICHMAN_SCORE			= 120;	//
	RICHMAN_SHOP			= 121;	//
	WORLD_COMP_TM			= 122;
}

message MapKey32Value32 {
	optional uint32 key = 1;
	optional uint32 value = 2;
}
message MapKeyStrValue32 {
	optional string key = 1;
	optional uint32 value = 2;
}
message MapKey32ValueReward{
	required uint32 key = 1;
	repeated Reward value = 2;
}

message StaticTuanGouModel {
	optional uint32 version = 1;
	optional uint32 id = 2;
	optional string name = 3;
	optional string sell_res = 4;
	optional string cost_res = 5;
	optional string discount_rule = 6;
	optional uint32 reset_kind = 7;
	optional uint32 pos = 8;
	optional float ticket_limit = 9;
	optional uint32 buy_start_tm = 10;
	optional uint32 buy_end_tm = 11;
	optional uint32 langid = 12;
	repeated MapKey32Value32 vip = 13;
}

message StaticTuanGouRewardModel {
	optional uint32 version = 1;
	optional uint32 id = 2;
	optional uint32 need_score = 3;
	optional string reward = 4;
}

message StaticOpActivityTmModel {
	optional uint32 id = 1; //玩法类型 对应kind
	optional uint32 version = 2; //版本号
	optional uint32 start_tm = 3;
	optional uint32 end_tm = 4;
	optional uint32 open_tm = 5;
}

message StaticFundModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional string buyStartTm = 3;
	optional string buyEndTm = 4;
	optional string rewardStartTm = 5;
	optional string rewardEndTm = 6;
	optional string fundName = 7;
	optional string fundDesc = 8;
	optional uint32 chargeCondi = 9;
	optional string buyCost = 10;
	optional string rewardDesc = 11;
	optional string reward = 12;
	optional uint32 openTm = 13;
	optional uint32 buyStartTmForClient = 14;
	optional uint32 buyEndTmForClient = 15;
	optional uint32 rewardStartTmForClient = 16;
	optional uint32 rewardEndTmForClient = 17;
	optional uint32 priceDesc = 18;
}

message SundryStaticFund {
	repeated StaticFundModel all = 1;
}

message SundryStaticTuanGou {
	repeated StaticTuanGouModel all = 1;
}

message SundryStaticTuanGouReward {
	repeated StaticTuanGouRewardModel all = 1;
}

message SundryStaticOpActivityTm {
	repeated StaticOpActivityTmModel all = 1;
}

message SundryStaticGmShop{
	repeated StaticGmShopModel all = 1;
}

message GetOpActivityStaticReq {       //拉取团购静态数据
	repeated uint32 kind = 1;		   // kind = 0 时拉取所有
}

message OpActivityStatic {
	repeated uint32 kind = 1;
	repeated StaticTuanGouModel tg = 2;
	repeated StaticTuanGouRewardModel tgr = 3;
	repeated StaticOpActivityTmModel oatm = 4;
	repeated StaticZhuanPanItemModel zpi = 5;
	repeated StaticZhuanPanCostModel zpc = 6;
	repeated StaticZhuanPanRewardModel zpr = 7;
	repeated StaticZhuanPanShopModel zps = 8;
	repeated StaticZhuanPanTimeModel zpt = 9;
	repeated StaticLuckTreeLevelModel ltl = 10;
	repeated StaticLuckTreeRewardModel ltr = 11;
	repeated StaticLuckTreeWorldRewardModel ltwr = 12;
	repeated StaticLuckTreeScoreRewardModel ltsr = 13;
	repeated StaticLuckTreeShopModel lts = 14;
	repeated StaticLuckTreeTimeModel ltt = 15;
	repeated StaticMineSweepRankRewardModel msrr=16;
	repeated StaticMineSweepRewardItemModel msri=17;
	repeated StaticMineSweepOpenModel mso=18;
	repeated StaticMineSweepPriceModel msp=19;
	repeated StaticFundModel fund = 20;
	repeated StaticLuckTreeShopModel mss=21;
	optional StaticZillionaireModel zp = 22;
	repeated StaticDragonBoatMakeModel dbm=23;
	repeated StaticDragonBoatPriceModel dbp=24;
	repeated StaticDragonBoatGetMaterialModel dbgm=25;
	repeated StaticMineSweepRankRewardModel dbrr=26;
	repeated StaticLuckTreeShopModel dbs=27;
	repeated StaticMineSweepOpenModel dbo=28;
	repeated StaticGmShopModel dbSp = 29;
	optional StaticTowerModel tower = 30;
	repeated StaticOpActivity ops = 31;
	repeated StaticMineSweepBlessModel mb = 32;
	repeated StaticRichmanTimeModel rmt = 118;	//资源大亨时间表
	repeated StaticRichmanConfigModel rmc = 119;	//资源大亨配置表
	repeated StaticRichmanRewardModel rmr = 120;	//资源大亨奖励表
	repeated StaticRichmanScoreModel rmf = 121;	//资源大亨积分奖励表
	repeated StaticRichmanShopModel rms = 122;	//资源大亨商店表
}

message StaticGmShopModel{
	message Item{		
		optional uint32 id = 1;
		optional uint32 kind = 2;
		optional uint32 discount = 3;
		optional uint32 reset_kind = 4;
		optional string sell_res = 5;
		optional string cost_res = 6;
		optional string now_res = 7;
		optional uint32 limit = 8;
	}
	optional uint32 end_tm = 1;
	optional uint32 start_tm = 2;
	optional string bg_name = 3;
	repeated Item item = 4;
	optional uint32 kind = 5;
	optional string version = 6;
}

message StaticMineSweepRankRewardModel{
	optional uint32 id=1;
	optional uint32 version=2;
	optional uint32 kind=3;
	optional uint32 rank=4;
	optional string reward=5;
	optional string superReward=6;
	optional uint32 rank2=7;
}
message StaticMineSweepRewardItemModel{
	optional uint32 version=1;
	optional uint32 id=2;
	optional uint32 group=3;
	optional string item=4;
	optional uint32 score=5;
	optional uint32 prop=6;
	
}
message StaticMineSweepOpenModel{
	optional uint32 version=1;
	optional uint32 startStamp=2;
	optional uint32 endStamp=3;
	optional uint32 openDay=4;
	optional uint32 id=5;
}
message StaticMineSweepPriceModel{
	optional uint32 version=1;
	optional uint32 id=2;
	optional string cost=3;
	optional uint32 oneKey=4;
	optional uint32 resetPrice=5;
	optional uint32 score=6;
}
message StaticMineSweepBlessModel {
	optional uint32 version=1;
	optional uint32 id = 2;
	optional uint32 score = 3;
	repeated string res = 4;
}

message StaticDragonBoatMakeModel{
	optional uint32 version=1;
	optional uint32 id=2;
	optional string cookMaterial=3;
	optional uint32 cookScore=4;
	optional uint32 cookNum=5;
}

message StaticDragonBoatPriceModel{
	optional uint32 version=1;
	optional uint32 id=2;
	optional string cost=3;
	optional uint32 donatedLimit=4;//被捐赠上限
	optional uint32 donateScore=5;//捐赠积分
	optional uint32 donateLimit=6;//捐赠上限
}

message StaticDragonBoatGetMaterialModel{
	optional uint32 version=1;
	optional string item=2;
	optional uint32 getTime1=3;
}

message GetOpActivityStaticRes {       //拉取团购静态数据返回
	optional OpActivityStatic oas = 1;
}

message OpActivityStaticNotify {       //团购静态数据改变推送
	optional OpActivityStatic oas = 1;
}

message TuanGouInfo {
	optional uint32 id = 1;
	optional uint32 buyCount = 2;
	optional uint32 totalBuyCount = 3;
}

message TuanGouInfoReq {			  //单条团购信息请求
	optional uint32 id = 1;   // 0 全拉
}

message TuanGouInfoRes {
	repeated TuanGouInfo tg = 1;
}

message TuanGouInfoNotify {           //团购人数通知
	optional uint32 id = 1;
	optional uint32 totalBuyCount = 2;
}

message BuyTuanGouReq {
	optional uint32 id = 1;
	optional uint32 ticketNum = 2;
	optional uint32 count = 3;
}

message TuanGouScoreInfoRes {
	optional uint32 score = 1;
	repeated uint32 receivedScoreId = 2;
}

message GetTuanGouScoreRewardReq {
	optional uint32 id = 1;
}

//==========团购本地化===============

message TuanGouLocalInfoReq {			  //单条团购信息请求
	optional uint32 id = 1;   // 0 全拉
}

message TuanGouLocalInfoRes {
	repeated TuanGouInfo tg = 1;
}

message TuanGouLocalInfoNotify {           //团购人数通知
	optional uint32 id = 1;
	optional uint32 totalBuyCount = 2;
}

message BuyTuanGouLocalReq {
	optional uint32 id = 1;
	optional uint32 ticketNum = 2;
	optional uint32 count = 3;
}

message TuanGouLocalScoreInfoRes {
	optional uint32 score = 1;
	repeated uint32 receivedScoreId = 2;
}

message GetTuanGouLocalScoreRewardReq {
	optional uint32 id = 1;
}

// ================================

message BecomeStrongRes{
	required float rankPer=1;
	required uint32 rank=2;
}

//援军培养===================
message SupportInfoNotify{
	repeated MapKey32Value32 info = 1;
}

//英雄皮肤=======================

message HeroSkinInfoRes{
	repeated Item info = 1;	
}
message HeroSkinActiveReq{
	required uint32 id = 1;
}
message HeroSkinEquipReq{
	required uint32 id = 1;
	required uint64 hero = 2;
	required uint32 kind = 3;
}


//战宠==============
message PetInfo{
	required uint32 id = 1;
	required uint32 level = 2;
	required uint64 exp = 3;
	required uint32 grade = 4;
	required uint64 gradeExp = 5;
	optional uint32 gradeCost = 6;
	required uint32 position = 7;
	required uint32 star = 8;
	required FightProp prop = 9;
	optional uint64 ability = 10;	
	optional uint32 status = 11;
	repeated uint32 allStatus = 12;
	optional bool scene = 13;
	optional uint32 wakeLevel = 14;
	repeated uint32 wakeInfo = 15;
}

message PetLevelUpReq{
	required uint32 id = 1;
	required uint64 item = 2;
	required uint32 num = 3;
}

message PetInfoNotify{
	required PetInfo info = 1;
}
message PetGradeUpReq{
	required uint32 id = 1;
}
message PetGradeUpRes{
	required uint32 add = 1;
	required bool ok = 2;
}

message PetStarUpReq{
	required uint32 id = 1;
}

message PetOnBattleReq{
	required uint32 id = 1;
	required uint32 kind = 2;
}
message PetProtectReq{
	required uint32 id = 1;
	required uint32 position = 2;
}
message PetEquipReq{
	required uint64 item = 1;
	required uint32 position = 2;
}

message PetInfoRes{
	repeated PetInfo info = 1;
}

message PetStatusActiveReq{
	required uint32 id = 1 ;
	required uint32 kind = 2;
}

message PetStatusUseReq{
	required uint32 id = 1 ;
	required uint32 kind = 2;
}

message PetOnSceneReq{
	required uint32 id = 1;
	required uint32 kind = 2;
}

message PetSceneInfo{
	optional uint32 id = 1;
	optional uint32 model = 2;
}

message PetWakeUpReq{
	required uint32 id = 1;
	required uint32 kind = 2;
}


// ================= 秘境探险==================

message MjtxEnemyInfo {
	required PlayerBaseInfo baseInfo	= 1;	//基础信息
	optional bool isDead = 2;
	optional uint32 hpPercent = 3;
	optional uint32 buffLayer = 4;
	repeated uint32 bpModelId = 5;
	optional uint32 reward = 6;
}
	
message MjtxInfoRes {
	optional uint32 fightCount = 1;
	optional uint32 phase = 2;
	optional uint32 boxRwdCount = 3;
	repeated MjtxEnemyInfo enemy = 4;
	optional uint32 rank = 5;
	optional uint32 assistCount = 6;
	optional uint32 helpCount = 7;
	repeated uint64 usedFriendIds = 8;
}

message MjtxRankInfo {
	optional PlayerBaseInfo baseInfo = 1;
	optional uint32 num = 2;
}

message MjtxRankRes {
	repeated MjtxRankInfo info = 1;
}

message MjtxFightStartReq {
	optional uint32 posId = 1;
	optional uint64 friendId = 2;
}

message MjtxFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message MjtxFightEndReq {
	optional uint32 play_mode = 2; // 0 手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 3;
}

message MjtxFightEndRes {
	optional uint32 result = 1;
	repeated Reward reward = 2;
}

message MjtxAutoFightReq {
	optional uint32 posId = 1;   //0-15
	optional uint64 friendId = 2;
}

message MjtxAutoFightRes {
	optional uint32 result = 1;
	optional string reportId = 2;
	repeated Reward reward = 3;
	optional BgFightInfo attacker = 4;
	optional BgFightInfo target = 5;
}

message MjtxSomeCountNotify {
	optional uint32 fightCount = 1;
}

message MjtxOpenBoxRes {
	repeated Reward rwd = 1;
}

message BattlePlayers {
	repeated BattlePlayer players = 1;
}

message EnemyPlayer {
	optional PlayerBaseInfo target = 1;
	repeated BattlePlayer players = 2;
}

//[NULL]
message ITGetBattlePlayerReq {
	optional uint64 playerId = 1;
	optional uint64 targetId = 2;
	optional uint32 kind = 3;
}

//[NULL]
message ITGetBattlePlayerRes {
	optional uint64 playerId = 1;
	optional uint32 kind = 2;
	optional PlayerBaseInfo target = 3;
	repeated BattlePlayer players = 4;
}
//[NULL]
message ITNewPlayerBaseInfoNotify{
	//世界服
	optional uint32 dist = 1;
	repeated PlayerBaseInfo pbs = 2;
}

message ITNewGetBattlePlayerReq{
	//世界服
	message PlayerId{
		required uint64 id = 1;
		optional uint32 dist = 2;
		optional uint32 team = 3;
	}
	repeated PlayerId ids = 1;
}

//[NULL]
message ITNewGetBattlePlayerRes {
	//世界服	
	message BattlePlayers{
		required uint64 id = 1;
		repeated BattlePlayer bps = 2;
	}
	repeated BattlePlayers bps = 1;
}

//[NULL]
message ITGetBattlePlayerWithCbReq {
	optional uint64 id = 1;
	optional uint64 targetId = 2;
	repeated uint64 params = 3;
}

//[NULL]
message ITGetBattlePlayerWithCbRes {
	optional uint64 id = 1;
	optional PlayerBaseInfo target = 2;
	repeated BattlePlayer players = 3;
	repeated uint64 params = 4;
}

//[NULL]
message ITCrossAvaiPlayerNotify {
	repeated PlayerBaseInfo baseInfo = 1;
}

message MirrorSystemReq{
	optional uint64 id=1;
	optional uint32 heroId=2;
}

//资源回收===============
message RetrivalInfoRes{
	repeated MapKey32ValueReward res = 1;
	repeated MapKey32Value32 nowNum = 2;
	repeated MapKey32Value32 num = 3;
}

message RetrivalRewardReq{
	required uint32 kind = 1;
	required uint32 id = 2;
}


//=========小基金=============

message FundInfo {
	optional uint32 id = 1;
	optional bool isBuy = 2;
	repeated bool isGet = 3;
	optional uint32 charge = 4;
}

message FundInfoRes {
	repeated FundInfo fund = 1;
}

message BuyFundReq {
	optional uint32 id = 1;
}

message GetFundRewardReq {
	optional uint32 id = 1;
	optional uint32 pos = 2; //从0开始
}

//端午节===============
message DragonBoatAllInfoRes{
	optional DragonBoatMakePanelRes panel=1;
	optional DragonBoatShopInfoRes shop=2;
	optional DragonBoatSingleRewardRes singleReward=3;
}
message DragonBoatMakePanelRes{
	optional uint32 canGet=1;// 1 可领取 2已领取
	optional uint32 myScore=2;
	repeated MapKey32Value32 num = 3;
}
message DragonBoatDonatePanelRes{
	optional uint32 lastReqStamp=1;
	message DonateInfo{
		optional PlayerBaseInfo id=1;
		optional uint32 itemId=2;
		optional uint32 totalReqNum=3;//总请求数量
		optional uint32 donatedNum=4;//已经被捐赠的数量
		optional uint32 stamp=5;//请求时间
	}
	repeated DonateInfo info=2;
	message DonateLog{
		optional uint32 stamp=1;
		optional PlayerBaseInfo donateId=2;
		optional PlayerBaseInfo donatedId=3;
		optional uint32 itemId=4;
		optional uint32 count=5;
		optional uint32 score=6;
	}
	repeated DonateLog log=3;
}

message DragonBoatShopInfoRes{
	repeated DragonBoatShopInfo info=1;
}
message DragonBoatShopInfo{
	required uint32 itemId=1;
	required uint32 buyNum=2;
}


message DragonBoatBuyReq{
	required uint32 id=1;
	required uint32 num=2;
}
message DragonBoatBuyRes{
	required uint32 id=1;
	optional uint32 buyNum=2;
}

message DragonBoatMakeItemReq{
	required uint32 id=1;
	required bool autoBuy=2;
}
message DragonBoatMakeItemRes{
	optional uint32 myScore=1;
}
message DragonBoatOneKeyMakeReq{
	required uint32 id=1;
	required bool autoBuy=2;
	required uint32 num=3;
}
message DragonBoatOneKeyMakeRes{
	optional uint32 myScore=1;
	repeated MapKey32Value32 num = 2;
}

message DragonBoatRankTableRes{
	repeated DragonBoatRankInfo info=1;
	optional uint32 myScore=2;
}
message DragonBoatRankInfo{
	optional PlayerBaseInfo player=1;
	optional uint32 score=2;
}

message DragonBoatSingleRewardReq{
	required uint32 id=1;
}
message DragonBoatSingleRewardRes{
	repeated uint32 haveGetId=1;
	optional uint32 myScore=2;
}

message DragonBoatDonateReq{
	required uint64 id=1;
	required uint32 itemId=2;
	required uint32 count=3;
	required uint32 stamp=4;//请求人请求该项物品的时间戳
}

message DragonBoatDonateRes{
	required uint64 id=1;
	required uint32 stamp=2;//请求人请求该项物品的时间戳
	required uint32 count=3;
}

message DragonBoatReqDonateReq{
	required uint32 itemId=1;
	required uint32 itemNum=2;
}


//扫雷===============
message MineSweepAllInfoRes{
	optional MineSweepPanelRes panel=1;
	optional MineSweepShopInfoRes shop=2;
	optional MineSweepSingleRewardRes singleReward=3;
}

message MineSweepPanelRes {
	repeated MineSweepInfo info=1;
	repeated uint32 bestItem=2;
	optional uint32 myScore=3;
	repeated MapKey32Value32 openedBless = 4;
}
message MineSweepInfo{
	optional uint32 x=1;
	optional uint32 y=2;
	optional uint32 id=3;
	optional bool isNumber=4;
}
message MineSweepResetRes{
	optional MineSweepPanelRes panel=1;
}
message MineSweepOneKeyRes{
	optional MineSweepPanelRes oldPanel=1;
	optional MineSweepPanelRes panel=2;
}

message MineSweepShopInfoRes{
	repeated MineSweepShopInfo info=1;
}
message MineSweepShopInfo{
	required uint32 itemId=1;
	required uint32 buyNum=2;
}
message MineSweepOpenBlessReq {
	optional uint32 id = 1;
	optional uint32 pos = 2;
}

message MineSweepBuyReq{
	required uint32 id=1;
	required uint32 num=2;
}
message MineSweepBuyRes{
	required uint32 id=1;
	optional uint32 buyNum=2;
}

message MineSweepDigReq{
	required uint32 x=1;
	required uint32 y=2;
}
message MineSweepDigRes{
	optional MineSweepInfo info=1;
	optional uint32 myScore=2;
	optional MineSweepPanelRes panel=3;
}
//扫雷排行榜
message MineSweepRankTableRes{
	repeated MineSweepRankInfo info=1;
	optional uint32 myScore=2;
}
message MineSweepRankInfo{
	optional PlayerBaseInfo player=1;
	optional uint32 score=2;
}

message MineSweepSingleRewardReq{
	required uint32 id=1;
}
message MineSweepSingleRewardRes{
	repeated uint32 haveGetId=1;
	optional uint32 myScore=2;
}
//=========服装配饰=============
message FashionMakeReq{
	optional uint32 targetId=1;	
}

message FashionMakeRes{
	optional uint32 skillId=1;	
	optional uint32 skillNum=2;
}

message FashionXiLianReq{
	optional uint32 targetId=1;	
}

message FashionXiLianRes{
	optional uint32 skillId=1;	
	optional uint32 skillNum=2;
}
message FashionSkillReq{
	required uint32 id=1;
}

message FashionWearReq{
	required uint32 id = 1;
	required uint32 kind=2;
}



//=========跨服组队竞技=============
//队伍信息
message CTeamInfo{
	required string name = 1;
	repeated CTeamMemberInfo member = 2;
	repeated uint64 sort = 3;
	required uint32 score = 4;
	optional uint64 ability = 5;
	required uint64 leader = 6;	
	optional uint32 dist = 7;
	optional string op = 8;
	optional uint64 id = 9;
	optional uint32 fid = 10;
}
message CTeamMemberInfo{
	required PlayerBaseInfo info = 1;
	optional uint32 win = 2;
	optional uint32 score = 3;
}
message CteamArenaInfoRes{
	required CTeamInfo enemy = 1;
	required CTeamInfo our = 2;
	required uint32 score = 3;
	optional uint32 source = 4;
}

//更换对手  
message CteamArenaEnemyChangeNotify{
	required CTeamInfo info = 1;
	optional uint32 score = 2;
	optional uint32 source = 3;

}
message CteamArenaStateRes{
	required uint32 state = 1;
	optional CTeamInfo team = 2;
	optional uint32 num = 3;
}

message CTeamRankInfo{
	required uint32 rank = 1;
	required string name = 2;
	required string leader = 3;
	required uint64 ability = 4;
	optional uint32 win = 5;
	optional uint32 lose = 6;
	optional uint32 score = 7;
	optional uint32 dist = 8;
	optional string op = 9;
}
//排行榜
message CteamArenaRankRes{
	repeated CTeamRankInfo info = 1;
	optional uint32 rank = 2;
	optional uint32 score = 3;
	optional uint32 frank = 4;
}
//更换顺序
message CteamArenaChangeSortReq{
	required uint32 from = 1;
	required uint32 to = 2;
}
message CteamArenaFightRes{
	optional CteamReport info = 1;
}

message CteamArenaPreReportReq{
	required uint32 kind = 1;
}
message CteamArenaPreReportRes{
	repeated CteamReport info = 1;
}


message CteamArenaFinalReportReq{
	required uint32 id = 1;
}

message CteamArenaFinalReportRes{
	repeated CteamReport info = 1;
}

message CteamReport{
	required string winName = 1;
	required uint32 winDist = 2;
	required string winOp = 3;
	required string loseName = 4;
	required uint32 loseDist = 5;
	required string loseOp = 6;
	repeated CteamBattle battle = 7;
	repeated CteamBattleHp hp = 8;
	optional uint32 pos = 9;
	optional uint64 winId = 10;
}

message CteamSimpleReport{
	required string winName = 1;
	required uint32 winDist = 2;
	required string winOp = 3;
	required string loseName = 4;
	required uint32 loseDist = 5;
	required string loseOp = 6;
	required uint32 id = 7;
	optional uint32 pos = 8;
}

message CteamBattle{
	required string winName = 1;
	required uint64 winId = 2;
	required string loseName = 3;
	required uint64 loseId = 4;
	required string battleId = 5;
	optional uint32 pos = 6;
}
message CteamBattleHp{
	optional uint64 winMaxHp = 1;
	optional uint64 winNowHp = 2;
	optional uint64 loseMaxHp = 3;
	optional uint64 loseNowHp = 4;	
}
message CteamPlayerInfoRes{
	optional uint32 time = 1;
	optional uint32 win = 2;
	repeated MapKey32Value32 reward = 3;
}


message CteamArenaFinalTeamRes{
	repeated CTeamInfo team = 1;
	repeated CteamArenaFinalStage index = 2;
}
message CteamArenaFinalStage {
	required uint32 id = 1;
	optional uint64 win = 2;
	repeated CteamSimpleReport report = 3;
	repeated uint64 team = 4;
}


message CteamArenaFinalBetReq{
	required uint32 index = 1;
	required uint64 team = 2;
	optional uint64 id = 3;
}

message CteamArenaFinalBetInfoRes{
	repeated CteamArenaFinalBetInfo info = 1;
}

message CteamArenaFinalBetInfo{
	required uint32 index = 1;
	required uint64 team = 2;
	required bool reward = 3;
}

message CteamArenaFinalBetRewardReq{
	optional uint32 id = 1;
}

message CteamArenaHonorRes{
	message team{		
		repeated PlayerBaseInfo info = 1;
		optional uint32 time = 2;
		optional string name = 3;
	}
	repeated team info = 1;
}

//[NULL]
message ITCteamArenaGetBattleRes{
	message multiBattlePlayer{
		repeated BattlePlayer player = 1;
		optional uint64 id = 2;
	}
	repeated multiBattlePlayer players = 1;
	required uint64 p = 2;
	required uint64 tId = 3;
}

message VplanInfoReq{
}

message VplanInfoRes{
	required bool isv = 1;
	required bool vyear = 2;
	required uint32 vlevel = 3;
	required uint32 consume = 4;
	required uint32 consumeNextTime = 5;

	required bool dayRecvd = 6;
	repeated uint32 lvRecvd = 7;
	repeated uint32 consumeRecvd = 8;
	repeated uint32 titleRecvd = 9;
}

message VplanLevelReq{
	required uint32 lv = 1;
}

message VplanTitleReq{
	required uint32 lv = 1;
}

message V360GiftActiveReq{
	required string code = 1;
}

message VplanConsumeReq{
	required uint32 count = 1;
}

//==================================
message StaticZillionairePointModel {
	optional uint32 id = 1; 
	optional uint32 kind = 2; 
	optional string cfg = 3;
}
message StaticZillionaireRankRewardModel {
	optional uint32 from = 1; 
	optional uint32 to = 2; 
	optional string rwd = 3;
	optional string bigrwd = 4;
}
message StaticZillionaireScoreRewardModel {
	optional uint32 score = 1; 
	optional string rwd = 2;
}
message StaticZillionaireModel {
	optional uint32 version = 1;
	optional string starttime = 2;
	optional string stoptime = 3;
	optional string endtime = 4;
	optional uint32 biglimit = 5;
	repeated StaticZillionaireRankRewardModel ranks = 6;
	repeated StaticZillionairePointModel points = 7; 
	repeated StaticZillionaireScoreRewardModel scores = 8;
	optional uint32 st = 9;  //for client
	optional uint32 stt = 10;//for client
	optional uint32 et = 11;//for client
}


message ZillionaireRunRes{
	required uint32 num = 1;
	required uint32 count = 2;
}

message ZillionaireSpecRunReq{
	required uint32 num = 1;
}

message ZillionaireBuyCountReq{
	required uint32 num = 1;
}

message ZillionaireGuessNumReq{
	required uint32 num = 1;
}

message ZillionaireGuessNumRes{
	required int32 ret = 1; // -1  小了  1大了  
	required uint32 count = 2;
}

message ZillionaireOpenBoxReq{
	required uint32 count = 1;
}

message ZillionaireOpenBoxRes{
	repeated Reward reward=1;
}

message ZillionaireGuessFigureRes{
	required bool ret = 1; 
	required uint32 count = 2;  
}

message ZillionaireFightStartRes{
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message ZillionaireFightEndReq{
	required uint32 mode = 1; 	//0:手动操作 1:自动操作 2:看战报	
	repeated SkillTimePoint stp = 2;
}

message ZillionaireFightEndRes {
	required uint32 result = 1;
	repeated Reward rewards = 2;
	optional uint32 stars = 3;
	optional uint32 totaltimes = 4;
}

message ZillionaireGameGetStar{
	required uint32 count = 1; 
}

message ZillionaireInfoRes{
	message CurrentData{
		required uint32 id = 1; 
		optional bool ok = 2;
		optional uint32 count = 3;
		optional uint32 wincount = 4;
	}
	required CurrentData current = 1; 
	required uint32 score = 2; 
	required uint32 count = 3; 
	required uint32 buycount = 4; 
	required uint32 hisbuycount = 5; 
	required uint32 specCount = 6; 
}

message ZillionaireRankRes{
	message Data{
		required uint64 id = 1; 
		required string name = 2; 
		required uint32 score = 3; 
		optional uint32 mr = 4; 
	}
	repeated Data data = 1; 
}

message ZillionaireScoreChangeNotify{
	required uint32 score = 1; 
}

message ZillionaireScoreInfoRes{
	repeated uint32 score = 1; 
}

message ZillionaireScoreRewardReq{
	required uint32 score = 1; 
}


//==================================
message GmShopListReq{
	required uint32 kind = 1;
}
message GmShopListRes{
	repeated ShopBuyInfo info = 1;
	required uint32 kind = 2;
}
message GmShopBuyReq{
	required uint32 id = 1;
	required uint32 num = 3;
}

message GmShopBuyRes{
	optional ShopBuyInfo info = 1;
}

//觉醒玩法

message GetPetWakeupPlayRes {
	optional uint32 curStageId = 1;
	optional uint32 restCounts = 2;
	repeated uint32 npcRestCount = 3;
	repeated bool npcIsPassed = 4;
	optional bool isPassed = 5;
	repeated uint32 receivedChapters = 6;
}

message PetWakeupPlayFightStartReq {
	required uint32 stageId = 1;
	optional uint32 posId = 2;
}

message PetWakeupPlayFightStartRes {
	repeated uint32 random = 1;
	repeated BattlePlayer player = 2;
}

message PetWakeupPlayFightEndReq {
	required uint32 play_mode = 1; // 0  手动操作 1 自动操作 2 看战报
	repeated SkillTimePoint stp = 2;
	optional bool isEscaped = 3;
}

message PetWakeupPlayFightEndRes {
	required uint32 result = 1;
	repeated Reward rwds = 2;
}

message PetWakeupPlaySaodangReq {
	optional uint32 stageId = 1;
}

message PetWakeupPlayGetChapterRewardReq {
	optional uint32 chapterId = 1;
}

message PetWakeupPlayGetRankInfoReq {
	optional uint32 kind = 1;
	optional uint32 start = 2;
	optional uint32 end = 3;
}

message PetWakeupPlayRankInfo {
	optional PlayerBaseInfo info = 1;
	optional uint32 stageId = 2;
	optional uint32 Tm = 3;
	optional uint32 rank = 4;
}

message PetWakeupPlayGetRankInfoRes {
	repeated PetWakeupPlayRankInfo info = 1;
	optional uint32 totalCount = 2;
	optional uint32 selfRank = 3;
}

message PetWakeupPlayEvaluateRes {
	optional uint32 stageId = 1;
}


message PetWakeupPlayRank {
	optional uint32 kind = 1;
	repeated PetWakeupPlayRankInfo info = 2;
}

//[NULL]
message ITGetPetWakeupPlayRankRes {
	repeated PetWakeupPlayRank rank = 1;
}

//[NULL]
message ITPetWakeupSynRankReq {
	optional PlayerBaseInfo info = 1;
	optional uint32 stageId = 2;
	optional uint32 tm = 3;
	optional uint32 kind = 4;
}

// 神器养成

message ArtifactGetArtiModelAbilityReq {
	optional uint32 instId = 1;
}

message ArtifactGetArtiModelAbilityRes {
	optional uint32 instId = 1;
	optional uint64 ability = 2;
}

// 拉取 （包含图鉴）
message ArtifactPartInfo {
	repeated MapKey32Valuef32 prop = 1;
	optional uint32 partId = 2;
	optional uint32 jinjieId = 3; //对应进阶表
	repeated MapKey32Valuef32 newProp = 4;
}

message ArtifactInfo {
	optional uint64 id = 1;
	optional uint32 staticId = 2;
	repeated ArtifactPartInfo part = 3;
	optional FightProp prop = 4;
	optional uint32 pos = 5;
	optional uint32 lv = 6;
	optional uint64 lvExp = 7;
	optional uint32 star = 8;
	optional uint32 jinjieId = 9;
	optional uint64 ability = 10;
	optional uint64 abilityfrommaster = 11;//从主角神器上增加的战力
	optional bool   isshow = 12;
}

message ArtifactGetInfosRes {
	repeated ArtifactInfo arti = 2;
}
message ArtifactMasterShowReq{
	optional uint64 artiid = 1;
	optional bool isshow = 2;
}

// 锻造
message ArtifactForgeReq {
	optional uint32 itemId = 1; //需要锻造的神器id
}

message ArtifactInfoNotify {
	optional ArtifactInfo arti = 1;
}


// 升级
message ArtifactAddExpReq {
	optional uint64 id = 1;
	optional uint64 costItemId = 2;
	optional uint32 costItemCount = 3;
}

message ArtifactAddExpRes {
	optional uint64 id = 1;
	optional uint32 level = 2;
	optional uint32 exp = 3;
}

// 升星
message ArtifactAddStarReq {
	optional uint64 id = 1;
}

// 进阶
message ArtifactJinJieReq {
	optional uint64 id = 1;
	optional uint32 partId = 2;
}

// 洗练
message ArtifactXilianReq {
	optional uint64 id = 1;
	optional uint32 partId = 2;
	optional bool isDiamond = 3;
	optional uint32 count = 4;
}

// 重铸
message ArtifactRecastReq {
	optional uint64 id = 1;
	optional uint32 partId = 2;
	repeated uint32 lock = 3;
}


message ArtifactEquipReq {
	required uint64 id = 1;
	required uint32 position = 2;
}
	
//神兵产出玩法
//[NULL]
message ITSyncBattlePlayerRes{
	repeated BattlePlayer player = 1;
	required uint32 pos = 2;
	required uint32 stage = 3;
}

//矿区简要信息
message MineAreaInfoReq{	
	required uint32 kind = 1;
}
message MineAreaInfoRes{	
	repeated MineAreaInfo info = 1;
	required uint32 kind = 2;
}

message MineAreaInfo{
	required uint32 id = 1;	
	optional uint32 my = 2;
	optional uint32 family = 3;
	optional uint32 empty = 4;
	optional uint32 node = 5;
	optional uint32 close = 6;
	optional float familyAdd = 7;
}

//矿山信息
message MineHillInfoReq{	
	required uint32 id = 1;
}
message MineHillInfoRes{	
	repeated MineInfo info = 1;
}

//矿点详情
message MineInfo{
	required uint32 		id 		= 1;
	optional PlayerBaseInfo player 	= 3;
	optional PlayerBaseInfo help 	= 4;
	optional uint32 		time 	= 5;
	optional uint32 		hTime	= 6;
	repeated MapKey32Valuef32 reward 	= 7; 
	optional uint32 		state	= 8;
	optional uint32  		usedTime = 9;
	optional float lost = 10;
	optional bool isGet = 11;
	optional uint32 protect = 12;
}

message MineFightReq{
	required uint32 id = 1;
	optional uint64 uid = 2;
	required uint32 kind = 3;
	required uint32 auto = 4;
}

message MineInfoNotify{
	required MineInfo info = 1;
}

message MineLeaveReq{
	required uint64 uid = 1;
	required uint32 hill = 2;
}
message MineFightRes{
	optional BgFightInfo attacker = 1;
	optional BgFightInfo target = 2;
	required uint32 auto = 3;
	optional string reportId = 4;
	optional uint32 result = 5;
}

message GetMineInfoReq{
	required uint64 id = 1;
}
message GetMineInfoRes{
	repeated MineInfo info = 1;
}

message GetEnemyInfoRes{
	repeated MineInfo info = 1;
}

message MineAbandonReq{
	optional uint64 uid = 1;
}

message MineRewardReq{
	required uint32 id = 1;
	optional uint32 kind = 2;
}

message MineInviteApplyReq{
	required uint64 uid = 1;
}
message MineInviteAgreeReq{
	required uint64 uid = 1;
}
message MineInviteInfoRes{
	repeated uint64 uid = 1;
	required uint32 apply = 2;
	optional uint32 agree = 3;
}
message MineEventNotify{
	required uint32 kind = 1;
	optional Para param = 2;
}

message MineSpecialReq{
	required uint32 id = 1;
}
message MineTimesRes{
	optional uint32 grab = 1;
	optional uint32 steal = 2;
}
message MineLogRes{
	message log{
		optional uint32	time     = 1;
		optional uint32 kind     = 2;
		optional PlayerBaseInfo attacker = 3;
		optional uint32 lost     = 4;
		optional string reportId = 5;
		optional uint32 res		 = 6;
	}
	repeated log info = 1;
}
/////////////////////////////////////
message StaticOpActivity {
	message Table{
		message Row{
			repeated string data = 1;
		}
		required string name = 1;
		repeated string fields = 2;
		repeated Row rows = 3;
	}
	required uint32 kind=1;
	repeated Table tables = 3;
}

/////////////////////////////////////
message StaticTowerModel {
	message KVPair{
		optional string k = 1;
		optional string v = 2;
	}
	message Row{
		repeated KVPair v = 1;
	}
	repeated Row rows = 1;
	optional uint32 st = 2;  //for client
	optional uint32 stt = 3;//for client
	optional uint32 et = 4;//for client
}
message TowerInfoRes {
	repeated int32 lvs = 1;
	required int32 score = 2;
	repeated MineSweepShopInfo info=3;
	repeated int32 scored  = 4; //领过的积分奖励
}
message TowerRankRes {
	message Info{
		required uint64 id = 1;
		required string name = 2;
		required int32 score = 3;
	}
	repeated Info infos = 1;
}
message TowerJumpReq {
	required int32 kind = 1;
	required int32 count = 2;
}

message TowerJumpRes {
	required int32 currlv = 1;
	required int32 score = 2;
	required int32 pos = 3;
}

message TowerScoreRewardReq {
	required int32 score = 1;
}

message TowerBuyReq {
	required int32 pos = 1;
	required int32 count = 2;
}

message TowerBuyRes{
	required uint32 id=1;
	optional uint32 buyNum=2;
}
//===宝石迷阵

/////////////////////////////////////
message StaticBejeweledModel {
	message KVPair{
		optional string k = 1;
		optional string v = 2;
	}
	message Row{
		repeated KVPair v = 1;
	}
	repeated Row rows = 1;
	optional uint32 st = 2;  //for client
	optional uint32 stt = 3;//for client
	optional uint32 et = 4;//for client
}
message BejeweledInfoRes {
	repeated int32 funny = 1;  //color
	required int32 score = 2;
	repeated MineSweepShopInfo info=3;
	repeated int32 scored  = 4; //领过的积分奖励
	required int32 energy = 5; //精力
}
message BejeweledMoveReq {
	required int32 pos1 = 1;
	required int32 pos2 = 2;
}

message BejeweledAddInfo{
	required int32 index = 1;
	required int32 color = 2;
}

message BejeweledBatchInfo{
	required int32 score = 1;
	repeated int32 removes = 2;  //index
	repeated BejeweledAddInfo adds = 3;
	repeated Reward rwd = 4;
}

message BejeweledMoveRes {
	repeated BejeweledBatchInfo batches = 1;
	required int32 energy = 2;
}

message BejeweledOneShotRes {
	required int32 score = 1;
	repeated int32 funny = 2;
	required int32 energy = 3;
	repeated Reward rwd = 4;
}

message BejeweledRankRes {
	message Info{
		required uint64 id = 1;
		required string name = 2;
		required int32 score = 3;
	}
	repeated Info infos = 1;
}

message BejeweledScoreRewardReq {
	required int32 score = 1;
}

message BejeweledBuyReq {
	required int32 pos = 1;
	required int32 count = 2;
}

message BejeweledBuyRes{
	required uint32 id=1;
	optional uint32 buyNum=2;
}

message BejeweledBuyEnergyRes{
	required uint32 energy=1;
}

//============法阵==============
message FazhenInfo{
		required uint64 heroId = 1;
		required bool isOpen = 2;
		required uint32 currlv = 3;
		required uint32 maxlv = 4;
		required FightProp prop = 5;
		required uint64 ability = 6;
}

message FazhenInfoRes {
	repeated FazhenInfo infos = 1;
}

message FazhenChgHeroReq {
	required int32 pos = 1;
	required uint64 heroId = 2;
}

message FazhenChgHeroRes {
	optional FazhenInfo info = 1;
}

message FazhenUpgradeReq {
	required int32 pos = 1;
}

message FazhenUpgradeRes {
	required FazhenInfo info = 1;
}

//=========跨服转盘==========

message ZhuanpanCrossInfoRes {
	required int32 score = 1;
	repeated MineSweepShopInfo info=2;
	repeated uint32 scoregets = 3;
}
message ZhuanpanCrossRankRes {
	message RankData{
		required uint64 id = 1;
		required string name = 2;
		required uint32 score = 3;
		required uint32 MilitaryRank = 4;
		required uint32 dist = 5;
		required string opname = 6;
	}
	repeated RankData ranks = 1;
}
message ZhuanpanCrossSuperRes {
	message SuperData{
		required uint64 id = 1;
		required string name = 2;
		required uint32 dropid = 3;
	}
	repeated SuperData supers = 1;
	required uint32 kind = 2;
}
message ZhuanpanCrossRotateReq {
	required int32 kind = 1;
	required int32 count = 2;
}

message ZhuanpanCrossRotateRes {
	required int32 score = 1;
}


message ZhuanpanCrossBuyReq {
	required int32 pos = 1;
	required int32 count = 2;
}

message ZhuanpanCrossBuyRes{
	required uint32 id = 1;
	optional uint32 buyNum = 2;
}

message ZhuanpanCrossSuperReq{
	required uint32 kind = 1;
}

message ZhuanpanCrossScoreRwdReq{
	required uint32 score = 1;
}

message VipFinancePlanInfoRes {
	optional uint32 buyCount = 1;
	optional uint32 chargeCount = 2;
	optional uint32 chargeSum = 3;
	repeated uint32 alreadyGet = 4;
}

message VipFinancePlanBuyReq {
	optional uint32 count = 1;
}

message VipFinancePlanGetRewardReq {
	optional uint32 pos = 1;
}

message QqWeekNormalGiftGetReq {
	optional uint32 kind = 1;
}

//国战军团
message CwLegionInfo {
	optional uint64 id = 1;	
	optional uint32 level = 2;
	optional string name = 3;
	optional string notice = 4;
	optional uint32 count = 5;
	repeated CwLegionMember member = 6;
	optional bool auto = 7;
	optional uint32 military = 8;
	optional uint32 rank = 9;
	optional uint32 applyCount = 10;
	repeated MapKey32Value32 source = 11;
	optional MapKey64Value32 maxDonateSource = 12;
	optional MapKey64Value32 maxDonateFund = 13;
	repeated MapKey32Value32 onBuild = 14;
	repeated uint32 city = 15; 
	optional bool general = 16;
	optional uint32 recvCount = 17;
	optional uint32 donateCount = 18;
	repeated MapKey32Value32 tech = 19;
}
message CwLegionMember{
	optional PlayerBaseInfo player = 1;
	optional uint32 cdTime = 2;
	optional uint32 post = 3;
	optional uint32 donate = 4;
	optional uint64 legion = 5;
	optional bool general = 6;
	optional bool reward = 7;
	repeated MapKey32Value32 tech = 8;
	optional uint32 dayDonate = 9;
	optional uint32 dayDonateFund = 10;
	optional uint32 allDonate = 11;
	repeated MapKey32Value32 machine = 12;
	repeated MapKey32Value32 cityReward = 13;
	optional uint32 online = 14;
	repeated MapKey32Value32 source = 15;
	repeated MapKey32Value32 onBuild = 16;
	repeated MapKey32Value32 mLimit = 17;
}
message CwLegionCreateReq{
	required string name = 1;
}
message CwLegionCreateRes{
	required CwLegionInfo info = 1;
}
message CwLegionInfoRes{
	required CwLegionInfo info = 1;
}
message CwLegionListRes{
	repeated CwLegionInfo info = 1;
}
message CwLegionApplyReq{
	required uint64 id = 1;
}
message CwLegionNoticeReq{
	required string content = 1;
}
message CwLegionDonateReq{
	required uint32 kind = 1;
}
message CwLegionTechLearnReq{
	required uint32 kind = 1;
}

message CwLegionAppointReq{
	repeated uint64 uids = 1;
}
message CwLegionNotify{
	optional CwLegionInfo info = 1;
	optional uint32 kind = 2;
}
message CwLegionAgreeReq{
	required uint32 kind = 1; //1 同意 2 全部同意  3拒绝 4 全部拒绝
	optional uint64 uid = 2;
}
message CwLegionKickReq{
	required uint64 uid = 1;
}
message CwLegionApplyListRes{
	repeated PlayerBaseInfo list = 1;
}
message CwLegionMemberInfoRes{
	required CwLegionMember info = 1;
}
message CwLegionMemberNotify{
	required CwLegionMember info = 1;
	optional uint32 kind = 2;
}
message CwLegionChangeLeaderReq{
	required uint64 uid = 1;
}
message CwLegionMachineReq{
	required uint32 id = 1;
	required uint32 kind = 2;
}
//接受
message CwLegionGetFreeCityReq{
	required uint32 id = 1;
}
message CwLegionGetFreeCityRes{
	repeated uint32 id = 1;
}
//拒绝
message CwLegionRejectFreeCityReq{
	required uint32 id = 1;
}
//接受列表
message CwLegionFreeCityListRes{
	message FreeCity{
		optional uint32 id = 1;
		optional string name = 2;
		optional uint32 time = 3;
	}
	repeated FreeCity list = 1;
}
//转让
message CwLegionTransferCityReq{
	required uint64 id = 1;
	required uint32 city = 2;
}

//军团邀请
message CwLegionInviteReq{
	repeated uint64 id = 1;
}
message CwLegionInviteNotify{
	optional PlayerBaseInfo player = 1;
	optional CwLegionInfo legion = 2;
}

// 军械取消
message CwLegionMachineCancleReq{
	required uint32 id = 1;
}
//==========卡牌大师============

message PokerInfoRes {
	required uint32 score = 1;
	required uint32 todayscore = 2;
	repeated MineSweepShopInfo info= 3;
	repeated uint32 scoregets = 4;
}

message PokerRankRes {
	message RankData{
		optional PlayerBaseInfo player= 1;
		optional uint32 score= 2;
	}
	required uint32    myscore = 1;
	repeated RankData ranks = 2;
}

message PokerDrawReq {
	required uint32 kind = 1;
	required uint32 count = 2;
}

message PokerDrawRes {
	required uint32 score = 1;
	repeated string pks   = 2;
	required uint32 todayscore = 3;
}

message PokerBuyReq {
	message buyinfo{
		required uint32 pokerid = 1;
		required uint32 count = 2;
	}
	repeated buyinfo infos = 1;
}

message PokerSellReq {
	message sellinfo{
		required uint32 pokerid = 1;
		required uint32 count = 2;
	}
	repeated sellinfo infos = 1;
}

message PokerSweepReq {
	required uint32 pos = 1;
	required uint32 count = 2;
}

message PokerSweepRes {
	required uint32 pos = 1;
	required uint32 count = 2;
}

message PokerScoreRwdReq{
	required uint32 score = 1;
}

//=============限时宝藏================
message KeyshopInfoRes {
	message Shopinfo{
		optional string rwd = 1;
		optional string cost = 2;
		optional string oldcost = 3;
		optional string discount = 4;
		optional uint32 limit = 5;
		optional uint32 pos = 6;
	}
	message Chargeinfo{
		optional uint32 charge = 1;
		optional string reward = 2;
	}
	message Buyinfo{
		optional uint32 pos = 1;
		optional uint32 count = 2;
	}
	required uint32 score = 1;
	optional bool shopopen = 2;
	optional bool rechargeopen = 3;
	optional uint32 keycleartime = 4;
	optional uint32 shopclosetime = 5;
	optional uint32 shopresettime = 6;
	optional Chargeinfo recharge = 7;
	repeated Buyinfo buyinfos = 8;
	repeated Shopinfo   shops = 9;
}
message KeyshopBuyReq {
	required uint32 pos = 1;
	required uint32 count = 2;
}
message KeyshopBuyRes {
	message Chargeinfo{
		optional uint32 charge = 1;
		optional string reward = 2;
	}
	message Buyinfo{
		optional uint32 pos = 1;
		optional uint32 count = 2;
	}
	required uint32 score = 1;
	required Buyinfo buyinfo = 2;
	optional Chargeinfo charge = 3;
}
message KeyshopTimeinfoRes {
	required uint32 keycleartime = 1;
	required uint32 shopclosetime = 2;
}
message KeyshopInfoNotify{
	required KeyshopInfoRes info = 1;
}

message ChangePlayerNameReq{
	required string newname = 1;
}
message ChangeFamilyNameReq{
	required string newname = 1;
}
message FamilyNameNotify{
	required string oldName = 1;
	required string newname = 2;
}
message CrossClosedNotify {
	
}

message GetHfActivityRankReq {
	optional uint32 kind = 1;
	optional uint32 start = 2;
	optional uint32 end = 3;
}

message GetHfActivityRankRes {
	message HFRank {
		optional uint64 id = 1;
		optional string name = 2;
		optional uint32 militaryRank = 3;
		optional uint32 count = 4;
		
	}
	optional uint32 kind = 1;
	repeated HFRank data = 2;
}

//结婚系统======================================================
message MarriageSeekInfoRes{
	repeated MarriageSeek gold = 1; //征婚列表
	repeated MarriageSeek normal = 2; //征婚列表
	repeated uint64 applyed = 3;
}
message MarriageApplyInfoRes{
	repeated PlayerBaseInfo list = 1; //应征列表
}
message MarriageProposeInfoRes{
	repeated MarriagePropose propose = 1; //求婚列表
}
message MarriageDateInfoRes{
	repeated MarriageWedding wedding = 1;//婚宴列表
	optional uint32 time = 2;
	optional bool choice = 3;
}

//求婚数据
message MarriagePropose{
	required PlayerBaseInfo p = 1; //求婚者
	required uint32 kind = 2; //类型
	required uint32 time = 3; //时间
}
//征婚数据
message MarriageSeek{
	required PlayerBaseInfo p = 1;
	required uint32 time = 2;
	required uint32 kind = 3;
}
//婚宴数据
message MarriageWedding{
	required uint32 time = 1;
	required PlayerBaseInfo women = 2;
	required PlayerBaseInfo man = 3;
	required uint64 id = 4;
	optional uint64 owner = 5;
	optional uint32 kind = 6;
}

//发布征婚
message MarriageSeekReq{
	required uint32 kind = 1;//1普通 2 豪华
}
//应征
message MarriageApplyReq{
	required uint64 uid = 1;
}
message MarriageApplyNotify{
	required PlayerBaseInfo p = 1;
}

//求婚
message MarriageProposeReq{
	required uint64 uid = 1;
	required uint32 kind = 2;
}
//接受
message MarriageAcceptReq{
	required uint64 uid = 1;
}
message MarriageDateReq{
	required uint32 id = 1;
}

message MarriageInfoRes{
	message Ring{
		required uint32 id = 1;
		required uint32 level = 2;
		optional bool active = 3;
	}
	
	required uint32 state = 1;
	optional uint32 marryTime = 2;
	optional PlayerBaseInfo p = 3;
	repeated Ring list = 4;
	optional uint32 time = 5;
	optional uint64 ability = 6;
	optional uint32 kind = 7;
	optional uint32 divroceTime = 8;
	optional uint32 weddingTime = 9;
	optional uint64 partnerOffline = 10;
}
message MarriageProposeNotify{
	optional MarriagePropose info = 1;
}
message MarriageAcceptNotify{
	optional MarriagePropose info = 1;
}
message MarriageDivorceReq{
	required uint32 kind = 1;
}
message MarriageDivorceNotify{
	optional PlayerBaseInfo p = 1;
}
message MarriageDivorceConfirmReq{
	required uint32 kind = 1;
}
message MarriageDivorceInfoNotify{
	required uint32 state = 1;
	optional uint32 marryTime = 2;
	optional uint32 divorceTime = 3;
}
message MarriageRingActiveReq{
	required uint32 itemId = 1;
}
message MarriageRingActiveRes{
	required uint64 ability = 1;
}
message MarriageRingLevelUpReq{
	required uint32 itemId = 1;
}
message MarriageRingLevelUpRes{
	required uint64 ability = 1;
}
message MarriageInteractReq{
	required uint32 kind = 1;
}
message MarriageInteractNotify{
	required uint32 kind = 1;
}

message MarriageWeddingInfoReq{
	required uint64 id = 1;
}

message MarriageInteractLogRes{
	message Log{
		required uint64 uid = 1;
		required uint32 time = 2;
		required uint32 kind = 3;
	}
	repeated Log log = 1;
}

message MarriageWeddingInfoRes{
	optional MarriageWeddingInfo info = 1;
}
message MarriageWeddingInfo{
	message Packet{
		required uint64 id = 1;
		required uint32 count = 2;
		required uint32 cash = 3;
		required uint32 kind =  4;
		repeated PlayerBaseInfo p = 5;
		repeated uint32 recv = 6;
		required PlayerBaseInfo uid = 7;
		required uint32 time = 8;
		
	}
	repeated PlayerBaseInfo mem = 1;
	optional uint32 weddingScore = 2;
	optional uint32 personScore = 3;
	repeated MapKey32Value32 box = 4;
	repeated MapKey32Value32 cd = 5;
	repeated Packet packet = 6;
	optional uint32 candy = 7;
	optional string words = 8;
	optional uint32 xyTime = 9;
}

message MarriageWeddingNotify{
	required uint32 kind = 1;
	optional MarriageWeddingInfo info = 2;
}
message MarriageWeddingGuestOpReq{
	required uint32 kind = 1; 
}

message MarriageWeddingHostOpReq{
	required uint32 kind = 1;
	required uint32 num = 2;
	required uint32 cash = 3;
}
message MarriageWeddingAllOpReq{
	required uint32 kind = 1;
	required uint32 num = 2;
	required uint32 cash = 3;
}

message MarriageWeddingWordsReq{
	required string content = 1;
}
message MarriageWeddingGetReq{
	required uint64 id = 1;
}
message MarriageWeddingBoxReq{
	required uint32 kind = 1;
}
message MarriageWeddingAcceptReq{
	required uint32 kind = 1;
}
message MarriagePilgrimageNotify{
	
}

//===============群聊系统=====================
message PlayerOnlineInfo{
	required PlayerBaseInfo baseinfo = 1;
	required bool isonline = 2;
}
message GroupData{
	required  PlayerOnlineInfo creater = 1;
	repeated  PlayerOnlineInfo members = 2;
}
message GroupchatInfoRes{
	repeated  GroupData groups = 1;
	repeated  PlayerBaseInfo inviters = 2;
}
message GroupchatCreateReq{
	
}
message GroupchatInviteReq{
	repeated  uint64 playerids = 1;
}
message GroupchatLeaveReq{
	required  uint64 createrid = 1;
}
message GroupchatAcceptReq{
	required  uint64 createrid = 1;
}
message GroupchatGetoutReq{
	repeated  uint64 playerids = 1;
}
message GroupchatSpeakReq{
	required uint64 createrid = 1;
	required TalkContent content = 2;
}
message GroupchatMsgNotify{
	optional  PlayerBaseInfo speaker = 1;
	required  TalkContent 	 content = 2;
	required  GroupData      group 	 = 3;
	optional  uint32         stamp	 = 4;
}
message GroupchatInviteNotify{
	required  PlayerBaseInfo creater = 1;
}
message GroupchatMsgRecordReq{
	required  uint64 creater = 1;
}
message GroupchatMsgRecordRes{
	repeated GroupchatMsgNotify msgs = 1;
}
message GroupchatDismissNotify{
	required uint64 createrid = 1;
}
message GroupchatGetoutNotify{
	required uint64 createrid = 1;
}

//============坐骑占星======================
message HorsedivineInfoRes{
	message Info{
		required  uint32 pos = 1;
		required  uint32 flag = 2;
	}
	repeated Info infos = 1;
	optional uint32 discount = 2;
	optional uint32 daimondcnt = 3;
	optional uint32 golddaimondcnt = 4;
}
message HorsedivineActiReq{
	required uint32 actipos = 1;
}
message HorsedivineDivineReq{
	required uint32 divpos = 1;
}
message HorsedivineOnekeyReq{
	required uint32 limit = 1;
}
message HorsedivineActiRes{
	required HorsedivineInfoRes status = 1;
}
message HorsedivineDivineRes{
	required HorsedivineInfoRes status = 1;
	required uint32 costgold = 2;
	required uint32 getgold = 3;
}
message HorsedivineOnekeyRes{
	required HorsedivineInfoRes status = 1;
	required uint32 divcount = 2;
	required uint32 costgold = 3;
	required uint32 getgold  = 4;
}

//==========角色头像================
message PlayerAvatarInfoRes{
	repeated MapKey32Value32 avatars = 1;
}
message PlayerAvatarUseReq{
	required uint32 useid = 1;
	optional uint32 opkind = 2;
}
message PlayerAvatarUseRes{
	optional PlayerBaseInfo info = 1;
}
message PlayerAvatarActReq{
	required uint32 actid = 1;
}
message PlayerAvatarActRes{
	optional PlayerBaseInfo info = 1;
}
message PlayerAvatarNotify{
	optional PlayerBaseInfo info = 1;
}
// ============== 坐骑升阶 护佑==========

message HorseShengjieReq {
	optional uint32 horseId = 1;
}

message HorseShengjieRes {
	optional HorseInfo info = 1;
}

message HorseInfoNotify {
	optional HorseInfo info = 1;
}

message HorseProtectInfo {
	message ProtectInfo {
		optional uint32 modelId = 1;
		optional uint32 horseId = 2;
	}
	optional uint32 posId = 1;
	optional uint64 heroId = 2;
	repeated ProtectInfo pInfo = 3;
	optional uint64 ability = 4;
}

message HorseProtectReq {
	optional uint32 modelId = 1;
	optional uint64 heroId = 2;
	optional uint32 horseId = 3;
}

message HorseOpenProtectReq {
	optional uint32 modelId = 1;
}

message HorseGetProtectInfoRes {
	repeated HorseProtectInfo info = 1;
}

message HorseRebornReq {
	optional uint32 horseId = 1;
	required bool confirm = 2;
}

message HorseRebornRes {
	repeated Reward res = 1;
}

//===========一元抢购==============
message RobbuyInfoData{
	message RobbuyLuker{
		required uint32 openlv = 1;
		required PlayerBaseInfo player = 2;
	}
	required uint32 robid = 1;
	required uint32 mybuycount = 2;
	required uint32 allbuycount = 3;
	repeated RobbuyLuker lukers = 4;
}

message RobbuyInfoReq{
	repeated uint32 robids = 1;
	required uint32 version = 2;
}
message RobbuyInfoRes{
	repeated RobbuyInfoData infos = 1;
}
message RobbuyBuyReq{
	required uint32 robid = 1;
	required uint32 count = 2;
}
message RobbuyBuyRes{
	required RobbuyInfoData info = 1;
}
message RobbuyGetRewardReq{
	required uint32 robid = 1;
	required uint32 rwdlv = 2;
}
message RobbuyRewardInfoRes{
	message RewardInfo{
		required uint32 robid = 1;
		repeated uint32 hasrwds = 2;
	}
	repeated RewardInfo infos = 1;
}
//一元购商店=================弃用
message RobbuyShopbuyReq{
	required uint32 pos = 1;
	required uint32 count = 2;
}
message RobbuyShopbuyRes{
	required uint32 pos = 1;
	required uint32 count = 2;
}
message RobbuyShopinfoRes{
	repeated MineSweepShopInfo buycounts = 1;
}
//===============购物车=====================
message ShopcarInfoRes{
	repeated MapKey32Value32 buycounts = 1;
	repeated MapKey32Value32 cars0 = 2;
	repeated MapKey32Value32 cars1 = 3;
}
message ShopcarBuyReq{
	required uint32 kind = 1;
	repeated MapKey32Value32 buyinfo = 2;
}
message ShopcarBuyRes{
	optional ShopcarInfoRes info = 1;
}
message ShopcarSaveReq{
	repeated MapKey32Value32 cars0 = 1;
	repeated MapKey32Value32 cars1 = 2;
}
//==============周年庆=================
message AniversaryInfoRes{
	message AniInfo{
		required uint32 id 	    = 1;
		required uint32 kind    = 2;
		required uint32 mydate  = 3;
		required string myscore = 4;
	}
	repeated AniInfo infos = 1;
}


message ArtifactRebornReq {
	optional uint64 id = 1;
	required bool confirm = 2;
}

message ArtifactRebornRes {
	repeated Reward res = 1;
}

message ArtifactDecomposeReq {
	optional uint64 id = 1;
	required bool confirm = 2;
}

message ArtifactDecomposeRes {
	repeated Reward res = 1;
}
//=========全服组队竞技================================
message WorldArenaTeamNotify{
	optional WorldArenaTeam info = 1;
	optional uint32 kind = 2;
}
message WorldArenaTeam{	
	repeated WorldArenaMemInfo mem = 1;
	repeated MapKey32Value64 battle = 2;	
	optional uint32 time = 3;	
	repeated MapKey64Value32 state = 4;
	optional uint64 petUid = 5;
	optional uint64 leader = 6;
}

message WorldArenaPickReq{
	required uint64 heroId = 1;
	required uint32 place = 2;
}

	
message WorldArenaReport{
	message Target{
		repeated MapKey32Value32 battle = 1; //阵位 pos => npc
		repeated MapKeyStrValue32 mem = 2; //队伍成员  name=> score
		optional float score = 3; //变化量
		optional string name = 4;
	}
	optional Target win = 1;//胜方
	optional Target lose = 2;//败方
	optional uint32 time = 3;//时间
	optional string report = 4;//战报id
	optional uint32 myWin = 5;
}
message WorldArenaTeamInfoRes{
	optional WorldArenaTeam info = 1;
	repeated WorldArenaReport report = 2;
}
message WorldArenaChangeBattleReq{
	required uint32 from = 1;
	required uint32 to = 2;
}
message WorldArenaStartRes{
	required string reportId = 1;//战报id
	optional float selfScore = 2; //左边综合分
	optional float targetScore = 3;//右边综合分
	optional float selfScoreChange = 4;//左边分值变化
	optional float targeScoreChange = 5;//右边分值变化
	optional string selfName = 6;//左边队伍 名
	optional string targetName = 7;//右边队伍名
	optional uint32 win = 8;//是否胜利
}
message WorldArenaRankRes{
	message Info{
		required PlayerBaseInfo m = 1;
		required uint32 rank = 2;
		required uint32 score = 3;
	}
	repeated Info info = 1;
	optional uint32 my = 2;
}
message WorldArenaMemInfo{
	message Battle{
			optional uint32 npc = 1;
			optional uint64 ability = 2;
			optional uint64 heroId = 3;
			optional uint64 uid = 4;
			optional uint32 level = 5;
			optional uint32 node = 6;
		}
	optional PlayerBaseInfo info = 1;
	optional uint32 nowDist = 2;
	optional uint32 score = 3;
	repeated Battle battle = 4;
}
message WorldArenaInfoRes{
	optional uint32 score = 1;
	optional uint32 time = 2;
}

message WorldArenaWinTopRes{
	message Season{
		optional uint32 mon = 1;
		repeated PlayerBaseInfo info = 2;
	}
	repeated Season data = 1;
}


message WorldArenaOpenboxReq{
	required uint32 kind = 1;
}
message ITWorldArenaMatch{
	repeated WorldArenaMemInfo  mem = 1;
	optional uint64 leader = 2;
}
message ITWorldArenaRankSync{
	required uint32 dist = 1;
	repeated MapKey64Value32 rank = 2;
	repeated PlayerBaseInfo top = 3;
}

//================玩家雕像=======================
message StatueRankRes{
	message StatueInfo{
		optional PlayerBaseInfo pinfo = 1;
		optional uint32 score = 2;
		optional uint32 rank  = 3;
		optional uint32 stamp = 4;
	}
	repeated StatueInfo ranks = 1;
	optional uint32 myrank = 2;
	optional uint32 mylastrank = 3;
	optional bool islastreward = 4;
}
message StatueGetrewardReq{
	optional uint32 rank = 1;
}
message StatueWorshipReq{
	optional uint32 rank = 1;
	optional uint32 costkind = 2;
	optional uint32 times = 3;
}
message StatueWorshipRes{
	optional uint32 count = 1;
	optional uint32 allcount = 2;
	optional uint32 myscore = 3;
}
message StatueWorshipInfoRes{
	optional uint32 count = 1;
	optional uint32 allcount = 2;
	optional uint32 myscore = 3;
}
message StatueModelInfoRes{
	repeated PlayerBaseInfo models = 1;
}
//[NULL]
message ITStatueUpdateScoreReq{
	optional PlayerBaseInfo pinfo = 1;
	optional uint32	score = 2;
	optional uint32 dist  = 3;
}
//[NULL]
message ITStatueRewardReq{
	optional uint32 dist = 1;
	optional uint64 playerid = 2;
	optional uint32 rewardrank = 3;
}

message HorseTujianInfoRes {
	message HorseTujianInfo {
		optional uint32 id = 1;
		optional uint32 star = 2;
		optional uint32 zhuru = 3;
	}
	optional uint32 horseCnt = 1;
	optional uint32 tujianStar = 2;
	optional uint32 huoliVal = 3;
	repeated HorseTujianInfo info = 4;
	optional FightProp prop = 5;
	optional uint64 totalAbility = 6;
}

message HorseTujianJihuoReq {
	optional uint32 id = 1;
}

message HorseTujianZhuruReq {
	optional uint32 id = 2;
}

message HorseTujianHuoliNotify {
	optional uint32 huoli = 1;
}

message HistoryWorldArena {
	repeated PlayerBaseInfo info = 1;
}

message HistoryFamilyGauntlet {
	required uint32 level = 1;		// 难度
	required uint64 familyId = 2;	// 公会ID
	required string familyName = 3;	// 公会名称
	required bool succeeded = 4;	// 完成
	optional uint32 stage = 5;		// 阶段
}

message HistoryRes {
	optional HistoryWorldArena wa = 1;
	optional HistoryFamilyGauntlet fg = 2;
}

//==阵营战============================
message ZhenYingInfoRes{
	message SignInfo{ //一天的签到情况
		optional uint32 date = 1; //当天的日期
		repeated MapKey32Value32 info = 2;//当天签到的情况 key 为签到项 value 0 未签到 1 可签到 2 已签到
	}
	optional uint32 zhenying = 1; //个人阵营
	optional uint32 score = 2; //个人积分
	repeated MapKey32Value32 allScore = 3; //大区阵营积分
	repeated SignInfo sign = 4;//个人签到详情 每天一个
	repeated uint32 signReward = 5; // 个人签到奖励已领取的
	repeated uint32 scoreReward = 6; //个人积分以领取的
	optional uint32 signTime = 7; //个人签到次数
	repeated MineSweepShopInfo shopBuy = 8; //商店购买
	optional uint32 endReward = 9; //阵营胜负奖励
}

message ZhenYingChoiceReq{
	required uint32 zhenying = 1;
}

message ZhenYingSignReq{
	required uint32 time = 1;
	required uint32 kind = 2;
	
}

message ZhenYingSignRewardReq{
	required uint32 kind = 1;
}

message ZhenYingShopBuyReq{
	required uint32 id = 1;
	required uint32 count = 2;
}

message ZhenYingScoreRewardReq{
	required uint32 score = 1;
}

message ZhenYingRankInfoRes{
	message Rank{
		required PlayerBaseInfo p = 1;
		required uint32 score = 2;
	}
	repeated Rank info = 1;
	optional uint32 myscore = 2;
}
//===============资源大亨=====================
message StaticRichmanTimeModel {
	optional uint32 id = 1;
	optional uint32 version = 2;
	optional string startTm = 3;
	optional string endTm = 4;
	optional uint32 openTm = 5;
	optional bool isCross = 6;
	optional string rewardSTm = 7;
	optional string rewardETm = 8;
}
message SundryStaticRichmanTime {
	repeated StaticRichmanTimeModel all = 1;
}

message StaticRichmanConfigModel {
	optional uint32 id = 1; 
	optional uint32 version = 2; 
	optional string name = 3;
	optional uint32 resourceType = 4;
	optional uint32 orderNum = 5;
	optional uint32 doorScore = 6;
	optional uint32 superDoorScore = 7;
	optional uint32 rate = 8;
	optional uint32 scoreRate = 9;
}
message SundryStaticRichmanConfig {
	repeated StaticRichmanConfigModel all = 1;
}

message StaticRichmanRewardModel {
	optional uint32 id = 1; 
	optional uint32 version = 2; 
	optional uint32 resourceType = 3;
	optional uint32 hourType = 4;
	optional string rank = 5;
	optional string commonDrop = 6;
	optional string superDrop = 7;
}
message SundryStaticRichmanReward {
	repeated StaticRichmanRewardModel all = 1;
}

message StaticRichmanScoreModel {
	optional uint32 id = 1; 
	optional uint32 version = 2; 
	optional uint32 doorScore = 3;
	optional string commonDrop = 4;
}
message SundryStaticRichmanScore {
	repeated StaticRichmanScoreModel all = 1;
}

message StaticRichmanShopModel {
	optional uint32 id = 1; 
	optional uint32 version = 2; 
	optional uint32 kind = 3;
	optional string item = 4;
	optional string cost = 5;
	optional uint32 limitType = 6;
	optional uint32 limit = 7;
	optional string kindNameS = 8;
}
message SundryStaticRichmanShop {
	repeated StaticRichmanShopModel all = 1;
}
message RichmanInfoReq{
}
message RichmanInfoRes{	
	repeated MapKey32Value32 scoreReward = 1; 
	message rankInfo{
		optional uint32 sType = 1;
		optional uint32 hour = 2;
		optional uint32 status = 3;
	}
	repeated rankInfo rankReward = 2;
	optional uint32 mineScore = 3;
	optional uint32 mineRank = 4;
}
message RichmanShopInfoReq{
}

message RichmanShopInfoRes{
	repeated MapKey32Value32 buyCount = 1;
}

message RichmanRankInfoReq{
	optional uint32 sType = 1;
	optional uint32 hour = 2;
	optional uint32 rankMin = 3;
	optional uint32 rankMax = 4;
}
message RichmanRankInfoRes{	
	optional uint32 sType = 1;
	optional uint32 hour = 2;
	repeated rankPlayer rankInfo = 3; 
	message rankPlayer{
		optional uint64 id = 1;
		optional string pName = 2;
		optional uint32 pDis = 3;
		optional uint32 score = 4;
		optional uint32 rank = 5;
		optional string Opname = 6;
		optional uint32 MilitaryRank = 7;
	}
	optional uint32 mineScore = 4;
	optional uint32 mineRank = 5;
}
message RichmanShopBuyReq{
	optional uint32 id = 1;
	optional uint32 num = 2;
}
message RichmanShopBuyRes{
	optional uint32 id = 1;
	optional uint32 buyNum = 2;
}
message RichmanScoreRewardReq{
	optional uint32 id = 1;
}
message RichmanScoreRewardRes{
	optional bool status = 1;
}
message RichmanRankRewardReq{
	optional uint32 sType = 1;
	optional uint32 hour = 2;
}
message RichmanRankRewardRes{
	optional uint32 sType = 1;
	optional uint32 hour = 2;
	optional uint32 rankId = 3;
	optional uint32 rank = 4;
	optional uint32 score = 5;
}


// 巅峰对决

//海选
message WorldCompFirstInitRankReq {
	optional uint32 start = 1;
	optional uint32 end = 2;
}

message WorldCompFirstInitRankRes {
	repeated PlayerBaseInfo player = 1;
	optional uint32 myRank = 2;
	optional uint32 totalPlayerCount = 3;
}

//小组赛
message WorldCompTeamRankReq {
	optional uint32 team = 1;
	optional uint32 start = 2;
	optional uint32 end = 3;
}

message WorldCompTeamRankInfo {
	optional PlayerBaseInfo info = 1;
	optional uint32 score = 2;
}

message WorldCompTeamRankRes {
	repeated WorldCompTeamRankInfo player = 1;
	optional uint32 myRank = 2;
	optional uint32 totalPlayerCount = 3;
}

//刷新小组对手
message WorldCompTeamRefreshRes {
	repeated PlayerBaseInfo player = 1;
}

//pk
message WorldCompTeamFightReq {
	optional uint64 playerid = 1;
}

message WorldCompTeamFightRes {
	required bool isWin = 1;			//挑战结果
	optional uint32 myScore = 2;		//累计积分
	required string reportId = 3;		//战报Id
	optional uint32 myRank = 4;
}

message WorldCompTeamInfoRes {
	optional uint32 restCount = 1;
	optional bool isGetReward = 2;
	optional uint32 team = 3;
	optional uint32 todayRank = 4;
	optional uint32 score = 5;
	repeated PlayerBaseInfo player = 6;
}

message WorldCompRecordRes{
	message MyRecord {
		optional uint32 stamp = 1;
		optional uint32 session = 2;
		optional uint32 rank = 3;
	}
	repeated MyRecord record = 1;   //我的战绩
}

//总决赛开面板信息
message WorldCompFinalPanelRes {
	optional uint32 restDianzan = 1;
	optional bool isGetTaotaiReward = 2;
	optional bool isGetTaotaiDistReward = 3;
	optional uint32 taotaiRank = 4;
	optional uint32 taotaiDistRank = 5;
	optional uint32 nextFightTm = 6;
	optional bool roundIsEnd = 7;  //第三条战报出来 为结束 true
	optional uint32 taotaiPhase = 8;
	optional uint32 headerPos = 9;  // 1 or  2  方便显示拉取信息
	optional uint32 dzRwdCanGetCount = 10;
}

message WorldCompFinalRoundNotify {
	optional uint32 nextFightTm = 1;
	optional bool roundIsEnd = 2;  //第三条战报出来 为结束 true
	optional uint32 taotaiStatus = 3;	
}

message WorldCompFinalSimpleNodeInfoReq {
	optional uint32 headerPos = 1; //1 上半区 2 下半区　3 总决赛 
}

message WorldCompFinalSimpleNodeInfoRes {
	optional uint32 headerPos = 1; //1 上半区 2 下半区　3 总决赛 
	repeated WorldCompFinalRound round = 2;
	repeated uint64 threeWinner = 3;
}

enum WC_TAOTAI_STATUS{
	WC_NOT_START			= 0;    //未开始
	WC_GROUP_32				= 1;	//小组32强赛
	WC_GROUP_16				= 2;	//小组16强
	WC_GROUP_8				= 3;	//小组8强
	WC_GROUP_4				= 4;	//小组4强
	WC_GROUP_2				= 5;	//小组2强
	WC_GROUP_END			= 6;	//小组赛终了
	WC_FINALS_2				= 7;	//巅峰之战2强
	WC_FINALS_1				= 8;	//巅峰之战2强
	WC_FINALS_END			= 9;	//巅峰赛终了
} 

//拉取总决赛总图
message worldCompFinalInfoReq {
	optional uint32 headerPos = 1; //1 上半区 2 下半区　3 总决赛 
}

message WorldCompFinalInfoRes {
	message SimplePlayerInfo {
		optional uint64 id = 1;
		optional uint32 dist = 2;
		optional string opName = 3;
		optional string name = 4;
		optional uint32 militaryRank = 5;
		optional uint32 npcId = 6;
	}
	optional uint32 headerPos = 1; //1 上半区 2 下半区　3 总决赛 
	repeated SimplePlayerInfo info = 2;
	repeated WorldCompFinalRound round = 3;
	optional uint32 taotaiPhase = 4; // 8轮
	repeated PlayerBaseInfo finalPlayer = 5; //总决赛
	repeated uint64 threeWinner = 6;
}

message WorldCompFinalRound {
	optional uint32 nodeId = 1;			
	optional uint32 winnerPos = 2;    
}

//每场对决察看
message WorldCompNodeInfoReq {
	optional uint32 headerPos = 1;
	optional uint32 nodeId = 2; 
}


message WorldCompNodeInfoRes {
	message PlayerInfo {
		optional PlayerBaseInfo info = 1;
		optional uint32 score = 2;
		optional uint32 totalDianzan = 3;
	}
	message Report {
		optional string reportId = 1;
		optional uint64 winId = 2;
		optional uint32 fightTm = 3;
	}
	repeated PlayerInfo player = 1;
	repeated Report report = 2;
}

//点赞
message WorldCompDianZanReq {
	optional uint64 id = 1;
	optional uint32 nodeId = 2;
	optional uint32 headerPos = 3;
}

//荣耀殿堂
message WorldCompHonorHallReq {
	required uint32 caNum = 1;
}

message WorldCompHonorHallRes {
	message PlayerInfo {
		required PlayerBaseInfo baseInfo 	= 1;	//基础信息
		optional uint32 rank			    = 2;	//排名
	}
	optional uint32 caNum				= 1;	//届数
	repeated PlayerInfo infos 			= 2;	//玩家信息
	optional uint32 startStamp			= 3;	//开始时间
	optional uint32 latestCaNum			= 4;	//最新届数
}


//点赞日志
message WorldCompDianZanLogRes {
	message Log {
		optional uint32 taotaiPhase = 1;
		optional PlayerBaseInfo info = 2;
		optional uint32 stamp = 3;
		optional uint32 rewardStat = 4; // 1 未领取 2 不能领取 3 已领取
		optional uint32 headerPos = 5;
		optional uint32 nodeId = 6;
		optional uint32 winStat = 7;  // 1 未决出胜负 2 赢  3  输 
		optional uint32 id = 8;
	}
	repeated Log log = 1;
}

//海选结果通知世界服
//[NULL]
message ITWcHaixuanEndToWorldNotify {
	message playerInfo {
		optional PlayerBaseInfo info = 1;
		optional uint32 nowDist = 2;
	}
	repeated playerInfo player = 1;
}



//[NULL]
message ITWcTaotaiDianzanRes {
	optional uint64 playerId = 1;
	optional PlayerBaseInfo target = 2;
	optional uint32 taotaiPhase = 3;
	optional uint32 headerPos = 4;
	optional uint32 nodeId = 5;
	optional uint32 dist = 6;
}

message WorldCompTaotaiDistRankRes {
	message distInfo {
		optional uint32 dist = 1;
		optional uint32 rank = 2;
	}
	repeated distInfo  info = 1;
}

message WorldCompGetDianzanRewardReq {
	optional uint32 id = 1;
}

//[NULL]
message ITWcFinalFuhuoNotify {
	repeated uint64 fhPlayer = 1;
	optional uint32 dist = 2;
}

//============英雄进化==============
//英雄进化req
message HeroEvolveReq{
	required uint64 hero = 1;		//英雄id
	required uint32 chooseCostType = 2;		//选择的消耗类型（1:对应static_tupo表中的cost_hero字段，实际消耗的是道具； 2：对应static_tupo表中的choose_cost_2字段，实际消耗的是英雄）
}
//英雄进化res
message HeroEvolveRes{
	optional bool result = 1;
}
//激活原力节点req
message ActivateStarForceNodeReq{
	required uint64 hero = 1;		//英雄id
	required uint32 nodeId = 2;		//激活的原力ID（对应static_evolve_node表中的id字段，而不是node字段）
}
//激活原力节点res
message ActivateStarForceNodeRes{
	repeated uint32 activeNodeIds = 1; //已经激活的原力id(用于前端更新节点的激活状态)
}

//原力属性同步到前端
message forcePropNotify {
	optional FightProp totalProp = 1; //已激活星力节点总加成属性
}
