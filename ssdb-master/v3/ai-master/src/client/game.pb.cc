// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class HeartBeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeat> {
} _HeartBeat_default_instance_;
class ResStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResStatus> {
} _ResStatus_default_instance_;
class ProtocolStatusResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtocolStatusRes> {
} _ProtocolStatusRes_default_instance_;
class LoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReq> {
} _LoginReq_default_instance_;
class LoginResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRes> {
} _LoginRes_default_instance_;
class CombatMatchReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMatchReq> {
} _CombatMatchReq_default_instance_;
class CombatMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMember> {
} _CombatMember_default_instance_;
class MapItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapItem> {
} _MapItem_default_instance_;
class CombatMatchNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMatchNotify> {
} _CombatMatchNotify_default_instance_;
class CombatReadyReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatReadyReq> {
} _CombatReadyReq_default_instance_;
class CombatStartNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatStartNotify> {
} _CombatStartNotify_default_instance_;
class CombatMemberDeadReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMemberDeadReq> {
} _CombatMemberDeadReq_default_instance_;
class CombatMemberDeadNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMemberDeadNotify> {
} _CombatMemberDeadNotify_default_instance_;
class CombatMemberOfflineNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMemberOfflineNotify> {
} _CombatMemberOfflineNotify_default_instance_;
class CombatFinishNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatFinishNotify> {
} _CombatFinishNotify_default_instance_;
class CombatDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatData> {
} _CombatData_default_instance_;
class CombatDataSyncDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatDataSync> {
} _CombatDataSync_default_instance_;
class CombatMembersSyncDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMembersSync> {
} _CombatMembersSync_default_instance_;
class PositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Position> {
} _Position_default_instance_;
class PositionPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PositionPair> {
} _PositionPair_default_instance_;
class CombatPullSyncDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatPullSync> {
} _CombatPullSync_default_instance_;
class CombatMemberLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatMemberLeave> {
} _CombatMemberLeave_default_instance_;
class CombatPickUpItemReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatPickUpItemReq> {
} _CombatPickUpItemReq_default_instance_;
class CombatPickUpItemResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatPickUpItemRes> {
} _CombatPickUpItemRes_default_instance_;
class CombatSetPositionResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CombatSetPositionRes> {
} _CombatSetPositionRes_default_instance_;

namespace protobuf_game_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResStatus, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResStatus, modelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResStatus, count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStatusRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStatusRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStatusRes, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStatusRes, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolStatusRes, res_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, district_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, extra_),
  0,
  1,
  4,
  5,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, score_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchReq, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchReq, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, dead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, grade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, scoregain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMember, points_),
  2,
  0,
  3,
  4,
  6,
  7,
  5,
  1,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapItem, itemid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, combatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMatchNotify, items_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReadyReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStartNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatStartNotify, nowtime_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadReq, deadreason_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadNotify, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberDeadNotify, deadreason_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberOfflineNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberOfflineNotify, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatFinishNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatFinishNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatFinishNotify, combatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatFinishNotify, members_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatData, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatData, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatData, direction_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatDataSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatDataSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatDataSync, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatDataSync, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatDataSync, robotid_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMembersSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMembersSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMembersSync, combatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMembersSync, members_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, direction_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionPair, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionPair, to_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, sourceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPullSync, target_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatMemberLeave, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemReq, robotid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatPickUpItemRes, robotid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatSetPositionRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatSetPositionRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatSetPositionRes, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatSetPositionRes, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatSetPositionRes, z_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 4, sizeof(HeartBeat)},
  { 4, 11, sizeof(ResStatus)},
  { 14, 21, sizeof(ProtocolStatusRes)},
  { 24, 35, sizeof(LoginReq)},
  { 42, 49, sizeof(LoginRes)},
  { 52, 58, sizeof(CombatMatchReq)},
  { 60, 76, sizeof(CombatMember)},
  { 88, 95, sizeof(MapItem)},
  { 98, 106, sizeof(CombatMatchNotify)},
  { 110, 114, sizeof(CombatReadyReq)},
  { 114, 119, sizeof(CombatStartNotify)},
  { 120, 125, sizeof(CombatMemberDeadReq)},
  { 126, 132, sizeof(CombatMemberDeadNotify)},
  { 134, 139, sizeof(CombatMemberOfflineNotify)},
  { 140, 146, sizeof(CombatFinishNotify)},
  { 148, 155, sizeof(CombatData)},
  { 158, 165, sizeof(CombatDataSync)},
  { 168, 174, sizeof(CombatMembersSync)},
  { 176, 183, sizeof(Position)},
  { 186, 192, sizeof(PositionPair)},
  { 194, 202, sizeof(CombatPullSync)},
  { 206, 211, sizeof(CombatMemberLeave)},
  { 212, 220, sizeof(CombatPickUpItemReq)},
  { 224, 232, sizeof(CombatPickUpItemRes)},
  { 236, 243, sizeof(CombatSetPositionRes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtocolStatusRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMatchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMatchNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMemberDeadReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMemberDeadNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMemberOfflineNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatFinishNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatDataSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMembersSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PositionPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatPullSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatMemberLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatPickUpItemReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatPickUpItemRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CombatSetPositionRes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace

void TableStruct::Shutdown() {
  _HeartBeat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ResStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtocolStatusRes_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LoginReq_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LoginRes_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CombatMatchReq_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CombatMember_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MapItem_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CombatMatchNotify_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CombatReadyReq_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CombatStartNotify_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CombatMemberDeadReq_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CombatMemberDeadNotify_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CombatMemberOfflineNotify_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CombatFinishNotify_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CombatData_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CombatDataSync_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CombatMembersSync_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Position_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _PositionPair_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CombatPullSync_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CombatMemberLeave_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CombatPickUpItemReq_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CombatPickUpItemRes_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CombatSetPositionRes_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HeartBeat_default_instance_.DefaultConstruct();
  _ResStatus_default_instance_.DefaultConstruct();
  _ProtocolStatusRes_default_instance_.DefaultConstruct();
  _LoginReq_default_instance_.DefaultConstruct();
  _LoginRes_default_instance_.DefaultConstruct();
  _CombatMatchReq_default_instance_.DefaultConstruct();
  _CombatMember_default_instance_.DefaultConstruct();
  _MapItem_default_instance_.DefaultConstruct();
  _CombatMatchNotify_default_instance_.DefaultConstruct();
  _CombatReadyReq_default_instance_.DefaultConstruct();
  _CombatStartNotify_default_instance_.DefaultConstruct();
  _CombatMemberDeadReq_default_instance_.DefaultConstruct();
  _CombatMemberDeadNotify_default_instance_.DefaultConstruct();
  _CombatMemberOfflineNotify_default_instance_.DefaultConstruct();
  _CombatFinishNotify_default_instance_.DefaultConstruct();
  _CombatData_default_instance_.DefaultConstruct();
  _CombatDataSync_default_instance_.DefaultConstruct();
  _CombatMembersSync_default_instance_.DefaultConstruct();
  _Position_default_instance_.DefaultConstruct();
  _PositionPair_default_instance_.DefaultConstruct();
  _CombatPullSync_default_instance_.DefaultConstruct();
  _CombatMemberLeave_default_instance_.DefaultConstruct();
  _CombatPickUpItemReq_default_instance_.DefaultConstruct();
  _CombatPickUpItemRes_default_instance_.DefaultConstruct();
  _CombatSetPositionRes_default_instance_.DefaultConstruct();
  _ProtocolStatusRes_default_instance_.get_mutable()->res_ = const_cast< ::proto::ResStatus*>(
      ::proto::ResStatus::internal_default_instance());
  _CombatDataSync_default_instance_.get_mutable()->data_ = const_cast< ::proto::CombatData*>(
      ::proto::CombatData::internal_default_instance());
  _PositionPair_default_instance_.get_mutable()->from_ = const_cast< ::proto::Position*>(
      ::proto::Position::internal_default_instance());
  _PositionPair_default_instance_.get_mutable()->to_ = const_cast< ::proto::Position*>(
      ::proto::Position::internal_default_instance());
  _CombatPullSync_default_instance_.get_mutable()->source_ = const_cast< ::proto::PositionPair*>(
      ::proto::PositionPair::internal_default_instance());
  _CombatPullSync_default_instance_.get_mutable()->target_ = const_cast< ::proto::PositionPair*>(
      ::proto::PositionPair::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ngame.proto\022\005proto\"\013\n\tHeartBeat\"9\n\tResS"
      "tatus\022\014\n\004kind\030\001 \001(\r\022\017\n\007modelId\030\002 \001(\r\022\r\n\005"
      "count\030\003 \001(\r\"P\n\021ProtocolStatusRes\022\013\n\003cmd\030"
      "\001 \001(\r\022\017\n\007errCode\030\002 \001(\r\022\035\n\003res\030\003 \001(\0132\020.pr"
      "oto.ResStatus\"v\n\010LoginReq\022\r\n\005token\030\001 \002(\t"
      "\022\017\n\007account\030\002 \002(\t\022\020\n\010district\030\003 \002(\r\022\017\n\007v"
      "ersion\030\004 \002(\r\022\014\n\004time\030\006 \001(\r\022\n\n\002ip\030\n \001(\t\022\r"
      "\n\005extra\030\025 \001(\014\"3\n\010LoginRes\022\n\n\002id\030\001 \002(\004\022\014\n"
      "\004name\030\002 \002(\t\022\r\n\005score\030\003 \002(\004\".\n\016CombatMatc"
      "hReq\022\016\n\006roleId\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\"\302\001\n\014C"
      "ombatMember\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\r\n"
      "\005ready\030\003 \002(\010\022\014\n\004dead\030\004 \002(\010\022\016\n\006roleId\030\005 \002"
      "(\r\022\020\n\010position\030\006 \002(\005\022\r\n\005robot\030\007 \002(\010\022\r\n\005g"
      "rade\030\010 \002(\t\022\021\n\tscoreGain\030\t \002(\r\022\r\n\005score\030\n"
      " \002(\004\022\t\n\001z\030\013 \002(\005\022\016\n\006points\030\014 \002(\005\"/\n\007MapIt"
      "em\022\t\n\001z\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\016\n\006itemId\030\003 \002(\005"
      "\"x\n\021CombatMatchNotify\022\020\n\010combatId\030\001 \002(\r\022"
      "$\n\007members\030\002 \003(\0132\023.proto.CombatMember\022\014\n"
      "\004maps\030\003 \003(\r\022\035\n\005items\030\004 \003(\0132\016.proto.MapIt"
      "em\"\020\n\016CombatReadyReq\"$\n\021CombatStartNotif"
      "y\022\017\n\007nowTime\030\001 \002(\004\")\n\023CombatMemberDeadRe"
      "q\022\022\n\ndeadReason\030\001 \002(\r\"8\n\026CombatMemberDea"
      "dNotify\022\n\n\002id\030\001 \002(\004\022\022\n\ndeadReason\030\002 \002(\r\""
      "\'\n\031CombatMemberOfflineNotify\022\n\n\002id\030\001 \002(\004"
      "\"L\n\022CombatFinishNotify\022\020\n\010combatId\030\001 \002(\r"
      "\022$\n\007members\030\002 \003(\0132\023.proto.CombatMember\"5"
      "\n\nCombatData\022\t\n\001x\030\001 \002(\005\022\t\n\001z\030\002 \002(\005\022\021\n\tdi"
      "rection\030\003 \002(\005\"N\n\016CombatDataSync\022\n\n\002id\030\001 "
      "\002(\004\022\037\n\004data\030\002 \002(\0132\021.proto.CombatData\022\017\n\007"
      "robotId\030\003 \002(\004\"K\n\021CombatMembersSync\022\020\n\010co"
      "mbatId\030\001 \002(\r\022$\n\007members\030\002 \003(\0132\023.proto.Co"
      "mbatMember\"3\n\010Position\022\t\n\001x\030\001 \002(\005\022\t\n\001z\030\002"
      " \002(\005\022\021\n\tdirection\030\003 \002(\005\"J\n\014PositionPair\022"
      "\035\n\004from\030\001 \002(\0132\017.proto.Position\022\033\n\002to\030\002 \002"
      "(\0132\017.proto.Position\"~\n\016CombatPullSync\022\020\n"
      "\010sourceId\030\001 \002(\004\022\020\n\010targetId\030\002 \002(\004\022#\n\006sou"
      "rce\030\003 \002(\0132\023.proto.PositionPair\022#\n\006target"
      "\030\004 \002(\0132\023.proto.PositionPair\"\037\n\021CombatMem"
      "berLeave\022\n\n\002id\030\001 \002(\004\"H\n\023CombatPickUpItem"
      "Req\022\n\n\002id\030\001 \002(\004\022\t\n\001x\030\002 \002(\005\022\t\n\001z\030\003 \002(\005\022\017\n"
      "\007robotId\030\004 \002(\004\"H\n\023CombatPickUpItemRes\022\n\n"
      "\002id\030\001 \002(\004\022\t\n\001x\030\002 \002(\005\022\t\n\001z\030\003 \002(\005\022\017\n\007robot"
      "Id\030\004 \002(\004\"8\n\024CombatSetPositionRes\022\n\n\002id\030\001"
      " \002(\004\022\t\n\001x\030\002 \002(\005\022\t\n\001z\030\003 \002(\005*\245\003\n\003CMD\022\010\n\004NO"
      "NE\020\000\022\016\n\nHEART_BEAT\020\001\022\023\n\017PROTOCOL_STATUS\020"
      "\002\022\010\n\004TEST\020\003\022\n\n\005LOGIN\020\321\017\022\022\n\rCREATE_PLAYER"
      "\020\322\017\022\021\n\014COMBAT_MATCH\020\271\027\022\030\n\023COMBAT_MATCH_N"
      "OTIFY\020\272\027\022\021\n\014COMBAT_READY\020\273\027\022\030\n\023COMBAT_ST"
      "ART_NOTIFY\020\274\027\022\027\n\022COMBAT_MEMBER_DEAD\020\275\027\022!"
      "\n\034COMBAT_MEMBER_OFFLINE_NOTIFY\020\276\027\022\031\n\024COM"
      "BAT_FINISH_NOTIFY\020\277\027\022\025\n\020COMBAT_DATA_SYNC"
      "\020\300\027\022\030\n\023COMBAT_MEMBERS_SYNC\020\301\027\022\025\n\020COMBAT_"
      "PULL_SYNC\020\302\027\022\030\n\023COMBAT_MEMBER_LEAVE\020\303\027\022\030"
      "\n\023COMBAT_PICK_UP_ITEM\020\304\027\022\030\n\023COMBAT_SET_P"
      "OSITION\020\305\027*,\n\002EC\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\022\023\n\017V"
      "ERSION_UNMATCH\020\002*\024\n\007VERSION\022\t\n\005PROTO\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_game_2eproto

const ::google::protobuf::EnumDescriptor* CMD_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[0];
}
bool CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 2001:
    case 2002:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3011:
    case 3012:
    case 3013:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EC_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[1];
}
bool EC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VERSION_descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_enum_descriptors[2];
}
bool VERSION_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.HeartBeat)
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:proto.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[0].descriptor;
}

const HeartBeat& HeartBeat::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HeartBeat)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HeartBeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResStatus::kKindFieldNumber;
const int ResStatus::kModelIdFieldNumber;
const int ResStatus::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResStatus::ResStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ResStatus)
}
ResStatus::ResStatus(const ResStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&kind_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.ResStatus)
}

void ResStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&kind_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&kind_) + sizeof(count_));
}

ResStatus::~ResStatus() {
  // @@protoc_insertion_point(destructor:proto.ResStatus)
  SharedDtor();
}

void ResStatus::SharedDtor() {
}

void ResStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResStatus::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[1].descriptor;
}

const ResStatus& ResStatus::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResStatus* ResStatus::New(::google::protobuf::Arena* arena) const {
  ResStatus* n = new ResStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ResStatus)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&kind_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&kind_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ResStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_kind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modelId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_modelid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ResStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ResStatus)
  return false;
#undef DO_
}

void ResStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ResStatus)
  // optional uint32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kind(), output);
  }

  // optional uint32 modelId = 2;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modelid(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ResStatus)
}

::google::protobuf::uint8* ResStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ResStatus)
  // optional uint32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kind(), target);
  }

  // optional uint32 modelId = 2;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modelid(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ResStatus)
  return target;
}

size_t ResStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ResStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kind());
    }

    // optional uint32 modelId = 2;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ResStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ResStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ResStatus)
    MergeFrom(*source);
  }
}

void ResStatus::MergeFrom(const ResStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ResStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void ResStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ResStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResStatus::CopyFrom(const ResStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ResStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResStatus::IsInitialized() const {
  return true;
}

void ResStatus::Swap(ResStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResStatus::InternalSwap(ResStatus* other) {
  std::swap(kind_, other->kind_);
  std::swap(modelid_, other->modelid_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResStatus::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResStatus

// optional uint32 kind = 1;
bool ResStatus::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResStatus::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
void ResStatus::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResStatus::clear_kind() {
  kind_ = 0u;
  clear_has_kind();
}
::google::protobuf::uint32 ResStatus::kind() const {
  // @@protoc_insertion_point(field_get:proto.ResStatus.kind)
  return kind_;
}
void ResStatus::set_kind(::google::protobuf::uint32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:proto.ResStatus.kind)
}

// optional uint32 modelId = 2;
bool ResStatus::has_modelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResStatus::set_has_modelid() {
  _has_bits_[0] |= 0x00000002u;
}
void ResStatus::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResStatus::clear_modelid() {
  modelid_ = 0u;
  clear_has_modelid();
}
::google::protobuf::uint32 ResStatus::modelid() const {
  // @@protoc_insertion_point(field_get:proto.ResStatus.modelId)
  return modelid_;
}
void ResStatus::set_modelid(::google::protobuf::uint32 value) {
  set_has_modelid();
  modelid_ = value;
  // @@protoc_insertion_point(field_set:proto.ResStatus.modelId)
}

// optional uint32 count = 3;
bool ResStatus::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResStatus::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void ResStatus::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResStatus::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 ResStatus::count() const {
  // @@protoc_insertion_point(field_get:proto.ResStatus.count)
  return count_;
}
void ResStatus::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.ResStatus.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolStatusRes::kCmdFieldNumber;
const int ProtocolStatusRes::kErrCodeFieldNumber;
const int ProtocolStatusRes::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolStatusRes::ProtocolStatusRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ProtocolStatusRes)
}
ProtocolStatusRes::ProtocolStatusRes(const ProtocolStatusRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::proto::ResStatus(*from.res_);
  } else {
    res_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:proto.ProtocolStatusRes)
}

void ProtocolStatusRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&res_, 0, reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&res_) + sizeof(errcode_));
}

ProtocolStatusRes::~ProtocolStatusRes() {
  // @@protoc_insertion_point(destructor:proto.ProtocolStatusRes)
  SharedDtor();
}

void ProtocolStatusRes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void ProtocolStatusRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolStatusRes::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[2].descriptor;
}

const ProtocolStatusRes& ProtocolStatusRes::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtocolStatusRes* ProtocolStatusRes::New(::google::protobuf::Arena* arena) const {
  ProtocolStatusRes* n = new ProtocolStatusRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtocolStatusRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProtocolStatusRes)
  if (has_res()) {
    GOOGLE_DCHECK(res_ != NULL);
    res_->::proto::ResStatus::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(errcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtocolStatusRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ProtocolStatusRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.ResStatus res = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ProtocolStatusRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ProtocolStatusRes)
  return false;
#undef DO_
}

void ProtocolStatusRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ProtocolStatusRes)
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 errCode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }

  // optional .proto.ResStatus res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ProtocolStatusRes)
}

::google::protobuf::uint8* ProtocolStatusRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProtocolStatusRes)
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 errCode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }

  // optional .proto.ResStatus res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->res_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProtocolStatusRes)
  return target;
}

size_t ProtocolStatusRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProtocolStatusRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.ResStatus res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 errCode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolStatusRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ProtocolStatusRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolStatusRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolStatusRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ProtocolStatusRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ProtocolStatusRes)
    MergeFrom(*source);
  }
}

void ProtocolStatusRes::MergeFrom(const ProtocolStatusRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ProtocolStatusRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_res()) {
      mutable_res()->::proto::ResStatus::MergeFrom(from.res());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
}

void ProtocolStatusRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ProtocolStatusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolStatusRes::CopyFrom(const ProtocolStatusRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProtocolStatusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolStatusRes::IsInitialized() const {
  return true;
}

void ProtocolStatusRes::Swap(ProtocolStatusRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolStatusRes::InternalSwap(ProtocolStatusRes* other) {
  std::swap(res_, other->res_);
  std::swap(cmd_, other->cmd_);
  std::swap(errcode_, other->errcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtocolStatusRes::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolStatusRes

// optional uint32 cmd = 1;
bool ProtocolStatusRes::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProtocolStatusRes::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
void ProtocolStatusRes::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProtocolStatusRes::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
::google::protobuf::uint32 ProtocolStatusRes::cmd() const {
  // @@protoc_insertion_point(field_get:proto.ProtocolStatusRes.cmd)
  return cmd_;
}
void ProtocolStatusRes::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:proto.ProtocolStatusRes.cmd)
}

// optional uint32 errCode = 2;
bool ProtocolStatusRes::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProtocolStatusRes::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
void ProtocolStatusRes::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProtocolStatusRes::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
::google::protobuf::uint32 ProtocolStatusRes::errcode() const {
  // @@protoc_insertion_point(field_get:proto.ProtocolStatusRes.errCode)
  return errcode_;
}
void ProtocolStatusRes::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ProtocolStatusRes.errCode)
}

// optional .proto.ResStatus res = 3;
bool ProtocolStatusRes::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProtocolStatusRes::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void ProtocolStatusRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProtocolStatusRes::clear_res() {
  if (res_ != NULL) res_->::proto::ResStatus::Clear();
  clear_has_res();
}
const ::proto::ResStatus& ProtocolStatusRes::res() const {
  // @@protoc_insertion_point(field_get:proto.ProtocolStatusRes.res)
  return res_ != NULL ? *res_
                         : *::proto::ResStatus::internal_default_instance();
}
::proto::ResStatus* ProtocolStatusRes::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::proto::ResStatus;
  }
  // @@protoc_insertion_point(field_mutable:proto.ProtocolStatusRes.res)
  return res_;
}
::proto::ResStatus* ProtocolStatusRes::release_res() {
  // @@protoc_insertion_point(field_release:proto.ProtocolStatusRes.res)
  clear_has_res();
  ::proto::ResStatus* temp = res_;
  res_ = NULL;
  return temp;
}
void ProtocolStatusRes::set_allocated_res(::proto::ResStatus* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ProtocolStatusRes.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kTokenFieldNumber;
const int LoginReq::kAccountFieldNumber;
const int LoginReq::kDistrictFieldNumber;
const int LoginReq::kVersionFieldNumber;
const int LoginReq::kTimeFieldNumber;
const int LoginReq::kIpFieldNumber;
const int LoginReq::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra()) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&district_, &from.district_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&district_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.LoginReq)
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&district_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&district_) + sizeof(time_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:proto.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[3].descriptor;
}

const LoginReq& LoginReq::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LoginReq)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_account()) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_extra()) {
      GOOGLE_DCHECK(!extra_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 112u) {
    ::memset(&district_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&district_) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.LoginReq.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.LoginReq.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 district = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_district();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &district_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.LoginReq.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LoginReq)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // required uint32 district = 3;
  if (has_district()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->district(), output);
  }

  // required uint32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  // optional bytes extra = 21;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LoginReq)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required uint32 district = 3;
  if (has_district()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->district(), target);
  }

  // required uint32 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginReq.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  // optional bytes extra = 21;
  if (has_extra()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LoginReq)
  return target;
}

size_t LoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.LoginReq)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_account()) {
    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_district()) {
    // required uint32 district = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->district());
  }

  if (has_version()) {
    // required uint32 version = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required string token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required string account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required uint32 district = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->district());

    // required uint32 version = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional bytes extra = 21;
    if (has_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }

  }
  // optional uint32 time = 6;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_extra()) {
      set_has_extra();
      extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
    }
    if (from.has_district()) {
      set_district(from.district());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  token_.Swap(&other->token_);
  account_.Swap(&other->account_);
  ip_.Swap(&other->ip_);
  extra_.Swap(&other->extra_);
  std::swap(district_, other->district_);
  std::swap(version_, other->version_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required string token = 1;
bool LoginReq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.token)
  return token_.GetNoArena();
}
void LoginReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginReq.token)
}
#if LANG_CXX11
void LoginReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginReq.token)
}
#endif
void LoginReq::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginReq.token)
}
void LoginReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginReq.token)
}
::std::string* LoginReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:proto.LoginReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:proto.LoginReq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReq.token)
}

// required string account = 2;
bool LoginReq::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginReq::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& LoginReq::account() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.account)
  return account_.GetNoArena();
}
void LoginReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginReq.account)
}
#if LANG_CXX11
void LoginReq::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginReq.account)
}
#endif
void LoginReq::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginReq.account)
}
void LoginReq::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginReq.account)
}
::std::string* LoginReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:proto.LoginReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_account() {
  // @@protoc_insertion_point(field_release:proto.LoginReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReq.account)
}

// required uint32 district = 3;
bool LoginReq::has_district() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginReq::set_has_district() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginReq::clear_has_district() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginReq::clear_district() {
  district_ = 0u;
  clear_has_district();
}
::google::protobuf::uint32 LoginReq::district() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.district)
  return district_;
}
void LoginReq::set_district(::google::protobuf::uint32 value) {
  set_has_district();
  district_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginReq.district)
}

// required uint32 version = 4;
bool LoginReq::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginReq::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 LoginReq::version() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.version)
  return version_;
}
void LoginReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginReq.version)
}

// optional uint32 time = 6;
bool LoginReq::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginReq::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginReq::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginReq::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 LoginReq::time() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.time)
  return time_;
}
void LoginReq::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginReq.time)
}

// optional string ip = 10;
bool LoginReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& LoginReq::ip() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.ip)
  return ip_.GetNoArena();
}
void LoginReq::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginReq.ip)
}
#if LANG_CXX11
void LoginReq::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginReq.ip)
}
#endif
void LoginReq::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginReq.ip)
}
void LoginReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginReq.ip)
}
::std::string* LoginReq::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:proto.LoginReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_ip() {
  // @@protoc_insertion_point(field_release:proto.LoginReq.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReq.ip)
}

// optional bytes extra = 21;
bool LoginReq::has_extra() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginReq::set_has_extra() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginReq::clear_has_extra() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginReq::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra();
}
const ::std::string& LoginReq::extra() const {
  // @@protoc_insertion_point(field_get:proto.LoginReq.extra)
  return extra_.GetNoArena();
}
void LoginReq::set_extra(const ::std::string& value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginReq.extra)
}
#if LANG_CXX11
void LoginReq::set_extra(::std::string&& value) {
  set_has_extra();
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginReq.extra)
}
#endif
void LoginReq::set_extra(const char* value) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginReq.extra)
}
void LoginReq::set_extra(const void* value, size_t size) {
  set_has_extra();
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginReq.extra)
}
::std::string* LoginReq::mutable_extra() {
  set_has_extra();
  // @@protoc_insertion_point(field_mutable:proto.LoginReq.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginReq::release_extra() {
  // @@protoc_insertion_point(field_release:proto.LoginReq.extra)
  clear_has_extra();
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginReq::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    set_has_extra();
  } else {
    clear_has_extra();
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginReq.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRes::kIdFieldNumber;
const int LoginRes::kNameFieldNumber;
const int LoginRes::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRes::LoginRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LoginRes)
}
LoginRes::LoginRes(const LoginRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.LoginRes)
}

void LoginRes::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_) + sizeof(score_));
}

LoginRes::~LoginRes() {
  // @@protoc_insertion_point(destructor:proto.LoginRes)
  SharedDtor();
}

void LoginRes::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRes::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[4].descriptor;
}

const LoginRes& LoginRes::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRes* LoginRes::New(::google::protobuf::Arena* arena) const {
  LoginRes* n = new LoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LoginRes)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.LoginRes.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LoginRes)
  return false;
#undef DO_
}

void LoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LoginRes)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginRes.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LoginRes)
}

::google::protobuf::uint8* LoginRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LoginRes)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.LoginRes.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LoginRes)
  return target;
}

size_t LoginRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.LoginRes)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_score()) {
    // required uint64 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->score());
  }

  return total_size;
}
size_t LoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LoginRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 score = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LoginRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LoginRes)
    MergeFrom(*source);
  }
}

void LoginRes::MergeFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void LoginRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRes::CopyFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LoginRes::Swap(LoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRes::InternalSwap(LoginRes* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRes::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRes

// required uint64 id = 1;
bool LoginRes::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRes::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 LoginRes::id() const {
  // @@protoc_insertion_point(field_get:proto.LoginRes.id)
  return id_;
}
void LoginRes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginRes.id)
}

// required string name = 2;
bool LoginRes::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRes::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRes::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRes::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LoginRes::name() const {
  // @@protoc_insertion_point(field_get:proto.LoginRes.name)
  return name_.GetNoArena();
}
void LoginRes::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LoginRes.name)
}
#if LANG_CXX11
void LoginRes::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LoginRes.name)
}
#endif
void LoginRes::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LoginRes.name)
}
void LoginRes::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LoginRes.name)
}
::std::string* LoginRes::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.LoginRes.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRes::release_name() {
  // @@protoc_insertion_point(field_release:proto.LoginRes.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.LoginRes.name)
}

// required uint64 score = 3;
bool LoginRes::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginRes::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginRes::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginRes::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
::google::protobuf::uint64 LoginRes::score() const {
  // @@protoc_insertion_point(field_get:proto.LoginRes.score)
  return score_;
}
void LoginRes::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.LoginRes.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMatchReq::kRoleIdFieldNumber;
const int CombatMatchReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMatchReq::CombatMatchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMatchReq)
}
CombatMatchReq::CombatMatchReq(const CombatMatchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMatchReq)
}

void CombatMatchReq::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roleid_ = 0u;
}

CombatMatchReq::~CombatMatchReq() {
  // @@protoc_insertion_point(destructor:proto.CombatMatchReq)
  SharedDtor();
}

void CombatMatchReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CombatMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMatchReq::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[5].descriptor;
}

const CombatMatchReq& CombatMatchReq::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMatchReq* CombatMatchReq::New(::google::protobuf::Arena* arena) const {
  CombatMatchReq* n = new CombatMatchReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMatchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMatchReq)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  roleid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMatchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_roleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.CombatMatchReq.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMatchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMatchReq)
  return false;
#undef DO_
}

void CombatMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMatchReq)
  // required uint32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMatchReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMatchReq)
}

::google::protobuf::uint8* CombatMatchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMatchReq)
  // required uint32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMatchReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMatchReq)
  return target;
}

size_t CombatMatchReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatMatchReq)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_roleid()) {
    // required uint32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  return total_size;
}
size_t CombatMatchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMatchReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMatchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMatchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMatchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMatchReq)
    MergeFrom(*source);
  }
}

void CombatMatchReq::MergeFrom(const CombatMatchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
}

void CombatMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMatchReq::CopyFrom(const CombatMatchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CombatMatchReq::Swap(CombatMatchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMatchReq::InternalSwap(CombatMatchReq* other) {
  name_.Swap(&other->name_);
  std::swap(roleid_, other->roleid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMatchReq::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMatchReq

// required uint32 roleId = 1;
bool CombatMatchReq::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatMatchReq::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatMatchReq::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatMatchReq::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
::google::protobuf::uint32 CombatMatchReq::roleid() const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchReq.roleId)
  return roleid_;
}
void CombatMatchReq::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMatchReq.roleId)
}

// required string name = 2;
bool CombatMatchReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMatchReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMatchReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMatchReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CombatMatchReq::name() const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchReq.name)
  return name_.GetNoArena();
}
void CombatMatchReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CombatMatchReq.name)
}
#if LANG_CXX11
void CombatMatchReq::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CombatMatchReq.name)
}
#endif
void CombatMatchReq::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CombatMatchReq.name)
}
void CombatMatchReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CombatMatchReq.name)
}
::std::string* CombatMatchReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.CombatMatchReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CombatMatchReq::release_name() {
  // @@protoc_insertion_point(field_release:proto.CombatMatchReq.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CombatMatchReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.CombatMatchReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMember::kIdFieldNumber;
const int CombatMember::kNameFieldNumber;
const int CombatMember::kReadyFieldNumber;
const int CombatMember::kDeadFieldNumber;
const int CombatMember::kRoleIdFieldNumber;
const int CombatMember::kPositionFieldNumber;
const int CombatMember::kRobotFieldNumber;
const int CombatMember::kGradeFieldNumber;
const int CombatMember::kScoreGainFieldNumber;
const int CombatMember::kScoreFieldNumber;
const int CombatMember::kZFieldNumber;
const int CombatMember::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMember::CombatMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMember)
}
CombatMember::CombatMember(const CombatMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  grade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_grade()) {
    grade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grade_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&id_) + sizeof(points_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatMember)
}

void CombatMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grade_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&id_) + sizeof(points_));
}

CombatMember::~CombatMember() {
  // @@protoc_insertion_point(destructor:proto.CombatMember)
  SharedDtor();
}

void CombatMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grade_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CombatMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMember::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[6].descriptor;
}

const CombatMember& CombatMember::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMember* CombatMember::New(::google::protobuf::Arena* arena) const {
  CombatMember* n = new CombatMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMember)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_grade()) {
      GOOGLE_DCHECK(!grade_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*grade_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&id_) + sizeof(position_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&scoregain_, 0, reinterpret_cast<char*>(&points_) -
      reinterpret_cast<char*>(&scoregain_) + sizeof(points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.CombatMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ready = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ready();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dead = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 roleId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_roleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool robot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_robot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string grade = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grade().data(), this->grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.CombatMember.grade");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 scoreGain = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_scoregain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoregain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 points = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMember)
  return false;
#undef DO_
}

void CombatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMember)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required bool ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ready(), output);
  }

  // required bool dead = 4;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dead(), output);
  }

  // required uint32 roleId = 5;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->roleid(), output);
  }

  // required int32 position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->position(), output);
  }

  // required bool robot = 7;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->robot(), output);
  }

  // required string grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMember.grade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->grade(), output);
  }

  // required uint32 scoreGain = 9;
  if (has_scoregain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scoregain(), output);
  }

  // required uint64 score = 10;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->score(), output);
  }

  // required int32 z = 11;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->z(), output);
  }

  // required int32 points = 12;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMember)
}

::google::protobuf::uint8* CombatMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMember)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required bool ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ready(), target);
  }

  // required bool dead = 4;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dead(), target);
  }

  // required uint32 roleId = 5;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->roleid(), target);
  }

  // required int32 position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->position(), target);
  }

  // required bool robot = 7;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->robot(), target);
  }

  // required string grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.CombatMember.grade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->grade(), target);
  }

  // required uint32 scoreGain = 9;
  if (has_scoregain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scoregain(), target);
  }

  // required uint64 score = 10;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->score(), target);
  }

  // required int32 z = 11;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->z(), target);
  }

  // required int32 points = 12;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMember)
  return target;
}

size_t CombatMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatMember)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_grade()) {
    // required string grade = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grade());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_ready()) {
    // required bool ready = 3;
    total_size += 1 + 1;
  }

  if (has_dead()) {
    // required bool dead = 4;
    total_size += 1 + 1;
  }

  if (has_robot()) {
    // required bool robot = 7;
    total_size += 1 + 1;
  }

  if (has_roleid()) {
    // required uint32 roleId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  if (has_position()) {
    // required int32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  if (has_scoregain()) {
    // required uint32 scoreGain = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scoregain());
  }

  if (has_score()) {
    // required uint64 score = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->score());
  }

  if (has_z()) {
    // required int32 z = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_points()) {
    // required int32 points = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->points());
  }

  return total_size;
}
size_t CombatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string grade = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grade());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required bool ready = 3;
    total_size += 1 + 1;

    // required bool dead = 4;
    total_size += 1 + 1;

    // required bool robot = 7;
    total_size += 1 + 1;

    // required uint32 roleId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());

    // required int32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());

    // required uint32 scoreGain = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scoregain());

    // required uint64 score = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->score());

    // required int32 z = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required int32 points = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->points());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMember)
    MergeFrom(*source);
  }
}

void CombatMember::MergeFrom(const CombatMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_grade()) {
      set_has_grade();
      grade_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grade_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & 3840u) {
    if (from.has_scoregain()) {
      set_scoregain(from.scoregain());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
}

void CombatMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMember::CopyFrom(const CombatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void CombatMember::Swap(CombatMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMember::InternalSwap(CombatMember* other) {
  name_.Swap(&other->name_);
  grade_.Swap(&other->grade_);
  std::swap(id_, other->id_);
  std::swap(ready_, other->ready_);
  std::swap(dead_, other->dead_);
  std::swap(robot_, other->robot_);
  std::swap(roleid_, other->roleid_);
  std::swap(position_, other->position_);
  std::swap(scoregain_, other->scoregain_);
  std::swap(score_, other->score_);
  std::swap(z_, other->z_);
  std::swap(points_, other->points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMember::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMember

// required uint64 id = 1;
bool CombatMember::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatMember::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatMember::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.id)
  return id_;
}
void CombatMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.id)
}

// required string name = 2;
bool CombatMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CombatMember::name() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.name)
  return name_.GetNoArena();
}
void CombatMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CombatMember.name)
}
#if LANG_CXX11
void CombatMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CombatMember.name)
}
#endif
void CombatMember::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CombatMember.name)
}
void CombatMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CombatMember.name)
}
::std::string* CombatMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.CombatMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CombatMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.CombatMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CombatMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.CombatMember.name)
}

// required bool ready = 3;
bool CombatMember::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CombatMember::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
void CombatMember::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
void CombatMember::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
bool CombatMember::ready() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.ready)
  return ready_;
}
void CombatMember::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.ready)
}

// required bool dead = 4;
bool CombatMember::has_dead() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CombatMember::set_has_dead() {
  _has_bits_[0] |= 0x00000010u;
}
void CombatMember::clear_has_dead() {
  _has_bits_[0] &= ~0x00000010u;
}
void CombatMember::clear_dead() {
  dead_ = false;
  clear_has_dead();
}
bool CombatMember::dead() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.dead)
  return dead_;
}
void CombatMember::set_dead(bool value) {
  set_has_dead();
  dead_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.dead)
}

// required uint32 roleId = 5;
bool CombatMember::has_roleid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CombatMember::set_has_roleid() {
  _has_bits_[0] |= 0x00000040u;
}
void CombatMember::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CombatMember::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
::google::protobuf::uint32 CombatMember::roleid() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.roleId)
  return roleid_;
}
void CombatMember::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.roleId)
}

// required int32 position = 6;
bool CombatMember::has_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CombatMember::set_has_position() {
  _has_bits_[0] |= 0x00000080u;
}
void CombatMember::clear_has_position() {
  _has_bits_[0] &= ~0x00000080u;
}
void CombatMember::clear_position() {
  position_ = 0;
  clear_has_position();
}
::google::protobuf::int32 CombatMember::position() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.position)
  return position_;
}
void CombatMember::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.position)
}

// required bool robot = 7;
bool CombatMember::has_robot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CombatMember::set_has_robot() {
  _has_bits_[0] |= 0x00000020u;
}
void CombatMember::clear_has_robot() {
  _has_bits_[0] &= ~0x00000020u;
}
void CombatMember::clear_robot() {
  robot_ = false;
  clear_has_robot();
}
bool CombatMember::robot() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.robot)
  return robot_;
}
void CombatMember::set_robot(bool value) {
  set_has_robot();
  robot_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.robot)
}

// required string grade = 8;
bool CombatMember::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatMember::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatMember::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatMember::clear_grade() {
  grade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_grade();
}
const ::std::string& CombatMember::grade() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.grade)
  return grade_.GetNoArena();
}
void CombatMember::set_grade(const ::std::string& value) {
  set_has_grade();
  grade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CombatMember.grade)
}
#if LANG_CXX11
void CombatMember::set_grade(::std::string&& value) {
  set_has_grade();
  grade_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CombatMember.grade)
}
#endif
void CombatMember::set_grade(const char* value) {
  set_has_grade();
  grade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CombatMember.grade)
}
void CombatMember::set_grade(const char* value, size_t size) {
  set_has_grade();
  grade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CombatMember.grade)
}
::std::string* CombatMember::mutable_grade() {
  set_has_grade();
  // @@protoc_insertion_point(field_mutable:proto.CombatMember.grade)
  return grade_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CombatMember::release_grade() {
  // @@protoc_insertion_point(field_release:proto.CombatMember.grade)
  clear_has_grade();
  return grade_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CombatMember::set_allocated_grade(::std::string* grade) {
  if (grade != NULL) {
    set_has_grade();
  } else {
    clear_has_grade();
  }
  grade_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grade);
  // @@protoc_insertion_point(field_set_allocated:proto.CombatMember.grade)
}

// required uint32 scoreGain = 9;
bool CombatMember::has_scoregain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CombatMember::set_has_scoregain() {
  _has_bits_[0] |= 0x00000100u;
}
void CombatMember::clear_has_scoregain() {
  _has_bits_[0] &= ~0x00000100u;
}
void CombatMember::clear_scoregain() {
  scoregain_ = 0u;
  clear_has_scoregain();
}
::google::protobuf::uint32 CombatMember::scoregain() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.scoreGain)
  return scoregain_;
}
void CombatMember::set_scoregain(::google::protobuf::uint32 value) {
  set_has_scoregain();
  scoregain_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.scoreGain)
}

// required uint64 score = 10;
bool CombatMember::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CombatMember::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
void CombatMember::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
void CombatMember::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
::google::protobuf::uint64 CombatMember::score() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.score)
  return score_;
}
void CombatMember::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.score)
}

// required int32 z = 11;
bool CombatMember::has_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CombatMember::set_has_z() {
  _has_bits_[0] |= 0x00000400u;
}
void CombatMember::clear_has_z() {
  _has_bits_[0] &= ~0x00000400u;
}
void CombatMember::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CombatMember::z() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.z)
  return z_;
}
void CombatMember::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.z)
}

// required int32 points = 12;
bool CombatMember::has_points() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CombatMember::set_has_points() {
  _has_bits_[0] |= 0x00000800u;
}
void CombatMember::clear_has_points() {
  _has_bits_[0] &= ~0x00000800u;
}
void CombatMember::clear_points() {
  points_ = 0;
  clear_has_points();
}
::google::protobuf::int32 CombatMember::points() const {
  // @@protoc_insertion_point(field_get:proto.CombatMember.points)
  return points_;
}
void CombatMember::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMember.points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapItem::kZFieldNumber;
const int MapItem::kXFieldNumber;
const int MapItem::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapItem::MapItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapItem)
}
MapItem::MapItem(const MapItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&z_, &from.z_,
    reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&z_) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:proto.MapItem)
}

void MapItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&z_, 0, reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&z_) + sizeof(itemid_));
}

MapItem::~MapItem() {
  // @@protoc_insertion_point(destructor:proto.MapItem)
  SharedDtor();
}

void MapItem::SharedDtor() {
}

void MapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapItem::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[7].descriptor;
}

const MapItem& MapItem::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapItem* MapItem::New(::google::protobuf::Arena* arena) const {
  MapItem* n = new MapItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapItem)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&z_, 0, reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&z_) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 itemId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MapItem)
  return false;
#undef DO_
}

void MapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MapItem)
  // required int32 z = 1;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->z(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MapItem)
}

::google::protobuf::uint8* MapItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapItem)
  // required int32 z = 1;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->z(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapItem)
  return target;
}

size_t MapItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.MapItem)
  size_t total_size = 0;

  if (has_z()) {
    // required int32 z = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_itemid()) {
    // required int32 itemId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }

  return total_size;
}
size_t MapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 z = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 itemId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MapItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapItem)
    MergeFrom(*source);
  }
}

void MapItem::MergeFrom(const MapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
}

void MapItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapItem::CopyFrom(const MapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MapItem::Swap(MapItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapItem::InternalSwap(MapItem* other) {
  std::swap(z_, other->z_);
  std::swap(x_, other->x_);
  std::swap(itemid_, other->itemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapItem::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapItem

// required int32 z = 1;
bool MapItem::has_z() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapItem::set_has_z() {
  _has_bits_[0] |= 0x00000001u;
}
void MapItem::clear_has_z() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapItem::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 MapItem::z() const {
  // @@protoc_insertion_point(field_get:proto.MapItem.z)
  return z_;
}
void MapItem::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.MapItem.z)
}

// required int32 x = 2;
bool MapItem::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapItem::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void MapItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapItem::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 MapItem::x() const {
  // @@protoc_insertion_point(field_get:proto.MapItem.x)
  return x_;
}
void MapItem::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.MapItem.x)
}

// required int32 itemId = 3;
bool MapItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
void MapItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 MapItem::itemid() const {
  // @@protoc_insertion_point(field_get:proto.MapItem.itemId)
  return itemid_;
}
void MapItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.MapItem.itemId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMatchNotify::kCombatIdFieldNumber;
const int CombatMatchNotify::kMembersFieldNumber;
const int CombatMatchNotify::kMapsFieldNumber;
const int CombatMatchNotify::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMatchNotify::CombatMatchNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMatchNotify)
}
CombatMatchNotify::CombatMatchNotify(const CombatMatchNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      maps_(from.maps_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  combatid_ = from.combatid_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMatchNotify)
}

void CombatMatchNotify::SharedCtor() {
  _cached_size_ = 0;
  combatid_ = 0u;
}

CombatMatchNotify::~CombatMatchNotify() {
  // @@protoc_insertion_point(destructor:proto.CombatMatchNotify)
  SharedDtor();
}

void CombatMatchNotify::SharedDtor() {
}

void CombatMatchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMatchNotify::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[8].descriptor;
}

const CombatMatchNotify& CombatMatchNotify::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMatchNotify* CombatMatchNotify::New(::google::protobuf::Arena* arena) const {
  CombatMatchNotify* n = new CombatMatchNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMatchNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMatchNotify)
  members_.Clear();
  maps_.Clear();
  items_.Clear();
  combatid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMatchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMatchNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 combatId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_combatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CombatMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated uint32 maps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_maps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_maps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.MapItem items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMatchNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMatchNotify)
  return false;
#undef DO_
}

void CombatMatchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMatchNotify)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combatid(), output);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // repeated uint32 maps = 3;
  for (int i = 0, n = this->maps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->maps(i), output);
  }

  // repeated .proto.MapItem items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMatchNotify)
}

::google::protobuf::uint8* CombatMatchNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMatchNotify)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combatid(), target);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  // repeated uint32 maps = 3;
  for (int i = 0, n = this->maps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->maps(i), target);
  }

  // repeated .proto.MapItem items = 4;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMatchNotify)
  return target;
}

size_t CombatMatchNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMatchNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 combatId = 1;
  if (has_combatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combatid());
  }
  // repeated .proto.CombatMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated uint32 maps = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->maps_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->maps_size());
    total_size += data_size;
  }

  // repeated .proto.MapItem items = 4;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMatchNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMatchNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMatchNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMatchNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMatchNotify)
    MergeFrom(*source);
  }
}

void CombatMatchNotify::MergeFrom(const CombatMatchNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  maps_.MergeFrom(from.maps_);
  items_.MergeFrom(from.items_);
  if (from.has_combatid()) {
    set_combatid(from.combatid());
  }
}

void CombatMatchNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMatchNotify::CopyFrom(const CombatMatchNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMatchNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void CombatMatchNotify::Swap(CombatMatchNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMatchNotify::InternalSwap(CombatMatchNotify* other) {
  members_.UnsafeArenaSwap(&other->members_);
  maps_.UnsafeArenaSwap(&other->maps_);
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(combatid_, other->combatid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMatchNotify::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMatchNotify

// required uint32 combatId = 1;
bool CombatMatchNotify::has_combatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMatchNotify::set_has_combatid() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMatchNotify::clear_has_combatid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMatchNotify::clear_combatid() {
  combatid_ = 0u;
  clear_has_combatid();
}
::google::protobuf::uint32 CombatMatchNotify::combatid() const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchNotify.combatId)
  return combatid_;
}
void CombatMatchNotify::set_combatid(::google::protobuf::uint32 value) {
  set_has_combatid();
  combatid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMatchNotify.combatId)
}

// repeated .proto.CombatMember members = 2;
int CombatMatchNotify::members_size() const {
  return members_.size();
}
void CombatMatchNotify::clear_members() {
  members_.Clear();
}
const ::proto::CombatMember& CombatMatchNotify::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchNotify.members)
  return members_.Get(index);
}
::proto::CombatMember* CombatMatchNotify::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CombatMatchNotify.members)
  return members_.Mutable(index);
}
::proto::CombatMember* CombatMatchNotify::add_members() {
  // @@protoc_insertion_point(field_add:proto.CombatMatchNotify.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CombatMember >*
CombatMatchNotify::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.CombatMatchNotify.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CombatMember >&
CombatMatchNotify::members() const {
  // @@protoc_insertion_point(field_list:proto.CombatMatchNotify.members)
  return members_;
}

// repeated uint32 maps = 3;
int CombatMatchNotify::maps_size() const {
  return maps_.size();
}
void CombatMatchNotify::clear_maps() {
  maps_.Clear();
}
::google::protobuf::uint32 CombatMatchNotify::maps(int index) const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchNotify.maps)
  return maps_.Get(index);
}
void CombatMatchNotify::set_maps(int index, ::google::protobuf::uint32 value) {
  maps_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CombatMatchNotify.maps)
}
void CombatMatchNotify::add_maps(::google::protobuf::uint32 value) {
  maps_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CombatMatchNotify.maps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CombatMatchNotify::maps() const {
  // @@protoc_insertion_point(field_list:proto.CombatMatchNotify.maps)
  return maps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CombatMatchNotify::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:proto.CombatMatchNotify.maps)
  return &maps_;
}

// repeated .proto.MapItem items = 4;
int CombatMatchNotify::items_size() const {
  return items_.size();
}
void CombatMatchNotify::clear_items() {
  items_.Clear();
}
const ::proto::MapItem& CombatMatchNotify::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.CombatMatchNotify.items)
  return items_.Get(index);
}
::proto::MapItem* CombatMatchNotify::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CombatMatchNotify.items)
  return items_.Mutable(index);
}
::proto::MapItem* CombatMatchNotify::add_items() {
  // @@protoc_insertion_point(field_add:proto.CombatMatchNotify.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::MapItem >*
CombatMatchNotify::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.CombatMatchNotify.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::MapItem >&
CombatMatchNotify::items() const {
  // @@protoc_insertion_point(field_list:proto.CombatMatchNotify.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatReadyReq::CombatReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatReadyReq)
}
CombatReadyReq::CombatReadyReq(const CombatReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CombatReadyReq)
}

void CombatReadyReq::SharedCtor() {
  _cached_size_ = 0;
}

CombatReadyReq::~CombatReadyReq() {
  // @@protoc_insertion_point(destructor:proto.CombatReadyReq)
  SharedDtor();
}

void CombatReadyReq::SharedDtor() {
}

void CombatReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatReadyReq::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[9].descriptor;
}

const CombatReadyReq& CombatReadyReq::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatReadyReq* CombatReadyReq::New(::google::protobuf::Arena* arena) const {
  CombatReadyReq* n = new CombatReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatReadyReq)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatReadyReq)
  return false;
#undef DO_
}

void CombatReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatReadyReq)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatReadyReq)
}

::google::protobuf::uint8* CombatReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatReadyReq)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatReadyReq)
  return target;
}

size_t CombatReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatReadyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatReadyReq)
    MergeFrom(*source);
  }
}

void CombatReadyReq::MergeFrom(const CombatReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CombatReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatReadyReq::CopyFrom(const CombatReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatReadyReq::IsInitialized() const {
  return true;
}

void CombatReadyReq::Swap(CombatReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatReadyReq::InternalSwap(CombatReadyReq* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatReadyReq::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatReadyReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatStartNotify::kNowTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatStartNotify::CombatStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatStartNotify)
}
CombatStartNotify::CombatStartNotify(const CombatStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nowtime_ = from.nowtime_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatStartNotify)
}

void CombatStartNotify::SharedCtor() {
  _cached_size_ = 0;
  nowtime_ = GOOGLE_ULONGLONG(0);
}

CombatStartNotify::~CombatStartNotify() {
  // @@protoc_insertion_point(destructor:proto.CombatStartNotify)
  SharedDtor();
}

void CombatStartNotify::SharedDtor() {
}

void CombatStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatStartNotify::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[10].descriptor;
}

const CombatStartNotify& CombatStartNotify::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatStartNotify* CombatStartNotify::New(::google::protobuf::Arena* arena) const {
  CombatStartNotify* n = new CombatStartNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatStartNotify)
  nowtime_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatStartNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 nowTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nowtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nowtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatStartNotify)
  return false;
#undef DO_
}

void CombatStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatStartNotify)
  // required uint64 nowTime = 1;
  if (has_nowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nowtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatStartNotify)
}

::google::protobuf::uint8* CombatStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatStartNotify)
  // required uint64 nowTime = 1;
  if (has_nowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nowtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatStartNotify)
  return target;
}

size_t CombatStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatStartNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 nowTime = 1;
  if (has_nowtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nowtime());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatStartNotify)
    MergeFrom(*source);
  }
}

void CombatStartNotify::MergeFrom(const CombatStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nowtime()) {
    set_nowtime(from.nowtime());
  }
}

void CombatStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatStartNotify::CopyFrom(const CombatStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CombatStartNotify::Swap(CombatStartNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatStartNotify::InternalSwap(CombatStartNotify* other) {
  std::swap(nowtime_, other->nowtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatStartNotify::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatStartNotify

// required uint64 nowTime = 1;
bool CombatStartNotify::has_nowtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatStartNotify::set_has_nowtime() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatStartNotify::clear_has_nowtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatStartNotify::clear_nowtime() {
  nowtime_ = GOOGLE_ULONGLONG(0);
  clear_has_nowtime();
}
::google::protobuf::uint64 CombatStartNotify::nowtime() const {
  // @@protoc_insertion_point(field_get:proto.CombatStartNotify.nowTime)
  return nowtime_;
}
void CombatStartNotify::set_nowtime(::google::protobuf::uint64 value) {
  set_has_nowtime();
  nowtime_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatStartNotify.nowTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMemberDeadReq::kDeadReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMemberDeadReq::CombatMemberDeadReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMemberDeadReq)
}
CombatMemberDeadReq::CombatMemberDeadReq(const CombatMemberDeadReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deadreason_ = from.deadreason_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMemberDeadReq)
}

void CombatMemberDeadReq::SharedCtor() {
  _cached_size_ = 0;
  deadreason_ = 0u;
}

CombatMemberDeadReq::~CombatMemberDeadReq() {
  // @@protoc_insertion_point(destructor:proto.CombatMemberDeadReq)
  SharedDtor();
}

void CombatMemberDeadReq::SharedDtor() {
}

void CombatMemberDeadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMemberDeadReq::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[11].descriptor;
}

const CombatMemberDeadReq& CombatMemberDeadReq::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMemberDeadReq* CombatMemberDeadReq::New(::google::protobuf::Arena* arena) const {
  CombatMemberDeadReq* n = new CombatMemberDeadReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMemberDeadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMemberDeadReq)
  deadreason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMemberDeadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMemberDeadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deadReason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_deadreason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMemberDeadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMemberDeadReq)
  return false;
#undef DO_
}

void CombatMemberDeadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMemberDeadReq)
  // required uint32 deadReason = 1;
  if (has_deadreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deadreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMemberDeadReq)
}

::google::protobuf::uint8* CombatMemberDeadReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMemberDeadReq)
  // required uint32 deadReason = 1;
  if (has_deadreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deadreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMemberDeadReq)
  return target;
}

size_t CombatMemberDeadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMemberDeadReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 deadReason = 1;
  if (has_deadreason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deadreason());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMemberDeadReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMemberDeadReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMemberDeadReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMemberDeadReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMemberDeadReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMemberDeadReq)
    MergeFrom(*source);
  }
}

void CombatMemberDeadReq::MergeFrom(const CombatMemberDeadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMemberDeadReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deadreason()) {
    set_deadreason(from.deadreason());
  }
}

void CombatMemberDeadReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMemberDeadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMemberDeadReq::CopyFrom(const CombatMemberDeadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMemberDeadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMemberDeadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CombatMemberDeadReq::Swap(CombatMemberDeadReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMemberDeadReq::InternalSwap(CombatMemberDeadReq* other) {
  std::swap(deadreason_, other->deadreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMemberDeadReq::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMemberDeadReq

// required uint32 deadReason = 1;
bool CombatMemberDeadReq::has_deadreason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMemberDeadReq::set_has_deadreason() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMemberDeadReq::clear_has_deadreason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMemberDeadReq::clear_deadreason() {
  deadreason_ = 0u;
  clear_has_deadreason();
}
::google::protobuf::uint32 CombatMemberDeadReq::deadreason() const {
  // @@protoc_insertion_point(field_get:proto.CombatMemberDeadReq.deadReason)
  return deadreason_;
}
void CombatMemberDeadReq::set_deadreason(::google::protobuf::uint32 value) {
  set_has_deadreason();
  deadreason_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMemberDeadReq.deadReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMemberDeadNotify::kIdFieldNumber;
const int CombatMemberDeadNotify::kDeadReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMemberDeadNotify::CombatMemberDeadNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMemberDeadNotify)
}
CombatMemberDeadNotify::CombatMemberDeadNotify(const CombatMemberDeadNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&deadreason_) -
    reinterpret_cast<char*>(&id_) + sizeof(deadreason_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatMemberDeadNotify)
}

void CombatMemberDeadNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&deadreason_) -
    reinterpret_cast<char*>(&id_) + sizeof(deadreason_));
}

CombatMemberDeadNotify::~CombatMemberDeadNotify() {
  // @@protoc_insertion_point(destructor:proto.CombatMemberDeadNotify)
  SharedDtor();
}

void CombatMemberDeadNotify::SharedDtor() {
}

void CombatMemberDeadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMemberDeadNotify::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[12].descriptor;
}

const CombatMemberDeadNotify& CombatMemberDeadNotify::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMemberDeadNotify* CombatMemberDeadNotify::New(::google::protobuf::Arena* arena) const {
  CombatMemberDeadNotify* n = new CombatMemberDeadNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMemberDeadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMemberDeadNotify)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&deadreason_) -
      reinterpret_cast<char*>(&id_) + sizeof(deadreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMemberDeadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMemberDeadNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 deadReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_deadreason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMemberDeadNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMemberDeadNotify)
  return false;
#undef DO_
}

void CombatMemberDeadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMemberDeadNotify)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint32 deadReason = 2;
  if (has_deadreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deadreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMemberDeadNotify)
}

::google::protobuf::uint8* CombatMemberDeadNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMemberDeadNotify)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint32 deadReason = 2;
  if (has_deadreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deadreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMemberDeadNotify)
  return target;
}

size_t CombatMemberDeadNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatMemberDeadNotify)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_deadreason()) {
    // required uint32 deadReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deadreason());
  }

  return total_size;
}
size_t CombatMemberDeadNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMemberDeadNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint32 deadReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deadreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMemberDeadNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMemberDeadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMemberDeadNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMemberDeadNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMemberDeadNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMemberDeadNotify)
    MergeFrom(*source);
  }
}

void CombatMemberDeadNotify::MergeFrom(const CombatMemberDeadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMemberDeadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_deadreason()) {
      set_deadreason(from.deadreason());
    }
  }
}

void CombatMemberDeadNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMemberDeadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMemberDeadNotify::CopyFrom(const CombatMemberDeadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMemberDeadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMemberDeadNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CombatMemberDeadNotify::Swap(CombatMemberDeadNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMemberDeadNotify::InternalSwap(CombatMemberDeadNotify* other) {
  std::swap(id_, other->id_);
  std::swap(deadreason_, other->deadreason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMemberDeadNotify::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMemberDeadNotify

// required uint64 id = 1;
bool CombatMemberDeadNotify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMemberDeadNotify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMemberDeadNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMemberDeadNotify::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatMemberDeadNotify::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatMemberDeadNotify.id)
  return id_;
}
void CombatMemberDeadNotify::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMemberDeadNotify.id)
}

// required uint32 deadReason = 2;
bool CombatMemberDeadNotify::has_deadreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatMemberDeadNotify::set_has_deadreason() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatMemberDeadNotify::clear_has_deadreason() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatMemberDeadNotify::clear_deadreason() {
  deadreason_ = 0u;
  clear_has_deadreason();
}
::google::protobuf::uint32 CombatMemberDeadNotify::deadreason() const {
  // @@protoc_insertion_point(field_get:proto.CombatMemberDeadNotify.deadReason)
  return deadreason_;
}
void CombatMemberDeadNotify::set_deadreason(::google::protobuf::uint32 value) {
  set_has_deadreason();
  deadreason_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMemberDeadNotify.deadReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMemberOfflineNotify::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMemberOfflineNotify::CombatMemberOfflineNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMemberOfflineNotify)
}
CombatMemberOfflineNotify::CombatMemberOfflineNotify(const CombatMemberOfflineNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMemberOfflineNotify)
}

void CombatMemberOfflineNotify::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

CombatMemberOfflineNotify::~CombatMemberOfflineNotify() {
  // @@protoc_insertion_point(destructor:proto.CombatMemberOfflineNotify)
  SharedDtor();
}

void CombatMemberOfflineNotify::SharedDtor() {
}

void CombatMemberOfflineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMemberOfflineNotify::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[13].descriptor;
}

const CombatMemberOfflineNotify& CombatMemberOfflineNotify::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMemberOfflineNotify* CombatMemberOfflineNotify::New(::google::protobuf::Arena* arena) const {
  CombatMemberOfflineNotify* n = new CombatMemberOfflineNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMemberOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMemberOfflineNotify)
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMemberOfflineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMemberOfflineNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMemberOfflineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMemberOfflineNotify)
  return false;
#undef DO_
}

void CombatMemberOfflineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMemberOfflineNotify)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMemberOfflineNotify)
}

::google::protobuf::uint8* CombatMemberOfflineNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMemberOfflineNotify)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMemberOfflineNotify)
  return target;
}

size_t CombatMemberOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMemberOfflineNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMemberOfflineNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMemberOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMemberOfflineNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMemberOfflineNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMemberOfflineNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMemberOfflineNotify)
    MergeFrom(*source);
  }
}

void CombatMemberOfflineNotify::MergeFrom(const CombatMemberOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMemberOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void CombatMemberOfflineNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMemberOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMemberOfflineNotify::CopyFrom(const CombatMemberOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMemberOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMemberOfflineNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CombatMemberOfflineNotify::Swap(CombatMemberOfflineNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMemberOfflineNotify::InternalSwap(CombatMemberOfflineNotify* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMemberOfflineNotify::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMemberOfflineNotify

// required uint64 id = 1;
bool CombatMemberOfflineNotify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMemberOfflineNotify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMemberOfflineNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMemberOfflineNotify::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatMemberOfflineNotify::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatMemberOfflineNotify.id)
  return id_;
}
void CombatMemberOfflineNotify::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMemberOfflineNotify.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatFinishNotify::kCombatIdFieldNumber;
const int CombatFinishNotify::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatFinishNotify::CombatFinishNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatFinishNotify)
}
CombatFinishNotify::CombatFinishNotify(const CombatFinishNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  combatid_ = from.combatid_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatFinishNotify)
}

void CombatFinishNotify::SharedCtor() {
  _cached_size_ = 0;
  combatid_ = 0u;
}

CombatFinishNotify::~CombatFinishNotify() {
  // @@protoc_insertion_point(destructor:proto.CombatFinishNotify)
  SharedDtor();
}

void CombatFinishNotify::SharedDtor() {
}

void CombatFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatFinishNotify::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[14].descriptor;
}

const CombatFinishNotify& CombatFinishNotify::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatFinishNotify* CombatFinishNotify::New(::google::protobuf::Arena* arena) const {
  CombatFinishNotify* n = new CombatFinishNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatFinishNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatFinishNotify)
  members_.Clear();
  combatid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatFinishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 combatId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_combatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CombatMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatFinishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatFinishNotify)
  return false;
#undef DO_
}

void CombatFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatFinishNotify)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combatid(), output);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatFinishNotify)
}

::google::protobuf::uint8* CombatFinishNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatFinishNotify)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combatid(), target);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatFinishNotify)
  return target;
}

size_t CombatFinishNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatFinishNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 combatId = 1;
  if (has_combatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combatid());
  }
  // repeated .proto.CombatMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatFinishNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatFinishNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatFinishNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatFinishNotify)
    MergeFrom(*source);
  }
}

void CombatFinishNotify::MergeFrom(const CombatFinishNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.has_combatid()) {
    set_combatid(from.combatid());
  }
}

void CombatFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatFinishNotify::CopyFrom(const CombatFinishNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatFinishNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void CombatFinishNotify::Swap(CombatFinishNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatFinishNotify::InternalSwap(CombatFinishNotify* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(combatid_, other->combatid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatFinishNotify::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatFinishNotify

// required uint32 combatId = 1;
bool CombatFinishNotify::has_combatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatFinishNotify::set_has_combatid() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatFinishNotify::clear_has_combatid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatFinishNotify::clear_combatid() {
  combatid_ = 0u;
  clear_has_combatid();
}
::google::protobuf::uint32 CombatFinishNotify::combatid() const {
  // @@protoc_insertion_point(field_get:proto.CombatFinishNotify.combatId)
  return combatid_;
}
void CombatFinishNotify::set_combatid(::google::protobuf::uint32 value) {
  set_has_combatid();
  combatid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatFinishNotify.combatId)
}

// repeated .proto.CombatMember members = 2;
int CombatFinishNotify::members_size() const {
  return members_.size();
}
void CombatFinishNotify::clear_members() {
  members_.Clear();
}
const ::proto::CombatMember& CombatFinishNotify::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.CombatFinishNotify.members)
  return members_.Get(index);
}
::proto::CombatMember* CombatFinishNotify::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CombatFinishNotify.members)
  return members_.Mutable(index);
}
::proto::CombatMember* CombatFinishNotify::add_members() {
  // @@protoc_insertion_point(field_add:proto.CombatFinishNotify.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CombatMember >*
CombatFinishNotify::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.CombatFinishNotify.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CombatMember >&
CombatFinishNotify::members() const {
  // @@protoc_insertion_point(field_list:proto.CombatFinishNotify.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatData::kXFieldNumber;
const int CombatData::kZFieldNumber;
const int CombatData::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatData::CombatData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatData)
}
CombatData::CombatData(const CombatData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatData)
}

void CombatData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_) + sizeof(direction_));
}

CombatData::~CombatData() {
  // @@protoc_insertion_point(destructor:proto.CombatData)
  SharedDtor();
}

void CombatData::SharedDtor() {
}

void CombatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatData::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[15].descriptor;
}

const CombatData& CombatData::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatData* CombatData::New(::google::protobuf::Arena* arena) const {
  CombatData* n = new CombatData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatData)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatData)
  return false;
#undef DO_
}

void CombatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatData)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->z(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatData)
}

::google::protobuf::uint8* CombatData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatData)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->z(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatData)
  return target;
}

size_t CombatData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatData)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_z()) {
    // required int32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_direction()) {
    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  return total_size;
}
size_t CombatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatData)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatData)
    MergeFrom(*source);
  }
}

void CombatData::MergeFrom(const CombatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
}

void CombatData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatData::CopyFrom(const CombatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CombatData::Swap(CombatData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatData::InternalSwap(CombatData* other) {
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatData::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatData

// required int32 x = 1;
bool CombatData::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatData::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatData::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatData::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CombatData::x() const {
  // @@protoc_insertion_point(field_get:proto.CombatData.x)
  return x_;
}
void CombatData::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatData.x)
}

// required int32 z = 2;
bool CombatData::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatData::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatData::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatData::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CombatData::z() const {
  // @@protoc_insertion_point(field_get:proto.CombatData.z)
  return z_;
}
void CombatData::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatData.z)
}

// required int32 direction = 3;
bool CombatData::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatData::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatData::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatData::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 CombatData::direction() const {
  // @@protoc_insertion_point(field_get:proto.CombatData.direction)
  return direction_;
}
void CombatData::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatData.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatDataSync::kIdFieldNumber;
const int CombatDataSync::kDataFieldNumber;
const int CombatDataSync::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatDataSync::CombatDataSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatDataSync)
}
CombatDataSync::CombatDataSync(const CombatDataSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::proto::CombatData(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatDataSync)
}

void CombatDataSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&data_) + sizeof(robotid_));
}

CombatDataSync::~CombatDataSync() {
  // @@protoc_insertion_point(destructor:proto.CombatDataSync)
  SharedDtor();
}

void CombatDataSync::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void CombatDataSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatDataSync::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[16].descriptor;
}

const CombatDataSync& CombatDataSync::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatDataSync* CombatDataSync::New(::google::protobuf::Arena* arena) const {
  CombatDataSync* n = new CombatDataSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatDataSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatDataSync)
  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::proto::CombatData::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&robotid_) -
      reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatDataSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatDataSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.CombatData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 robotId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_robotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatDataSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatDataSync)
  return false;
#undef DO_
}

void CombatDataSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatDataSync)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .proto.CombatData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // required uint64 robotId = 3;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->robotid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatDataSync)
}

::google::protobuf::uint8* CombatDataSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatDataSync)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .proto.CombatData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // required uint64 robotId = 3;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->robotid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatDataSync)
  return target;
}

size_t CombatDataSync::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatDataSync)
  size_t total_size = 0;

  if (has_data()) {
    // required .proto.CombatData data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_robotid()) {
    // required uint64 robotId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());
  }

  return total_size;
}
size_t CombatDataSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatDataSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .proto.CombatData data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 robotId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatDataSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatDataSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatDataSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatDataSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatDataSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatDataSync)
    MergeFrom(*source);
  }
}

void CombatDataSync::MergeFrom(const CombatDataSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatDataSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_data()) {
      mutable_data()->::proto::CombatData::MergeFrom(from.data());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
}

void CombatDataSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatDataSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatDataSync::CopyFrom(const CombatDataSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatDataSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatDataSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void CombatDataSync::Swap(CombatDataSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatDataSync::InternalSwap(CombatDataSync* other) {
  std::swap(data_, other->data_);
  std::swap(id_, other->id_);
  std::swap(robotid_, other->robotid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatDataSync::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatDataSync

// required uint64 id = 1;
bool CombatDataSync::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatDataSync::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatDataSync::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatDataSync::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatDataSync::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatDataSync.id)
  return id_;
}
void CombatDataSync::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatDataSync.id)
}

// required .proto.CombatData data = 2;
bool CombatDataSync::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatDataSync::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatDataSync::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatDataSync::clear_data() {
  if (data_ != NULL) data_->::proto::CombatData::Clear();
  clear_has_data();
}
const ::proto::CombatData& CombatDataSync::data() const {
  // @@protoc_insertion_point(field_get:proto.CombatDataSync.data)
  return data_ != NULL ? *data_
                         : *::proto::CombatData::internal_default_instance();
}
::proto::CombatData* CombatDataSync::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::proto::CombatData;
  }
  // @@protoc_insertion_point(field_mutable:proto.CombatDataSync.data)
  return data_;
}
::proto::CombatData* CombatDataSync::release_data() {
  // @@protoc_insertion_point(field_release:proto.CombatDataSync.data)
  clear_has_data();
  ::proto::CombatData* temp = data_;
  data_ = NULL;
  return temp;
}
void CombatDataSync::set_allocated_data(::proto::CombatData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CombatDataSync.data)
}

// required uint64 robotId = 3;
bool CombatDataSync::has_robotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatDataSync::set_has_robotid() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatDataSync::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatDataSync::clear_robotid() {
  robotid_ = GOOGLE_ULONGLONG(0);
  clear_has_robotid();
}
::google::protobuf::uint64 CombatDataSync::robotid() const {
  // @@protoc_insertion_point(field_get:proto.CombatDataSync.robotId)
  return robotid_;
}
void CombatDataSync::set_robotid(::google::protobuf::uint64 value) {
  set_has_robotid();
  robotid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatDataSync.robotId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMembersSync::kCombatIdFieldNumber;
const int CombatMembersSync::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMembersSync::CombatMembersSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMembersSync)
}
CombatMembersSync::CombatMembersSync(const CombatMembersSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  combatid_ = from.combatid_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMembersSync)
}

void CombatMembersSync::SharedCtor() {
  _cached_size_ = 0;
  combatid_ = 0u;
}

CombatMembersSync::~CombatMembersSync() {
  // @@protoc_insertion_point(destructor:proto.CombatMembersSync)
  SharedDtor();
}

void CombatMembersSync::SharedDtor() {
}

void CombatMembersSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMembersSync::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[17].descriptor;
}

const CombatMembersSync& CombatMembersSync::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMembersSync* CombatMembersSync::New(::google::protobuf::Arena* arena) const {
  CombatMembersSync* n = new CombatMembersSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMembersSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMembersSync)
  members_.Clear();
  combatid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMembersSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMembersSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 combatId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_combatid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CombatMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMembersSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMembersSync)
  return false;
#undef DO_
}

void CombatMembersSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMembersSync)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combatid(), output);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMembersSync)
}

::google::protobuf::uint8* CombatMembersSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMembersSync)
  // required uint32 combatId = 1;
  if (has_combatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combatid(), target);
  }

  // repeated .proto.CombatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMembersSync)
  return target;
}

size_t CombatMembersSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMembersSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 combatId = 1;
  if (has_combatid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combatid());
  }
  // repeated .proto.CombatMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMembersSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMembersSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMembersSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMembersSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMembersSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMembersSync)
    MergeFrom(*source);
  }
}

void CombatMembersSync::MergeFrom(const CombatMembersSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMembersSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.has_combatid()) {
    set_combatid(from.combatid());
  }
}

void CombatMembersSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMembersSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMembersSync::CopyFrom(const CombatMembersSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMembersSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMembersSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void CombatMembersSync::Swap(CombatMembersSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMembersSync::InternalSwap(CombatMembersSync* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(combatid_, other->combatid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMembersSync::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMembersSync

// required uint32 combatId = 1;
bool CombatMembersSync::has_combatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMembersSync::set_has_combatid() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMembersSync::clear_has_combatid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMembersSync::clear_combatid() {
  combatid_ = 0u;
  clear_has_combatid();
}
::google::protobuf::uint32 CombatMembersSync::combatid() const {
  // @@protoc_insertion_point(field_get:proto.CombatMembersSync.combatId)
  return combatid_;
}
void CombatMembersSync::set_combatid(::google::protobuf::uint32 value) {
  set_has_combatid();
  combatid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMembersSync.combatId)
}

// repeated .proto.CombatMember members = 2;
int CombatMembersSync::members_size() const {
  return members_.size();
}
void CombatMembersSync::clear_members() {
  members_.Clear();
}
const ::proto::CombatMember& CombatMembersSync::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.CombatMembersSync.members)
  return members_.Get(index);
}
::proto::CombatMember* CombatMembersSync::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CombatMembersSync.members)
  return members_.Mutable(index);
}
::proto::CombatMember* CombatMembersSync::add_members() {
  // @@protoc_insertion_point(field_add:proto.CombatMembersSync.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CombatMember >*
CombatMembersSync::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.CombatMembersSync.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CombatMember >&
CombatMembersSync::members() const {
  // @@protoc_insertion_point(field_list:proto.CombatMembersSync.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kZFieldNumber;
const int Position::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:proto.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_) + sizeof(direction_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:proto.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[18].descriptor;
}

const Position& Position::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Position)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_) + sizeof(direction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Position)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 z = 2;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->z(), output);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Position)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 z = 2;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->z(), target);
  }

  // required int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.Position)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_z()) {
    // required int32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_direction()) {
    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 z = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// required int32 x = 1;
bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:proto.Position.x)
  return x_;
}
void Position::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Position.x)
}

// required int32 z = 2;
bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 Position::z() const {
  // @@protoc_insertion_point(field_get:proto.Position.z)
  return z_;
}
void Position::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.Position.z)
}

// required int32 direction = 3;
bool Position::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Position::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void Position::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void Position::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 Position::direction() const {
  // @@protoc_insertion_point(field_get:proto.Position.direction)
  return direction_;
}
void Position::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:proto.Position.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionPair::kFromFieldNumber;
const int PositionPair::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionPair::PositionPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PositionPair)
}
PositionPair::PositionPair(const PositionPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::proto::Position(*from.from_);
  } else {
    from_ = NULL;
  }
  if (from.has_to()) {
    to_ = new ::proto::Position(*from.to_);
  } else {
    to_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.PositionPair)
}

void PositionPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&from_, 0, reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_) + sizeof(to_));
}

PositionPair::~PositionPair() {
  // @@protoc_insertion_point(destructor:proto.PositionPair)
  SharedDtor();
}

void PositionPair::SharedDtor() {
  if (this != internal_default_instance()) {
    delete from_;
  }
  if (this != internal_default_instance()) {
    delete to_;
  }
}

void PositionPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionPair::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[19].descriptor;
}

const PositionPair& PositionPair::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

PositionPair* PositionPair::New(::google::protobuf::Arena* arena) const {
  PositionPair* n = new PositionPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PositionPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_from()) {
      GOOGLE_DCHECK(from_ != NULL);
      from_->::proto::Position::Clear();
    }
    if (has_to()) {
      GOOGLE_DCHECK(to_ != NULL);
      to_->::proto::Position::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PositionPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PositionPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.Position from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.Position to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PositionPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PositionPair)
  return false;
#undef DO_
}

void PositionPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PositionPair)
  // required .proto.Position from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // required .proto.Position to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PositionPair)
}

::google::protobuf::uint8* PositionPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PositionPair)
  // required .proto.Position from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, false, target);
  }

  // required .proto.Position to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PositionPair)
  return target;
}

size_t PositionPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PositionPair)
  size_t total_size = 0;

  if (has_from()) {
    // required .proto.Position from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);
  }

  if (has_to()) {
    // required .proto.Position to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_);
  }

  return total_size;
}
size_t PositionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PositionPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .proto.Position from = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_);

    // required .proto.Position to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PositionPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PositionPair)
    MergeFrom(*source);
  }
}

void PositionPair::MergeFrom(const PositionPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_from()) {
      mutable_from()->::proto::Position::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::proto::Position::MergeFrom(from.to());
    }
  }
}

void PositionPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionPair::CopyFrom(const PositionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_from()) {
    if (!this->from_->IsInitialized()) return false;
  }
  if (has_to()) {
    if (!this->to_->IsInitialized()) return false;
  }
  return true;
}

void PositionPair::Swap(PositionPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionPair::InternalSwap(PositionPair* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionPair::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionPair

// required .proto.Position from = 1;
bool PositionPair::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PositionPair::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void PositionPair::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void PositionPair::clear_from() {
  if (from_ != NULL) from_->::proto::Position::Clear();
  clear_has_from();
}
const ::proto::Position& PositionPair::from() const {
  // @@protoc_insertion_point(field_get:proto.PositionPair.from)
  return from_ != NULL ? *from_
                         : *::proto::Position::internal_default_instance();
}
::proto::Position* PositionPair::mutable_from() {
  set_has_from();
  if (from_ == NULL) {
    from_ = new ::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:proto.PositionPair.from)
  return from_;
}
::proto::Position* PositionPair::release_from() {
  // @@protoc_insertion_point(field_release:proto.PositionPair.from)
  clear_has_from();
  ::proto::Position* temp = from_;
  from_ = NULL;
  return temp;
}
void PositionPair::set_allocated_from(::proto::Position* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PositionPair.from)
}

// required .proto.Position to = 2;
bool PositionPair::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PositionPair::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void PositionPair::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void PositionPair::clear_to() {
  if (to_ != NULL) to_->::proto::Position::Clear();
  clear_has_to();
}
const ::proto::Position& PositionPair::to() const {
  // @@protoc_insertion_point(field_get:proto.PositionPair.to)
  return to_ != NULL ? *to_
                         : *::proto::Position::internal_default_instance();
}
::proto::Position* PositionPair::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:proto.PositionPair.to)
  return to_;
}
::proto::Position* PositionPair::release_to() {
  // @@protoc_insertion_point(field_release:proto.PositionPair.to)
  clear_has_to();
  ::proto::Position* temp = to_;
  to_ = NULL;
  return temp;
}
void PositionPair::set_allocated_to(::proto::Position* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PositionPair.to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatPullSync::kSourceIdFieldNumber;
const int CombatPullSync::kTargetIdFieldNumber;
const int CombatPullSync::kSourceFieldNumber;
const int CombatPullSync::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatPullSync::CombatPullSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatPullSync)
}
CombatPullSync::CombatPullSync(const CombatPullSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source()) {
    source_ = new ::proto::PositionPair(*from.source_);
  } else {
    source_ = NULL;
  }
  if (from.has_target()) {
    target_ = new ::proto::PositionPair(*from.target_);
  } else {
    target_ = NULL;
  }
  ::memcpy(&sourceid_, &from.sourceid_,
    reinterpret_cast<char*>(&targetid_) -
    reinterpret_cast<char*>(&sourceid_) + sizeof(targetid_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatPullSync)
}

void CombatPullSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_, 0, reinterpret_cast<char*>(&targetid_) -
    reinterpret_cast<char*>(&source_) + sizeof(targetid_));
}

CombatPullSync::~CombatPullSync() {
  // @@protoc_insertion_point(destructor:proto.CombatPullSync)
  SharedDtor();
}

void CombatPullSync::SharedDtor() {
  if (this != internal_default_instance()) {
    delete source_;
  }
  if (this != internal_default_instance()) {
    delete target_;
  }
}

void CombatPullSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatPullSync::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[20].descriptor;
}

const CombatPullSync& CombatPullSync::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatPullSync* CombatPullSync::New(::google::protobuf::Arena* arena) const {
  CombatPullSync* n = new CombatPullSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatPullSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatPullSync)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source()) {
      GOOGLE_DCHECK(source_ != NULL);
      source_->::proto::PositionPair::Clear();
    }
    if (has_target()) {
      GOOGLE_DCHECK(target_ != NULL);
      target_->::proto::PositionPair::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&sourceid_, 0, reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&sourceid_) + sizeof(targetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatPullSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatPullSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sourceId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sourceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sourceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 targetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.PositionPair source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.PositionPair target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatPullSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatPullSync)
  return false;
#undef DO_
}

void CombatPullSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatPullSync)
  // required uint64 sourceId = 1;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sourceid(), output);
  }

  // required uint64 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetid(), output);
  }

  // required .proto.PositionPair source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->source_, output);
  }

  // required .proto.PositionPair target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatPullSync)
}

::google::protobuf::uint8* CombatPullSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatPullSync)
  // required uint64 sourceId = 1;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sourceid(), target);
  }

  // required uint64 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetid(), target);
  }

  // required .proto.PositionPair source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->source_, false, target);
  }

  // required .proto.PositionPair target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatPullSync)
  return target;
}

size_t CombatPullSync::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatPullSync)
  size_t total_size = 0;

  if (has_source()) {
    // required .proto.PositionPair source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  if (has_target()) {
    // required .proto.PositionPair target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  if (has_sourceid()) {
    // required uint64 sourceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sourceid());
  }

  if (has_targetid()) {
    // required uint64 targetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->targetid());
  }

  return total_size;
}
size_t CombatPullSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatPullSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .proto.PositionPair source = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);

    // required .proto.PositionPair target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);

    // required uint64 sourceId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sourceid());

    // required uint64 targetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->targetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatPullSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatPullSync)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatPullSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatPullSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatPullSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatPullSync)
    MergeFrom(*source);
  }
}

void CombatPullSync::MergeFrom(const CombatPullSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatPullSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_source()) {
      mutable_source()->::proto::PositionPair::MergeFrom(from.source());
    }
    if (from.has_target()) {
      mutable_target()->::proto::PositionPair::MergeFrom(from.target());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
}

void CombatPullSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatPullSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatPullSync::CopyFrom(const CombatPullSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatPullSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatPullSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_source()) {
    if (!this->source_->IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  return true;
}

void CombatPullSync::Swap(CombatPullSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatPullSync::InternalSwap(CombatPullSync* other) {
  std::swap(source_, other->source_);
  std::swap(target_, other->target_);
  std::swap(sourceid_, other->sourceid_);
  std::swap(targetid_, other->targetid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatPullSync::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatPullSync

// required uint64 sourceId = 1;
bool CombatPullSync::has_sourceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatPullSync::set_has_sourceid() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatPullSync::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatPullSync::clear_sourceid() {
  sourceid_ = GOOGLE_ULONGLONG(0);
  clear_has_sourceid();
}
::google::protobuf::uint64 CombatPullSync::sourceid() const {
  // @@protoc_insertion_point(field_get:proto.CombatPullSync.sourceId)
  return sourceid_;
}
void CombatPullSync::set_sourceid(::google::protobuf::uint64 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPullSync.sourceId)
}

// required uint64 targetId = 2;
bool CombatPullSync::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CombatPullSync::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
void CombatPullSync::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CombatPullSync::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
::google::protobuf::uint64 CombatPullSync::targetid() const {
  // @@protoc_insertion_point(field_get:proto.CombatPullSync.targetId)
  return targetid_;
}
void CombatPullSync::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPullSync.targetId)
}

// required .proto.PositionPair source = 3;
bool CombatPullSync::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatPullSync::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatPullSync::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatPullSync::clear_source() {
  if (source_ != NULL) source_->::proto::PositionPair::Clear();
  clear_has_source();
}
const ::proto::PositionPair& CombatPullSync::source() const {
  // @@protoc_insertion_point(field_get:proto.CombatPullSync.source)
  return source_ != NULL ? *source_
                         : *::proto::PositionPair::internal_default_instance();
}
::proto::PositionPair* CombatPullSync::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    source_ = new ::proto::PositionPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.CombatPullSync.source)
  return source_;
}
::proto::PositionPair* CombatPullSync::release_source() {
  // @@protoc_insertion_point(field_release:proto.CombatPullSync.source)
  clear_has_source();
  ::proto::PositionPair* temp = source_;
  source_ = NULL;
  return temp;
}
void CombatPullSync::set_allocated_source(::proto::PositionPair* source) {
  delete source_;
  source_ = source;
  if (source) {
    set_has_source();
  } else {
    clear_has_source();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CombatPullSync.source)
}

// required .proto.PositionPair target = 4;
bool CombatPullSync::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatPullSync::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatPullSync::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatPullSync::clear_target() {
  if (target_ != NULL) target_->::proto::PositionPair::Clear();
  clear_has_target();
}
const ::proto::PositionPair& CombatPullSync::target() const {
  // @@protoc_insertion_point(field_get:proto.CombatPullSync.target)
  return target_ != NULL ? *target_
                         : *::proto::PositionPair::internal_default_instance();
}
::proto::PositionPair* CombatPullSync::mutable_target() {
  set_has_target();
  if (target_ == NULL) {
    target_ = new ::proto::PositionPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.CombatPullSync.target)
  return target_;
}
::proto::PositionPair* CombatPullSync::release_target() {
  // @@protoc_insertion_point(field_release:proto.CombatPullSync.target)
  clear_has_target();
  ::proto::PositionPair* temp = target_;
  target_ = NULL;
  return temp;
}
void CombatPullSync::set_allocated_target(::proto::PositionPair* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CombatPullSync.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatMemberLeave::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatMemberLeave::CombatMemberLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatMemberLeave)
}
CombatMemberLeave::CombatMemberLeave(const CombatMemberLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.CombatMemberLeave)
}

void CombatMemberLeave::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

CombatMemberLeave::~CombatMemberLeave() {
  // @@protoc_insertion_point(destructor:proto.CombatMemberLeave)
  SharedDtor();
}

void CombatMemberLeave::SharedDtor() {
}

void CombatMemberLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatMemberLeave::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[21].descriptor;
}

const CombatMemberLeave& CombatMemberLeave::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatMemberLeave* CombatMemberLeave::New(::google::protobuf::Arena* arena) const {
  CombatMemberLeave* n = new CombatMemberLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatMemberLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatMemberLeave)
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatMemberLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatMemberLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatMemberLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatMemberLeave)
  return false;
#undef DO_
}

void CombatMemberLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatMemberLeave)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatMemberLeave)
}

::google::protobuf::uint8* CombatMemberLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatMemberLeave)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatMemberLeave)
  return target;
}

size_t CombatMemberLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatMemberLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatMemberLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatMemberLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatMemberLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatMemberLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatMemberLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatMemberLeave)
    MergeFrom(*source);
  }
}

void CombatMemberLeave::MergeFrom(const CombatMemberLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatMemberLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void CombatMemberLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatMemberLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatMemberLeave::CopyFrom(const CombatMemberLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatMemberLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatMemberLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CombatMemberLeave::Swap(CombatMemberLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatMemberLeave::InternalSwap(CombatMemberLeave* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatMemberLeave::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatMemberLeave

// required uint64 id = 1;
bool CombatMemberLeave::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatMemberLeave::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatMemberLeave::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatMemberLeave::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatMemberLeave::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatMemberLeave.id)
  return id_;
}
void CombatMemberLeave::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatMemberLeave.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatPickUpItemReq::kIdFieldNumber;
const int CombatPickUpItemReq::kXFieldNumber;
const int CombatPickUpItemReq::kZFieldNumber;
const int CombatPickUpItemReq::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatPickUpItemReq::CombatPickUpItemReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatPickUpItemReq)
}
CombatPickUpItemReq::CombatPickUpItemReq(const CombatPickUpItemReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatPickUpItemReq)
}

void CombatPickUpItemReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&id_) + sizeof(robotid_));
}

CombatPickUpItemReq::~CombatPickUpItemReq() {
  // @@protoc_insertion_point(destructor:proto.CombatPickUpItemReq)
  SharedDtor();
}

void CombatPickUpItemReq::SharedDtor() {
}

void CombatPickUpItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatPickUpItemReq::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[22].descriptor;
}

const CombatPickUpItemReq& CombatPickUpItemReq::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatPickUpItemReq* CombatPickUpItemReq::New(::google::protobuf::Arena* arena) const {
  CombatPickUpItemReq* n = new CombatPickUpItemReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatPickUpItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatPickUpItemReq)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&robotid_) -
      reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatPickUpItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatPickUpItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 robotId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_robotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatPickUpItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatPickUpItemReq)
  return false;
#undef DO_
}

void CombatPickUpItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatPickUpItemReq)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // required uint64 robotId = 4;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->robotid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatPickUpItemReq)
}

::google::protobuf::uint8* CombatPickUpItemReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatPickUpItemReq)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // required uint64 robotId = 4;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->robotid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatPickUpItemReq)
  return target;
}

size_t CombatPickUpItemReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatPickUpItemReq)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_z()) {
    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_robotid()) {
    // required uint64 robotId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());
  }

  return total_size;
}
size_t CombatPickUpItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatPickUpItemReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required uint64 robotId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatPickUpItemReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatPickUpItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatPickUpItemReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatPickUpItemReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatPickUpItemReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatPickUpItemReq)
    MergeFrom(*source);
  }
}

void CombatPickUpItemReq::MergeFrom(const CombatPickUpItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatPickUpItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
}

void CombatPickUpItemReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatPickUpItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatPickUpItemReq::CopyFrom(const CombatPickUpItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatPickUpItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatPickUpItemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CombatPickUpItemReq::Swap(CombatPickUpItemReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatPickUpItemReq::InternalSwap(CombatPickUpItemReq* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(robotid_, other->robotid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatPickUpItemReq::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatPickUpItemReq

// required uint64 id = 1;
bool CombatPickUpItemReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatPickUpItemReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatPickUpItemReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatPickUpItemReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatPickUpItemReq::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemReq.id)
  return id_;
}
void CombatPickUpItemReq::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemReq.id)
}

// required int32 x = 2;
bool CombatPickUpItemReq::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatPickUpItemReq::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatPickUpItemReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatPickUpItemReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CombatPickUpItemReq::x() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemReq.x)
  return x_;
}
void CombatPickUpItemReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemReq.x)
}

// required int32 z = 3;
bool CombatPickUpItemReq::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatPickUpItemReq::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatPickUpItemReq::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatPickUpItemReq::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CombatPickUpItemReq::z() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemReq.z)
  return z_;
}
void CombatPickUpItemReq::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemReq.z)
}

// required uint64 robotId = 4;
bool CombatPickUpItemReq::has_robotid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CombatPickUpItemReq::set_has_robotid() {
  _has_bits_[0] |= 0x00000008u;
}
void CombatPickUpItemReq::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CombatPickUpItemReq::clear_robotid() {
  robotid_ = GOOGLE_ULONGLONG(0);
  clear_has_robotid();
}
::google::protobuf::uint64 CombatPickUpItemReq::robotid() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemReq.robotId)
  return robotid_;
}
void CombatPickUpItemReq::set_robotid(::google::protobuf::uint64 value) {
  set_has_robotid();
  robotid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemReq.robotId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatPickUpItemRes::kIdFieldNumber;
const int CombatPickUpItemRes::kXFieldNumber;
const int CombatPickUpItemRes::kZFieldNumber;
const int CombatPickUpItemRes::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatPickUpItemRes::CombatPickUpItemRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatPickUpItemRes)
}
CombatPickUpItemRes::CombatPickUpItemRes(const CombatPickUpItemRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatPickUpItemRes)
}

void CombatPickUpItemRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&robotid_) -
    reinterpret_cast<char*>(&id_) + sizeof(robotid_));
}

CombatPickUpItemRes::~CombatPickUpItemRes() {
  // @@protoc_insertion_point(destructor:proto.CombatPickUpItemRes)
  SharedDtor();
}

void CombatPickUpItemRes::SharedDtor() {
}

void CombatPickUpItemRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatPickUpItemRes::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[23].descriptor;
}

const CombatPickUpItemRes& CombatPickUpItemRes::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatPickUpItemRes* CombatPickUpItemRes::New(::google::protobuf::Arena* arena) const {
  CombatPickUpItemRes* n = new CombatPickUpItemRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatPickUpItemRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatPickUpItemRes)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&robotid_) -
      reinterpret_cast<char*>(&id_) + sizeof(robotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatPickUpItemRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatPickUpItemRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 robotId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_robotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatPickUpItemRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatPickUpItemRes)
  return false;
#undef DO_
}

void CombatPickUpItemRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatPickUpItemRes)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // required uint64 robotId = 4;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->robotid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatPickUpItemRes)
}

::google::protobuf::uint8* CombatPickUpItemRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatPickUpItemRes)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // required uint64 robotId = 4;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->robotid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatPickUpItemRes)
  return target;
}

size_t CombatPickUpItemRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatPickUpItemRes)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_z()) {
    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_robotid()) {
    // required uint64 robotId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());
  }

  return total_size;
}
size_t CombatPickUpItemRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatPickUpItemRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required uint64 robotId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->robotid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatPickUpItemRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatPickUpItemRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatPickUpItemRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatPickUpItemRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatPickUpItemRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatPickUpItemRes)
    MergeFrom(*source);
  }
}

void CombatPickUpItemRes::MergeFrom(const CombatPickUpItemRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatPickUpItemRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
}

void CombatPickUpItemRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatPickUpItemRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatPickUpItemRes::CopyFrom(const CombatPickUpItemRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatPickUpItemRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatPickUpItemRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CombatPickUpItemRes::Swap(CombatPickUpItemRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatPickUpItemRes::InternalSwap(CombatPickUpItemRes* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(robotid_, other->robotid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatPickUpItemRes::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatPickUpItemRes

// required uint64 id = 1;
bool CombatPickUpItemRes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatPickUpItemRes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatPickUpItemRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatPickUpItemRes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatPickUpItemRes::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemRes.id)
  return id_;
}
void CombatPickUpItemRes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemRes.id)
}

// required int32 x = 2;
bool CombatPickUpItemRes::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatPickUpItemRes::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatPickUpItemRes::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatPickUpItemRes::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CombatPickUpItemRes::x() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemRes.x)
  return x_;
}
void CombatPickUpItemRes::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemRes.x)
}

// required int32 z = 3;
bool CombatPickUpItemRes::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatPickUpItemRes::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatPickUpItemRes::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatPickUpItemRes::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CombatPickUpItemRes::z() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemRes.z)
  return z_;
}
void CombatPickUpItemRes::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemRes.z)
}

// required uint64 robotId = 4;
bool CombatPickUpItemRes::has_robotid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CombatPickUpItemRes::set_has_robotid() {
  _has_bits_[0] |= 0x00000008u;
}
void CombatPickUpItemRes::clear_has_robotid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CombatPickUpItemRes::clear_robotid() {
  robotid_ = GOOGLE_ULONGLONG(0);
  clear_has_robotid();
}
::google::protobuf::uint64 CombatPickUpItemRes::robotid() const {
  // @@protoc_insertion_point(field_get:proto.CombatPickUpItemRes.robotId)
  return robotid_;
}
void CombatPickUpItemRes::set_robotid(::google::protobuf::uint64 value) {
  set_has_robotid();
  robotid_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatPickUpItemRes.robotId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CombatSetPositionRes::kIdFieldNumber;
const int CombatSetPositionRes::kXFieldNumber;
const int CombatSetPositionRes::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CombatSetPositionRes::CombatSetPositionRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CombatSetPositionRes)
}
CombatSetPositionRes::CombatSetPositionRes(const CombatSetPositionRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&id_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.CombatSetPositionRes)
}

void CombatSetPositionRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&id_) + sizeof(z_));
}

CombatSetPositionRes::~CombatSetPositionRes() {
  // @@protoc_insertion_point(destructor:proto.CombatSetPositionRes)
  SharedDtor();
}

void CombatSetPositionRes::SharedDtor() {
}

void CombatSetPositionRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatSetPositionRes::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[24].descriptor;
}

const CombatSetPositionRes& CombatSetPositionRes::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

CombatSetPositionRes* CombatSetPositionRes::New(::google::protobuf::Arena* arena) const {
  CombatSetPositionRes* n = new CombatSetPositionRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CombatSetPositionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CombatSetPositionRes)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&id_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CombatSetPositionRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CombatSetPositionRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CombatSetPositionRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CombatSetPositionRes)
  return false;
#undef DO_
}

void CombatSetPositionRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CombatSetPositionRes)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CombatSetPositionRes)
}

::google::protobuf::uint8* CombatSetPositionRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CombatSetPositionRes)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CombatSetPositionRes)
  return target;
}

size_t CombatSetPositionRes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.CombatSetPositionRes)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_z()) {
    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  return total_size;
}
size_t CombatSetPositionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CombatSetPositionRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 z = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatSetPositionRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CombatSetPositionRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CombatSetPositionRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CombatSetPositionRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CombatSetPositionRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CombatSetPositionRes)
    MergeFrom(*source);
  }
}

void CombatSetPositionRes::MergeFrom(const CombatSetPositionRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CombatSetPositionRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void CombatSetPositionRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CombatSetPositionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatSetPositionRes::CopyFrom(const CombatSetPositionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CombatSetPositionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatSetPositionRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CombatSetPositionRes::Swap(CombatSetPositionRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CombatSetPositionRes::InternalSwap(CombatSetPositionRes* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CombatSetPositionRes::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CombatSetPositionRes

// required uint64 id = 1;
bool CombatSetPositionRes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CombatSetPositionRes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CombatSetPositionRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CombatSetPositionRes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CombatSetPositionRes::id() const {
  // @@protoc_insertion_point(field_get:proto.CombatSetPositionRes.id)
  return id_;
}
void CombatSetPositionRes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatSetPositionRes.id)
}

// required int32 x = 2;
bool CombatSetPositionRes::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CombatSetPositionRes::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CombatSetPositionRes::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CombatSetPositionRes::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CombatSetPositionRes::x() const {
  // @@protoc_insertion_point(field_get:proto.CombatSetPositionRes.x)
  return x_;
}
void CombatSetPositionRes::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatSetPositionRes.x)
}

// required int32 z = 3;
bool CombatSetPositionRes::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CombatSetPositionRes::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CombatSetPositionRes::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CombatSetPositionRes::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CombatSetPositionRes::z() const {
  // @@protoc_insertion_point(field_get:proto.CombatSetPositionRes.z)
  return z_;
}
void CombatSetPositionRes::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CombatSetPositionRes.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
